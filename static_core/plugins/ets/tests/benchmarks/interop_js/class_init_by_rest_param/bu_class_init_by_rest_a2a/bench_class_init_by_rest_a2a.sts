
/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class UnlimitedArguments {
    a: number = 0;
    constructor(...a: number[]) {
        for (let i = 0; i < a.length; i++) {
            this.a += a[i];
        }

    }
}

export class ClassInitByRestA2a {

    state: number = 0;
    totalTime: number = 0;
    runsLeft: number = 1000000;

    public setup(): void {
        console.log('starting');
    }

    bench(): number {
        return 1;
    }

    test(): number {
        this.bench();

        this.init(this.runsLeft, this.createArgArray(0));

        this.init(this.runsLeft, this.createArgArray(5));
    
        this.init(this.runsLeft, this.createArgArray(10));
    
        this.init(this.runsLeft, this.createArgArray(20));
    
        this.init(this.runsLeft, this.createArgArray(50));
    
        this.init(this.runsLeft, this.createArgArray(100));
    
        this.init(this.runsLeft, this.createArgArray(200));

        return this.totalTime;
    }

    createArgArray(count: number): number[] {
        const arr = new number[count];

        for (let i = 0; i < count; i++) {
            arr[i] = i;
        }

        return arr;
    }

    init(
        iterations: number, 
        arg: number[],
    ): void {
        let start: long;
        let loopTime: long = 0;

        while (iterations > 0) {
            start = Chrono.nanoNow()

            //NOTE: issue(19331) uncomment this after fix spread operator in constructor
            // new UnlimitedArguments(...arg);

            loopTime += Chrono.nanoNow() - start;
            iterations = iterations - 1;
        }

        console.log(`now it's not work => Benchmark result: class_init_by_rest_a2a ${arg.length} ` + loopTime);
        this.totalTime += loopTime;
    }
}