/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function getTestName(testCase: string): string {
	return "Float32Array.from - " + testCase;
}

function testArrayLikeNumber(): void {
	const arr: number[] = [1.1, -2.2, 3.3, -4.4];
	const ta = Float32Array.from(arr);
	arktest.assertEQ(ta.length, 4);
	const epsilon = 1e-6;
	arktest.assertTrue(Math.abs(ta.$_get(0).toDouble() - 1.1) < epsilon);
	arktest.assertTrue(Math.abs(ta.$_get(1).toDouble() + 2.2) < epsilon);
	arktest.assertTrue(Math.abs(ta.$_get(2).toDouble() - 3.3) < epsilon);
	arktest.assertTrue(Math.abs(ta.$_get(3).toDouble() + 4.4) < epsilon);
}

function testIterableNumberWithoutMap(): void {
	const iterable = new Set<number>([0.5, -1.5, 2.25]);
	const ta = Float32Array.from(iterable);
	arktest.assertEQ(ta.length, 3);
	const epsilon = 1e-6;
	arktest.assertTrue(Math.abs(ta.$_get(0).toDouble() - 0.5) < epsilon);
	arktest.assertTrue(Math.abs(ta.$_get(1).toDouble() + 1.5) < epsilon);
	arktest.assertTrue(Math.abs(ta.$_get(2).toDouble() - 2.25) < epsilon);
}

function testIterableNumberWithMap(): void {
	const arr: number[] = [1, 2, 3];
	const ta = Float32Array.from(arr, (v: number, idx: number): number => {
		return v * 0.1;
	});
	arktest.assertEQ(ta.length, 3);
	const epsilon = 1e-6;
	arktest.assertTrue(Math.abs(ta.$_get(0).toDouble() - 0.1) < epsilon);
	arktest.assertTrue(Math.abs(ta.$_get(1).toDouble() - 0.2) < epsilon);
	arktest.assertTrue(Math.abs(ta.$_get(2).toDouble() - 0.3) < epsilon);
}

function testMapfnInfinity(): void {
	const arr = [Infinity, -Infinity];
	const ta = Float32Array.from(arr, () => Infinity);
	arktest.assertEQ(ta.length, 2);
	arktest.assertTrue(ta.$_get(0).toDouble() === Infinity);
	arktest.assertTrue(ta.$_get(1).toDouble() === Infinity);
}

function testMapfnNaN(): void {
	const arr = [1, 2];
	const ta = Float32Array.from(arr, () => NaN);
	arktest.assertEQ(ta.length, 2);
	arktest.assertTrue(isNaN(ta.$_get(0).toDouble()));
	arktest.assertTrue(isNaN(ta.$_get(1).toDouble()));
}

function testEmpty(): void {
	const ta = Float32Array.from([] as number[]);
	arktest.assertEQ(ta.length, 0);
}

function testDynamicReallocation(): void {
	const iterable = new Set<number>();
	for (let i = 0; i < 16; ++i) iterable.add(i * 0.125);
	const ta = Float32Array.from(iterable);
	arktest.assertEQ(ta.length, 16);
	const epsilon = 1e-6;
	let idx = 0;
	for (const v of iterable) {
		arktest.assertTrue(Math.abs(ta.$_get(idx).toDouble() - v) < epsilon);
		idx++;
	}
}

function testBufferIndependence(): void {
	const src = [0.1, 0.2, 0.3];
	const ta = Float32Array.from(src);
	src[0] = 9.9;
	const epsilon = 1e-6;
	arktest.assertTrue(Math.abs(ta.$_get(0).toDouble() - 0.1) < epsilon);
}

function main(): int {
	const suite = new arktest.ArkTestsuite("Float32ArrayFrom");
	suite.addTest(getTestName("ArrayLike Number"), testArrayLikeNumber);
	suite.addTest(getTestName("Iterable Number No Map"), testIterableNumberWithoutMap);
	suite.addTest(getTestName("Iterable Number With Map"), testIterableNumberWithMap);
	suite.addTest(getTestName("Mapfn Infinity"), testMapfnInfinity);
	suite.addTest(getTestName("Mapfn NaN"), testMapfnNaN);
	suite.addTest(getTestName("Empty"), testEmpty);
	suite.addTest(getTestName("Dynamic Reallocation"), testDynamicReallocation);
	suite.addTest(getTestName("Buffer Independence"), testBufferIndependence);
	return suite.run();
}