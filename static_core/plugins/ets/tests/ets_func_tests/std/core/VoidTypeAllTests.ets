/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function main(): int {
  const suite = new arktest.ArkTestsuite('VoidType API tests for SDK');

  suite.addTest('VAL: isPrimitive/isReference/hasName', testVALProperties);
  suite.addTest('REF: isPrimitive/isReference/hasName', testREFProperties);
  suite.addTest('getName/getLiteral both VAL & REF', testGetNameLiteral);
  suite.addTest('equals across VAL & REF', testEquals);

  return suite.run();
}

function testVALProperties() {
  const vt = VoidType.VAL;
  arktest.assertEQ(true, vt.isPrimitive());
  arktest.assertEQ(false, vt.isReference());
  arktest.assertEQ(true, vt.hasName());
}

function testREFProperties() {
  const vt = VoidType.REF;
  arktest.assertEQ(true, vt.isPrimitive());
  arktest.assertEQ(true, vt.isReference());
  arktest.assertEQ(true, vt.hasName());
}

function testGetNameLiteral() {
  const v1 = VoidType.VAL;
  const v2 = VoidType.REF;
  arktest.assertEQ('void', v1.getName());
  arktest.assertEQ('void', v1.getLiteral());
  arktest.assertEQ('void', v2.getName());
  arktest.assertEQ('void', v2.getLiteral());
}

function testEquals() {
  const val = VoidType.VAL;
  const ref = VoidType.REF;
  arktest.assertEQ(true, val.equals(val));
  arktest.assertEQ(true, ref.equals(ref));
  arktest.assertEQ(true, val.equals(ref));
  arktest.assertEQ(true, ref.equals(val));
}
