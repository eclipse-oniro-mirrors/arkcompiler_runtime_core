# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

category: Int8Array
sub:
  - self:
      - |
        ((): Int8Array => { let b: number[] = [-Infinity as number, Infinity as number, -NaN as number, NaN as number, 0 as number, 4 as number, 1 as number, 2.1 as number, 256.0 as number, 65536.0 as number, -256.0 as number, -65536.0 as number]; let a = new Int8Array(b.length); a.set(b); return a; })()
    self_type: Iterable<number>
    vars:
      default_inds: ["self.length", "-self.length", "self.length - 1.0", "-self.length + 1.0", 1.0, 5.0 , 100.0, -1.1, 2.2, "-Infinity", "Infinity", "NaN", "0x8 as number", "-0o4 as number"]
      reduce_lambdas:
        - "() => 1.0"
        - "(a: number) => a"
        - "(a: number, b: number) => a + b"
        - "(a: number, b: number, i: number) => a + b + i"
        - "(a: number, b: number, i: number, selfRef: Int8Array) => a + b + i"
      reduce_u_lambdas:
        - "(): string => '*'"
        - "(a: string): string => '*' + a"
        - "(a: string, b: number): string => a + ',' + b"
        - "(a: string, b: number, i: number): string => a + ',' + (b + i)"
        - "(a: string, b: number, i: number, selfRef: Int8Array): string => a + ',' + (b + i)"
    sub:
      - method: "at"
        params:
          - paramOf(*default_inds)
      - method: "slice"
        ret_type: Iterable<number>
        params:
          - paramOf(*default_inds)
          - paramOf(*default_inds)
        mandatory: 0
      - method: "subarray"
        ret_type: Iterable<number>
        params:
          - paramOf(*default_inds)
          - paramOf(*default_inds)
        mandatory: 0
      - method: toString
        params: []
      - method: reverse
        params: []
      - expr: new Int8Array(pars)
        params:
          - paramOf("", "-1.0", "0.0", "2.0")
      - expr: new Int8Array(new ArrayBuffer(pars))
        params:
          - paramOf("0.0", "8.0", "9.0")
      - expr: new Int8Array(new ArrayBuffer(2 * Int8Array.BYTES_PER_ELEMENT), pars)
        params:
          - paramOf("undefined", "-1.0", "0.0", "1.0", "2.0", "4.0", "8.0", "9.0")
      - expr: new Int8Array(new ArrayBuffer(2 * Int8Array.BYTES_PER_ELEMENT), undefined, undefined)
      - expr: new Int8Array(new ArrayBuffer(2 * Int8Array.BYTES_PER_ELEMENT), -1.0, pars)
        params:
          - paramOf("undefined", "-1.0", "0.0", "1.0", "3.0")
      - expr: new Int8Array(new ArrayBuffer(2 * Int8Array.BYTES_PER_ELEMENT), 0.0, pars)
        params:
          - paramOf("undefined", "-1.0", "0.0", "1.0", "3.0")
      - expr: new Int8Array(new ArrayBuffer(2 * Int8Array.BYTES_PER_ELEMENT), 1.0, pars)
        params:
          - paramOf("undefined", "-1.0", "0.0", "1.0", "3.0")
      - expr: new Int8Array(new ArrayBuffer(2 * Int8Array.BYTES_PER_ELEMENT), 8.0, pars)
        params:
          - paramOf("undefined", "-1.0", "0.0", "1.0", "3.0")
      - expr: new Int8Array(new ArrayBuffer(2 * Int8Array.BYTES_PER_ELEMENT), 9.0, pars)
        params:
          - paramOf("undefined", "-1.0", "0.0", "1.0", "3.0")
      - self:
          - |
            ((): Int8Array => { let arr = new Array<number>(); arr.push(-1234.0); arr.push(1234.0); let a = new Int8Array((arr.values() as Iterable<number>)); return a; })()
        sub:
          - method: "values"
      - method: "copyWithin"
        ret_type: Iterable<number>
        params:
          - paramOf(*default_inds)
          - paramOf(*default_inds)
          - paramOf(*default_inds)
        mandatory: 2
      - method: "fill"
        ret_type: Iterable<number>
        params:
          - paramOf(11.0)
          - paramOf(*default_inds)
          - paramOf(*default_inds)
        mandatory: 1
      - method: "reduce"
        params:
          - paramOf(*reduce_lambdas)
      - method: "reduce<string>"
        params:
          - paramOf(*reduce_u_lambdas)
          - paramOf("''")
      - method: "reduceRight"
        params:
          - paramOf(*reduce_lambdas)
      - method: "reduceRight<string>"
        params:
          - paramOf(*reduce_u_lambdas)
          - paramOf("''")
      - method: "set"
        params:
          - paramOf("new Array<number>(-1, 0, 1024, -1024, 0.1, 2.5, -2.5, Infinity, -Infinity, NaN)")
          - paramOf(*default_inds)
        ret_type: void
        mandatory: 1
      - expr: Int8Array.from(pars)
        params: 
          - 
            - Array.of<number>(1, 2, 3, NaN)
            - new Set<number>(Array.of<number>(1, 2, 3, NaN))
      - expr: Int8Array.from<number>(pars)
        params:
          -
            - Array.of<number>(1, 2, 3, NaN)
          -
            - |
              (v: number, k: number): number => v * k

