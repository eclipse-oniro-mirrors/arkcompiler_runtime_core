/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function erase<T>(v: T): Object | null | undefined {
    return v;
}

function foo(v: int) {
    return v
};

function foo2(v: int | object) {
    return v
};

function testNumerics() {
    assert(typeof (() => { let v: byte = 1; return v })() == "number");
    assert(typeof (() => { let v: short = 1; return v })() == "number");
    assert(typeof (() => { let v: int = 1; return v })() == "number");
    assert(typeof (() => { let v: long = 123456789123; return v })() == "number");
    assert(typeof (() => { let v: float = 1.1f; return v })() == "number");
    assert(typeof (() => { let v: double = 1.1; return v })() == "number");
    assert(typeof (() => { let v: char = 'a'; return v })() == "number");
}

function testNumerics2() {
    let a1: byte = 1;
    let a2: short = 1;
    let a3: int = 1;
    let a4: long = 123456789123;
    let a5: float = 1.1f;
    let a6: double = 1.1;
    let a7: char = 'a';
    assert(typeof erase(a1) == "number");
    assert(typeof erase(a2) == "number");
    assert(typeof erase(a3) == "number");
    assert(typeof erase(a4) == "number");
    assert(typeof erase(a5) == "number");
    assert(typeof erase(a6) == "number");
    assert(typeof erase(a7) == "number");
}

function testString() {
    assert(typeof (() => { let v: string = "Hello World"; return v })() == "string");
    assert(typeof (() => { let v: String = "Hello World"; return v })() == "string");
    assert(typeof erase(new string("Hello World")) == "string");
    assert(typeof erase(new String("Hello World")) == "string");
}

function testBoolean() {
    assert(typeof (() => { let v: boolean = true; return v })() == "boolean");
    assert(typeof (() => { let v: Boolean = false; return v })() == "boolean");
    assert(typeof erase(true) == "boolean");
    assert(typeof erase(false) == "boolean");
}

function testBigInt() {
    assert(typeof (() => { let v: BigInt = new BigInt(10000000000000); return v })() == "bigint");
    assert(typeof (() => { let v: bigint = new bigint(99999999999999); return v })() == "bigint");
    assert(typeof erase(new BigInt(10000000000000)) == "bigint");
    assert(typeof erase(new bigint(99999999999999)) == "bigint");
}

function testObject() {
    let obj1: Object = {};
    let obj2: Object = [1, 2, 3];
    let obj3: Object = () => { console.log("Hello World") };
    let obj4: Object = new Date();
    let obj5: Object = 123;

    assert(typeof obj1 == "object");
    assert(typeof obj2 == "object");
    assert(typeof obj3 == "function");
    assert(typeof obj4 == "object");
    assert(typeof obj5 == "number");

    assert(typeof erase(obj1) == "object");
    assert(typeof erase(obj2) == "object");
    assert(typeof erase(obj3) == "function");
    assert(typeof erase(obj4) == "object");
    assert(typeof erase(obj5) == "number");
}

let f1: () => void = () => {
    console.log("Hello World");
}

function normalFuction() {
    console.log("Hello World");
}

function testFunction() {
    let f2 = normalFuction;
    assert(typeof f1 == "function");
    assert(typeof f2 == "function");

    assert(typeof erase(f1) == "function");
    assert(typeof erase(f2) == "function");
}

function testUndefined() {
    let v = undefined;
    assert(typeof v == "undefined");
    assert(typeof erase(v) == "undefined");
}

function testNull() {
    let v = null;
    assert(typeof v == "object");
    assert(typeof erase(v) == "object");
}

enum Direction {
    Up = 1,
    Down,
    left,
    Right
}

enum Status {
    Active = "ACTIVE",
    Inactive = "INACTIVE",
    Pending = "PENDING"
}

function testEnum() {
    let dir: Direction = Direction.Up;
    let status: Status = Status.Active;
    assert(typeof dir == "number");
    assert(typeof status == "string");
    // The enum is wrapped as an object type when calling erase
    assert(typeof erase(dir) == "object");
    assert(typeof erase(status) == "object");
    assert(typeof foo(dir) == "number");
    // The union type will convert all its members into object
    assert(typeof foo2(dir) == "object");
}

let v1: string | number | boolean = "abc";
let v2: string | number | null | undefined = 123;

function testUnion() {
    assert(typeof v1 == "string");
    assert(typeof v2 == "number");
    assert(typeof erase(v1) == "string");
    assert(typeof erase(v2) == "number");
}

class A implements Function<string> { }
class B extends Numeric {
    public byteValue(): byte { return 1 };
    public intValue(): int { return 1 };
    public shortValue(): short { return 1 };
    public longValue(): long { return 1 };
    public floatValue(): float { return 1.1 };
    public doubleValue(): double { return 1.1 };
}

function testClass() {
    let a = new A();
    let b = new B();
    assert(typeof a == "function");
    assert(typeof b == "object");
    assert(typeof erase(a) == "function");
    assert(typeof erase(b) == "object");
}

interface User {
    id: number;
}

function testInterface() {
    let u: User = {
        id: 1
    }
    assert(typeof u == "object");
    assert(typeof erase(u) == "object");
}

function main() {
    testNumerics();
    testNumerics2();
    testString();
    testBoolean();
    testBigInt();
    testObject();
    testFunction();
    testUndefined();
    testNull();
    testEnum();
    testUnion();
    testClass();
    testInterface();
}