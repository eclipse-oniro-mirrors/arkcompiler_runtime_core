# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

.language eTS

.record std.core.Object <external>

.record ColorModifier <ets.extends=ModifierWithKey, access.record=public> {
}

.record ETSGLOBAL <ets.abstract, ets.extends=std.core.Object, access.record=public, ets.annotation.type=class, ets.annotation.class=ets.annotation.Module, ets.annotation.id=id_271695, ets.annotation.element.name=exported, ets.annotation.element.type=string, ets.annotation.element.value=""> {
}

.record ModifierWithKey <ets.extends=std.core.Object, access.record=public> {
}

.record {Uresource.Resource,std.core.Double,std.core.String} <external>

.function void ETSGLOBAL._$init$_() <static, access.function=public> {
	return.void
}

.function void ETSGLOBAL._cctor_() <cctor, static> {
	return.void
}

.function void ETSGLOBAL.color({Uresource.Resource,std.core.Double,std.core.String} a0) <static, access.function=public> {
	initobj.short ColorModifier._ctor_:(ColorModifier)
	call.virt.acc.short ColorModifier.factory:(ColorModifier,{Uresource.Resource,std.core.Double,std.core.String}), a0, 0x0
	return.void
}

.function void ETSGLOBAL.main() <static, access.function=public> {
	return.void
}

.function void std.core.Object._ctor_(std.core.Object a0) <ctor, external, access.function=public>

.function void ColorModifier._ctor_(ColorModifier a0) <ctor, access.function=public> {
	call.short ModifierWithKey._ctor_:(ModifierWithKey), a0
	return.void
}

.function void ColorModifier.factory(ColorModifier a0, {Uresource.Resource,std.core.Double,std.core.String} a1) <access.function=public> {
	return.void
}

.function void ModifierWithKey._ctor_(ModifierWithKey a0) <ctor, access.function=public> {
	call.short std.core.Object._ctor_:(std.core.Object), a0
	return.void
}

