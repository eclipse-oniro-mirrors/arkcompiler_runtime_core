/*
 * Copyright (c) 2024-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as foo from "@foo/foo"
import * as bar from "@bar/bar"
import * as module2 from "./module2"
import * as module3 from "./module3"
import { Ability } from "@spawn/ability";

export class Dummy { }

export function dummy(): Dummy { return new Dummy() }

function testLazyLoading() {
    const appLinker = Class.ofCaller().getLinker();
    assertEQ(appLinker.findLoadedClass("@bar.bar.ETSGLOBAL"), null, "module must be loaded lazily");

    assertFalse(bar.ClassLoadingChecker_init, "`@bar.bar.ClassLoadingChecker` must be not initialized");
    assertNE(appLinker.findLoadedClass("@bar.bar.ETSGLOBAL"), null,
             "module must be loaded after accessing `bar.ClassLoadingChecker_init`");
    assertEQ(appLinker.findLoadedClass("@bar.bar.ClassLoadingChecker"), null,
             "`@bar.bar.ClassLoadingChecker` must not be loaded yet");

    const instance = new bar.ClassLoadingChecker();
    assertEQ(appLinker.findLoadedClass("@bar.bar.ClassLoadingChecker"), Class.of(instance));
    assertTrue(bar.ClassLoadingChecker_init, "`@bar.bar.ClassLoadingChecker` must be initialized");
}

function triggerGC() {
    expectNoThrow((): void throws => {
        const gcId = GC.startGC(GC.FULL_CAUSE, GC.IN_PLACE_MODE);
        if (gcId > 0) {
            GC.waitForFinishGC(gcId);
        }
    });
}

function testNames() {
    const nameOf = (o: Object) => Class.of(o).getName()

    assertEQ(Class.ofCaller().getName(), "@app.module1.ETSGLOBAL")

    testLazyLoading();

    // Check that garbage collection does not break user-defined RuntimeLinker
    triggerGC();

    assertTrue(bar.dummy() instanceof bar.Dummy);
    assertEQ(nameOf(bar.dummy()), "@bar.bar.Dummy");

    assertTrue(foo.dummy() instanceof foo.Dummy);
    assertEQ(nameOf(foo.dummy()), "@foo.foo.Dummy");

    assertTrue(dummy() instanceof Dummy);
    assertEQ(nameOf(dummy()), "@app.module1.Dummy");

    assertTrue(module2.dummy() instanceof module2.Dummy);
    assertEQ(nameOf(module2.dummy()), "@app.module2.Dummy");

    assertTrue(module3.dummy() instanceof module3.Dummy);
    assertEQ(nameOf(module3.dummy()), "@app.module3.Dummy");
}

class MainAbility implements Ability {
    override invoke() {
        testNames();
    }
}
