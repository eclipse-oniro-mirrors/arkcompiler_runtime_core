# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
declarations:
    - sig0: |-
        foo (): void
      sig1: |-
        foo (p: string): void
      extra: |- 
        //Extra data inserted here
      calls:
        - foo(undefined)
        - foo(null)
        - foo(123)
        - foo(true)
        - foo('ab', 'cd')
        - foo(['ab', 'cd'])
        - foo(['ab', 123, true])
        - |-
            let v: string | undefined = 'ab'
            foo(v)
        - |-
            let v: string | null = 'ab'
            foo(v)
        - |-
            let v: string | boolean = 'ab'
            foo(v)

    - sig0: |-
          foo (value: int): int
      sig1: |-  
          foo foo(a: int, b: double, c: string): string
      extra: |-
          //Extra data inserted here
      calls:
          - foo(456, 789.0)

    - sig0: |-
          foo(x: string): void
      sig1: |-
          foo(x: C): void
      extra: |-
          //Extra data inserted here
      calls:
          - foo(new A())
          - foo(new B())

    - sig0: |-
          foo(x: string): void
      sig1: |-
          foo(x: C): void
      extra: |-
          type HandlerBInt = (a: B, b: int) => int
          const handlerBInt: HandlerBInt = (a: B, b: int): int => { return 10 }
          type HandlerB = (a: B) => int
          const handlerB: HandlerB = (a: B): int => { return 10 }
          type HandlerCIntInt = (a: C, b: int, c: int) => int
          const handlerCIntInt: HandlerCIntInt = (a: C, b: int, c: int): int => { return 10 }
      calls:
          - foo(new A(), handlerBInt)
          - foo(new A(), handlerB)
          - foo(new A(), handlerCIntInt)

    - sig0: |-
          foo(x: string): void
      sig1: |-
          foo(x: A, fb: (x: B) => B): void
      extra: |-
          type HandlerB = (a: B) => A
          const handlerB: HandlerB = (a: B): A => { return new B() }
          type HandlerNothing = () => A
          const handlerNothing: HandlerNothing = (): A => { return new B() }
      calls:
          - foo(new A(), handlerB)
          - foo(new A(), handlerNothing)
