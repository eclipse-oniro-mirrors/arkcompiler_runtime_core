# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          class X {
              async foo(p: string): Promise<string>
              async foo(p: number): Promise<number>
              async foo(...p: Any[]): Any {
                  return Promise.resolve(p[0])
              }
          }
          let x = new X
      call: |-
          x.foo(42.0).then<number>((p: number): number => {
              arktest.assertEQ(p, 42.0)
              return p
          })
          x.foo("abc").then<string>((p: string): string => {
              arktest.assertEQ(p, "abc")
              return p
          })

    - decl: |-
          class X {
              // async in overload signatures is not required
              foo(p: number): Promise<number>
              foo(p: string): Promise<string>
              async foo(...p: Any[]): Any {
                  return Promise.reject(new Error("" + p[0]))
              }
          }
          let x = new X
      call: |-
          x.foo(42.0).catch((p: Error): Error => {
              arktest.assertEQ(p.message, "42")
              return p
          })
          x.foo("abc").catch((p: Error): Error => {
              arktest.assertEQ(p.message, "abc")
              return p
          })

    - tags: 'compile-only, negative'
      decl: |-
          class X {
              async foo(p: string): Promise<string>
              async foo(p: number): Promise<number>
              async foo(...p: Any[]): Any {
                  return Promise.resolve(p[0])
              }
          }
          let x = new X
      call: |-
          x.foo(new Object) // CTE: No such signature

    - tags: 'compile-only, negative'
      decl: |-
          class X {
              async foo(p: string): Promise<string>
              async foo(p: number): Promise<number>
              foo(...p: Any[]): Any {  // CTE: Implementation is not async
                  return p[0]
              }
          }
          let x = new X
      call: |-
          x.foo("abc")
