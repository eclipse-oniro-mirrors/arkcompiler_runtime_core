# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF Any KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          // rest parameters
          function foo(p: string): string
          function foo(...q: string[]): number
          function foo(...p: Any[]): Any {
              return p.length == 1 ? p[0] : p.length
          }
      call: |-
          let x: string = foo("abc")
          let y: number = foo("a", "b", "c", "d")
          let z: number = foo()
          arktest.assertEQ(x, "abc")
          arktest.assertEQ(y, 4)
          arktest.assertEQ(z, 0)

    - decl: |-
          // rest parameters
          function foo(...q: string[]): number
          function foo(p: string): string  // never used signature
          function foo(...p: Any[]): Any {
              return p.length
          }
          let arr: FixedArray<string> = ["a", "b", "c", "d", "e"]
      call: |-
          let x: number = foo("abc")
          let y: number = foo("a", "b", "c", "d")
          let z: number = foo()
          let q: number = foo(...arr)
          arktest.assertEQ(x, 1)
          arktest.assertEQ(y, 4)
          arktest.assertEQ(z, 0)
          arktest.assertEQ(q, 5)

    - tags: 'compile-only, negative'
      decl: |-
          // rest parameters
          function foo(...q: string[]): number
          function foo(p: string): string  // never used signature
          function foo(...p: Any[]): Any {
              return p.length
          }
      call: |-
          let x: string = foo("abc") // CTE: cannot assign number to string

    - decl: |-
          // generic and rest parameters
          function foo<T extends string>(p: T): Array<T>
          function foo<T extends number>(p: T): [T, T]
          function foo(...p: (string|number)[]): null
          function foo(...p: Any[]): Any {
              let v = p[0]
              if (p.length == 1 && v instanceof number) {
                  return [v + 1.0, v + 1.0] as [number, number]
              } else if (p.length == 1 && v instanceof string) {
                  return [v, v] as Array<string>
              } else {
                  return null
              }
          }
      call: |-
          let v: [number, number] = foo<number>(42.0)
          arktest.assertEQ(v[0], 43.0)
          arktest.assertEQ(v[1], 43.0)
          let w: Array<string> = foo<string>("ABC")
          arktest.assertEQ(w[0], "ABC")
          arktest.assertEQ(w[1], "ABC")
          arktest.assertEQ(foo(), null)
          arktest.assertEQ(foo("ABC", 42.0), null)

    - tags: 'compile-only, negative'
      decl: |-
          // generic and rest parameters
          function foo<T extends string>(p: T): Array<T>
          function foo<T extends number>(p: T): [T, T]
          function foo(...p: (string|number)[]): null
          function foo(...p: Any[]): Any {
              let v = p[0]
              if (p.length == 1 && v instanceof number) {
                  return [v + 1.0, v + 1.0] as [number, number]
              } else if (p.length == 1 && v instanceof string) {
                  return [v, v] as Array<string>
              } else {
                  return null
              }
          }
      call: |-
          foo(null) // CTE: No such signature
