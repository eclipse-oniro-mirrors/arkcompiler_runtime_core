# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
overload_function_import_tests:
  test01: |-
    export function foo(): void
    export function foo(x: string): void
    export function foo(...args: Any[]): Any {
      arktest.assertEQ(args.length, 0)
    }

  test02: |-
    export function foo(): void
    export function foo(x: string): void
    export function foo(...args: Any[]): Any {
      arktest.assertEQ(args.length, 1)
      arktest.assertTrue(args[0] instanceof string)
      arktest.assertEQ(args[0], "abcd")
    }

  test03: |-
    export function foo(x: string): void
    export function foo(x: int): void
    export function foo(...args: Any[]): Any {
      if (args[0] instanceof int) {
        arktest.assertEQ(args[0], 321)
      } else {
        arktest.assertTrue(args[0] instanceof string)
        arktest.assertEQ(args[0], "abcd")
      }
    }

  test04: |-
    export function foo(x: string): boolean
    export function foo(y: int): boolean
    export function foo(...args: Any[]): Any {
      if (args[0] instanceof int) {
        arktest.assertEQ(args[0], 231)
        return true
      } else {
        arktest.assertTrue(args[0] instanceof string)
        arktest.assertEQ(args[0], "efg")
        return false
      }
    }

  test05: |-
    export function foo(x: string): int
    export function foo(y: string): string
    export function foo(...args: Any[]): Any {
      arktest.assertTrue(args[0] instanceof string)
      if (args[0] == "abc") {
        return 123
      } else {
        arktest.assertEQ(args[0], "efg")
        return "321"
      }
    }

  test06: |-
    export enum Results {Str, Num}
    export function foo(x: string): Results
    export function foo(x: int): Results
    export function foo(...args: Any[]): Any {
      if (args[0] instanceof int) {
        arktest.assertEQ(args[0], 123)
        return Results.Num
      } else {
        arktest.assertTrue(args[0] instanceof string)
        arktest.assertEQ(args[0], "defg")
        return Results.Str
      }
    }

  test07: |-
    export function foo(a: int): int
    export function foo(a: int, b: double, c: string): string
    export function foo(...args: Any[]): Any {
      if (args.length == 1) {
        arktest.assertTrue(args[0] instanceof int)
        arktest.assertEQ(args[0], 123)
        return 213
      } else {
        arktest.assertEQ(args.length, 3)
        arktest.assertTrue(args[0] instanceof int)
        arktest.assertEQ(args[0], 456)
        arktest.assertTrue(args[1] instanceof double)
        arktest.assertEQ(args[1], 789.0)
        arktest.assertTrue(args[2] instanceof string)
        arktest.assertEQ(args[2], "321")
        return "312"
      }
    }

  test08: |-
    export function foo(x: string): string[]
    export function foo(x: int): boolean
    export function foo(...args: Any[]): Any {
      arktest.assertTrue(args[0] instanceof string)
      return ["ef", "g"]
    }

  test09: |-
    export function foo(x: string): string[]
    export function foo(x: int): int[]
    export function foo(...args: Any[]): Any {
      if (args[0] instanceof int) {
        let res: int[] = [-1, 5]
        res[0] = args[0] + 1
        return res
      } else {
        arktest.assertTrue(args[0] instanceof string)
        let res: string[] = ["123", "def"]
        res[0] = args[0] + "c"
        return res
      }
    }

  test10: |-
    export function foo(a: int[]): int
    export function foo(a: string):string
    export function foo(a: boolean, b: int): boolean
    export function foo(...args: Any[]): Any {
      let arg0 = args[0]
      if (arg0 instanceof Array) {
        arktest.assertEQ(arg0.length, 2)
        arktest.assertTrue(arg0[0] instanceof int)
        arktest.assertEQ(arg0[0], 321)
        arktest.assertEQ(arg0[1], 476)
        return 567
      }
      else if (arg0 instanceof string) {
        arktest.assertEQ(arg0.length, 2)
        arktest.assertEQ(arg0, "ab")
        return arg0 + "c"
      } else {
        arktest.assertTrue(args[0] instanceof boolean)
        arktest.assertTrue(args[1] instanceof int)
        if (args[0]) {
          arktest.assertEQ(args[1], 347)
        } else {
          arktest.assertEQ(args[1], 743)
        }
        return !args[0]
      }
    }

  test11: |-
    export function foo(x: string, y: int): string
    export function foo(x: int): boolean
    export function foo(x: int | string, boolean): int
    export function foo(...args: Any[]): Any {
      if (args.length == 2) {
        if (args[1] instanceof boolean) {
          if (args[0] instanceof int) {
            arktest.assertEQ(args[0], 456)
            arktest.assertEQ(args[1], true)
            return 123
          } else {
            arktest.assertTrue(args[0] instanceof string)
            arktest.assertEQ(args[0], "efg")
            arktest.assertEQ(args[1], false)
            return 321
          }
        } else {
          arktest.assertTrue(args[0] instanceof string)
          arktest.assertTrue(args[1] instanceof int)
          arktest.assertEQ(args[0], "cba")
          arktest.assertEQ(args[1], 789)
          return "abc"
        }
      } else {
        arktest.assertTrue(args[0] instanceof int)
        arktest.assertEQ(args[0], 987)
        return true
      }
    }

  test12: |-
    export class A {}
    export class B extends A {
      b_method(): int {
        return 123
      }
    }
    export class C extends A {
      c_method(): int {
        return 567
      }
    }
    export function foo(x: string): string
    export function foo(x: A): int
    export function foo(...args: Any[]): Any {
      let arg0 = args[0]
      if (arg0 instanceof B){
        return arg0.b_method()
      }
      else if (arg0 instanceof C){
        return arg0.c_method()
      } else {
        arktest.assertTrue(arg0 instanceof string)
        return arg0 + "c"
      }
    }

  test13: |-
    export class A {}
    export class B extends A {}
    export class C extends A {}
    export function foo(x: A): C
    export function foo(x: B): B
    export function foo(...args: Any[]): Any {
      if (args[0] instanceof A){
        return new C()
      }
      else {
        arktest.assertTrue(args[0] instanceof B)
        return new B()
      }
    }

  test14: |-
    export class A {}
    export class B extends A {
      b_method(): int {
        return 123
      }
    }
    export function foo(x: string): string
    export function foo(x: A, fb: (a: B, b: int) => int): int
    export function foo(...args: Any[]): Any {
      let arg0 = args[0]
      if (arg0 instanceof B){
        let f = args[1] as ((a: B, b: int) => int)
        return f(arg0, 7)
      } else {
        arktest.assertTrue(arg0 instanceof string)
        return arg0 + "c"
      }
    }

  test15: |-
    export class A {}
    export class B extends A {
      field: int
      constructor(field: int) {
        this.field = field
      }
    }
    export function foo(x: string): string
    export function foo(x: A, fb: (x: B) => A): int
    export function foo(...args: Any[]): Any {
      let arg0 = args[0]
      if (arg0 instanceof B){
        let f = args[1] as ((x: B) => A)
        let f_res = f(arg0)
        if (f_res instanceof B) {
          return f_res.field
        } else {
          return -1
        }
      } else {
        arktest.assertTrue(arg0 instanceof string)
        return arg0 + "c"
      }
    }

  test16: |-
    export class A {}
    export class B extends A {
      b_method(): int {
        return 123
      }
    }
    export function foo(x: string): string
    export function foo(x: A, fb: (a: B, b: int) => int): int
    export function foo(...args: Any[]): Any {
      let arg0 = args[0]
      if (arg0 instanceof B){
        let f = args[1] as ((a: B, b: int) => int)
        return f(arg0, 7)
      } else {
        arktest.assertTrue(arg0 instanceof string)
        return arg0 + "c"
      }
    }
