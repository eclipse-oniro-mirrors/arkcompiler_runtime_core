# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
overload_function_import_tests:
  test01:
    decl: |-
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      foo()

  test02:
    decl: |-
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      foo("abcd")

  test03:
    decl: |-
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      foo(321)
      foo("abcd")

  test04:
    decl: |-
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      let res_num = foo(231)
      let res_str = foo("efg")
      arktest.assertTrue(res_num instanceof boolean)
      arktest.assertEQ(res_num, true)
      arktest.assertTrue(res_str instanceof boolean)
      arktest.assertEQ(res_str, false)

  test05:
    decl: |-
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      let res1 = foo("abc")
      let res2 = foo("efg")
      arktest.assertTrue(res1 instanceof int)
      arktest.assertEQ(res1, 123)
      arktest.assertTrue(res2 instanceof string)
      arktest.assertEQ(res2, "321")

  test06:
    decl: |-
      import {Results} from './overload_function_export_[loop.index0].ets'
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      let res_num = foo(123)
      let res_str = foo("defg")
      arktest.assertTrue(res_num instanceof Results)
      arktest.assertEQ(res_num, Results.Num)
      arktest.assertTrue(res_str instanceof Results)
      arktest.assertEQ(res_str, Results.Str)

  test07:
    decl: |-
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      let res_1arg = foo(123)
      let res_3args = foo(456, 789.0, "321")
      arktest.assertTrue(res_1arg instanceof int)
      arktest.assertEQ(res_1arg, 213)
      arktest.assertTrue(res_3args instanceof string)
      arktest.assertEQ(res_3args, "312")

  test08:
    decl: |-
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      let res = foo("abcd")
      arktest.assertTrue(res instanceof Array)
      arktest.assertEQ(res.length, 2)
      arktest.assertTrue(res[0] instanceof string)
      arktest.assertEQ(res[0], "ef")
      arktest.assertEQ(res[1], "g")

  test09:
    decl: |-
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      let res1 = foo(3)
      arktest.assertTrue(res1 instanceof Array)
      arktest.assertEQ(res1.length, 2)
      arktest.assertTrue(res1[0] instanceof int)
      arktest.assertEQ(res1[0], 4)
      arktest.assertEQ(res1[1], 5)
      let res2 = foo("ab")
      arktest.assertTrue(res2 instanceof Array)
      arktest.assertEQ(res2.length, 2)
      arktest.assertTrue(res2[0] instanceof string)
      arktest.assertEQ(res2[0], "abc")
      arktest.assertEQ(res2[1], "def")

  test10:
    decl: |-
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      let res1 = foo([321, 476])
      arktest.assertTrue(res1 instanceof int)
      arktest.assertEQ(res1, 567)
      let res2 = foo("ab")
      arktest.assertTrue(res2 instanceof string)
      arktest.assertEQ(res2, "abc")
      let res3 = foo(true, 347)
      arktest.assertTrue(res3 instanceof boolean)
      arktest.assertEQ(res3, false)
      let res4 = foo(false, 743)
      arktest.assertTrue(res4 instanceof boolean)
      arktest.assertEQ(res4, true)

  test11:
    decl: |-
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      let res1 = foo(456, true)
      arktest.assertTrue(res1 instanceof int)
      arktest.assertEQ(res1, 123)
      let res2 = foo("efg", false)
      arktest.assertTrue(res2 instanceof int)
      arktest.assertEQ(res2, 321)
      let res3 = foo("cba", 789)
      arktest.assertTrue(res3 instanceof string)
      arktest.assertEQ(res3, "abc")
      let res4 = foo(987)
      arktest.assertTrue(res4 instanceof boolean)
      arktest.assertEQ(res4, true)

  test12:
    decl: |-
      import {A} from './overload_function_export_[loop.index0].ets'
      import {B} from './overload_function_export_[loop.index0].ets'
      import {C} from './overload_function_export_[loop.index0].ets'
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      let res1 = foo(new B())
      let res2 = foo(new C())
      let res3 = foo("ab")
      arktest.assertTrue(res1 instanceof int)
      arktest.assertEQ(res1, 123)
      arktest.assertTrue(res2 instanceof int)
      arktest.assertEQ(res2, 567)
      arktest.assertTrue(res3 instanceof string)
      arktest.assertEQ(res3, "abc")

  test13:
    decl: |-
      import {A} from './overload_function_export_[loop.index0].ets'
      import {B} from './overload_function_export_[loop.index0].ets'
      import {C} from './overload_function_export_[loop.index0].ets'
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      let res = foo(new B())
      arktest.assertTrue(res instanceof C)

  test14:
    decl: |-
      import {A} from './overload_function_export_[loop.index0].ets'
      import {B} from './overload_function_export_[loop.index0].ets'
      import {foo} from './overload_function_export_[loop.index0].ets'
      type HandlerAInt = (a: A, b: int) => int
      const handlerAInt: HandlerAInt = (a: A, b: int): int => {
        if (a instanceof B){
          return a.b_method() + b
        } else {
          return b
        }
      }
      type HandlerA = (a: A) => int
      const handlerA: HandlerA = (a: A): int => {
        if (a instanceof B){
          return a.b_method()
        } else {
          return 0
        }
      }
      type HandlerNothing = () => int
      const handlerNothing: HandlerNothing = (): int => {
        return 567
      }
    call: |-
      let res1 = foo(new B(), handlerAInt)
      let res2 = foo(new B(), handlerA)
      let res3 = foo(new B(), handlerNothing)
      let res4 = foo("ab")
      arktest.assertTrue(res1 instanceof int)
      arktest.assertEQ(res1, 130)
      arktest.assertTrue(res2 instanceof int)
      arktest.assertEQ(res2, 123)
      arktest.assertTrue(res2 instanceof int)
      arktest.assertEQ(res2, 567)
      arktest.assertTrue(res3 instanceof string)
      arktest.assertEQ(res3, "abc")

  test15:
    decl: |-
      import {A} from './overload_function_export_[loop.index0].ets'
      import {B} from './overload_function_export_[loop.index0].ets'
      import {foo} from './overload_function_export_[loop.index0].ets'
      type HandlerA = (a: A) => B
      const handlerA: HandlerA = (a: A): B => {
        if (a instanceof B){
          return new B(a.field + 123)
        } else {
          return new B(0)
        }
      }
      type HandlerNothing = () => B
      const handlerNothing: HandlerNothing = (): B => {
        return new B(567)
      }
    call: |-
      let res1 = foo(new B(7), handlerA)
      let res2 = foo(new B(345), handlerNothing)
      let res3 = foo("ab")
      arktest.assertTrue(res1 instanceof int)
      arktest.assertEQ(res1, 130)
      arktest.assertTrue(res2 instanceof int)
      arktest.assertEQ(res2, 567)
      arktest.assertTrue(res3 instanceof string)
      arktest.assertEQ(res3, "abc")

  test16:
    decl: |-
      import {A} from './overload_function_export_[loop.index0].ets'
      import {B} from './overload_function_export_[loop.index0].ets'
      import {foo} from './overload_function_export_[loop.index0].ets'
    call: |-
      let i: int = 10
      const lambda1 = (a: B, b: int) => a.b_method() + b + i
      const lambda2 = (a: B) => a.b_method() + i
      const lambda3 = () => i + 10
      let res1 = foo(new B(), lambda1)
      let res2 = foo(new B(), lambda2)
      let res3 = foo(new B(), lambda3)
      let res4 = foo("ab")
      arktest.assertTrue(res1 instanceof int)
      arktest.assertEQ(res1, 140)
      arktest.assertTrue(res2 instanceof int)
      arktest.assertEQ(res2, 133)
      arktest.assertTrue(res2 instanceof int)
      arktest.assertEQ(res2, 20)
      arktest.assertTrue(res3 instanceof string)
      arktest.assertEQ(res3, "abc")
