# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

overload_function_decls:
  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class TestClass {
        foo(): void
        foo(x: string): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - |-
        let a = new TestClass()
        a.foo(undefined)
      - |-
        let a = new TestClass()
        a.foo(null)
      - |-
        let a = new TestClass()
        a.foo(123)
      - |-
        let a = new TestClass()
        a.foo(true)
      - |-
        let a = new TestClass()
        a.foo("ab", "cd")
      - |-
        let a = new TestClass()
        a.foo(["ab", "cd"])
      - |-
        let a = new TestClass()
        a.foo(["ab", 123, true])

  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class TestClass {
        foo(a: int): int
        foo(a: int, b: double, c: string): string
        foo(...args: Any[]): Any {
          if (args.length == 1) {
            return 213
          }
          else if (args.length == 3) {
            return "312"
          } else {
            return 0
          }
        }
      }
    calls:
      - |-
        let a = new TestClass()
        a.foo(456, 789.0)

  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class A {}
      class B extends A {}
      class C extends A {}
      class TestClass {
        foo(x: string): void
        foo(x: C): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - |-
        let a = new TestClass()
        a.foo(new A())
      - |-
        let a = new TestClass()
        a.foo(new B())

  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class A {}
      class B extends A {}
      class C extends A {}
      type HandlerBInt = (a: B, b: int) => int
      const handlerBInt: HandlerBInt = (a: B, b: int): int => {
        return 10
      }
      type HandlerB = (a: B) => int
      const handlerB: HandlerB = (a: B): int => {
        return 10
      }
      type HandlerCIntInt = (a: C, b: int, c: int) => int
      const handlerCIntInt: HandlerCIntInt = (a: C, b: int, c: int): int => {
        return 10
      }
      class TestClass {
        foo(x: string): void
        foo(x: A, fb: (a: C, b: int) => int): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - |-
        let a = new TestClass()
        a.foo(new A(), handlerBInt)
      - |-
        let a = new TestClass()
        a.foo(new A(), handlerB)
      - |-
        let a = new TestClass()
        a.foo(new A(), handlerCIntInt)

  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class A {}
      class B extends A {}
      type HandlerB = (a: B) => A
      const handlerB: HandlerB = (a: B): A => {
        return new B()
      }
      type HandlerNothing = () => A
      const handlerNothing: HandlerNothing = (): A => {
        return new B()
      }
      class TestClass {
        foo(x: string): void
        foo(x: A, fb: (x: B) => B): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - |-
        let a = new TestClass()
        a.foo(new A(), handlerB)
      - |-
        let a = new TestClass()
        a.foo(new A(), handlerNothing)

  - desc: |-
      Method with overload signatures declared in a non-ambient context
      must have an implementation body (it is then called metod with
      a body). Otherwise, a compile-time error occurs.
    decl: |-
      class TestClass {
        foo(): void
        foo(x: string): void
      }
    calls:
      - ""

  - desc: |-
      Implementation body must have a signature as follows:
      (...args: Any[]): Any
      Otherwise, a compile-time error occurs.
    decl: |-
      class TestClass {
        parse(a: string): void {}
        parse(a: number): void {}
      }
    calls:
      - ""

  - desc: |-
      Implementation body must have a signature as follows:
      (...args: Any[]): Any
      Otherwise, a compile-time error occurs.
    decl: |-
      class TestClass {
        foo(a: int): int
        foo(a: int, b: int, c: int): int
        foo(a: int, b?: int, c?: int): int {
          return 123
        }
      }
    calls:
      - ""

  - desc: |-
      Implementation body must have a signature as follows:
      (...args: Any[]): Any
      Otherwise, a compile-time error occurs.
    decl: |-
      class TestClass {
        parse(a: string): void
        parse(a: number): void
        parse(a: string|number) {
        }
      }
    calls:
      - ""

  - desc: |-
      Implementation body must have a signature as follows:
      (...args: Any[]): Any
      Otherwise, a compile-time error occurs.
    decl: |-
      class TestClass {
        foo(x: string): string
        foo(x: number): boolean
        foo(x: number | string): string | boolean {
          return true
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        foo(): void
        private foo(x: string): void
        protected foo(x: string): void
        static foo(x: Object): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        private foo(): void
        private foo(x: string): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        foo(): void
        private foo(x: string): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        foo(): void
        foo(x: string): void
        private foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        protected foo(): void
        protected foo(x: string): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        foo(): void
        protected foo(x: string): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        foo(): void
        foo(x: string): void
        protected foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        internal foo(): void
        internal foo(x: string): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        foo(): void
        internal foo(x: string): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        foo(): void
        foo(x: string): void
        internal foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        private foo(): void
        private foo(x: string): void
        protected foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        protected foo(): void
        private foo(x: string): void
        private foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        private foo(): void
        private foo(x: string): void
        internal foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        internal foo(): void
        private foo(x: string): void
        private foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        static foo(): void
        static foo(x: string): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        foo(): void
        static foo(x: string): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        foo(): void
        foo(x: string): void
        static foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        final foo(): void
        final foo(x: string): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        foo(): void
        final foo(x: string): void
        foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      class TestClass {
        foo(): void
        foo(x: string): void
        final foo(...args: Any[]): Any {
        }
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      abstract class TestClass {
        native foo(): void
        native foo(x: string): void
        native foo(...args: Any[]): Any
      }
    calls:
      - ""

  - desc: |-
      A compile-time error also occurs if not all of the following requirements are met:
      * Access modifiers of an overload signature and an implementation method are the same;
      * All overload signatures and the implementation method are either static or non-static;
      * All overload signatures and the implementation method are either final or non-final;
      * Overload signatures are not native (however, a native implementation method is allowed);
      * Overload signatures are not abstract.
    decl: |-
      abstract class TestClass {
        abstract foo(): void
        abstract foo(x: string): void
        abstract foo(...args: Any[]): Any
      }
    calls:
      - ""

  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class TestClass {
        private foo(): void
        private foo(x: string): void
        private foo(...args: Any[]): Any {
        }
      }
    calls:
      - |-
        let a = new TestClass()
        a.foo()
      - |-
        let a = new TestClass()
        a.foo("abc")

  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class TestClass {
        protected foo(): void
        protected foo(x: string): void
        protected foo(...args: Any[]): Any {
        }
      }
    calls:
      - |-
        let a = new TestClass()
        a.foo()
      - |-
        let a = new TestClass()
        a.foo("abc")
