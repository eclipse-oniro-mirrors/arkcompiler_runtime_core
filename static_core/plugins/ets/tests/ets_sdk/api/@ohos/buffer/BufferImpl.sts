/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { buffer } from "api/@ohos.buffer.sts"


function main(): int {
    const suite = new ArkTestsuite("Buffer API tests")
    
    suite.addTest("Test basic string encodings", testBasicStringEncodings)
    suite.addTest("Test Unicode string handling", testUnicodeString)
    suite.addTest("Test partial buffer reading", testPartialBufferReading)
    suite.addTest("Test mixed content handling", testMixedContent)
    suite.addTest("Test numbers handling", testNumbersHandling)
    suite.addTest("Test special characters", testSpecialCharacters)
    suite.addTest("Test edge cases", testEdgeCases)
    suite.addTest("Test all supported encodings", testAllSupportedEncodings)

    suite.addTest("Test byteLength with ASCII string", testByteLengthAscii)
    suite.addTest("Test byteLength with UTF8 string", testByteLengthUtf8)
    suite.addTest("Test byteLength with special characters", testByteLengthSpecialChars)
    suite.addTest("Test byteLength with TypedArrays", testByteLengthTypedArrays)
    suite.addTest("Test byteLength with Buffer and Views", testByteLengthBufferAndViews)

    suite.addTest("Test buffer.from with number array", testFromArray)
    suite.addTest("Test buffer.from with ArrayBuffer", testFromArrayBuffer)
    suite.addTest("Test buffer.from with Buffer/Uint8Array", testFromBufferOrUint8Array)
    suite.addTest("Test buffer.from with string", testFromString)

    return suite.run()
}

// byteLength tests
function testByteLengthAscii() {
    const testStr = 'ABC123'
    
    // Test different ASCII-compatible encodings
    assertEQ(buffer.byteLength(testStr, 'ascii'), 6)
    assertEQ(buffer.byteLength(testStr, 'utf8'), 6)
    assertEQ(buffer.byteLength(testStr, 'utf-8'), 6)
    assertEQ(buffer.byteLength(testStr, 'latin1'), 6)
    assertEQ(buffer.byteLength(testStr, 'binary'), 6)
}

function testByteLengthUtf8() {
    const testStr = 'ABC123'
    
    // Test UTF-16 variants
    assertEQ(buffer.byteLength(testStr, 'utf16le'), 12)
    assertEQ(buffer.byteLength(testStr, 'ucs2'), 12)
    assertEQ(buffer.byteLength(testStr, 'ucs-2'), 12)
}

function testByteLengthSpecialChars() {
    const specialStr = '‰Ω†Â•ΩÔºå‰∏ñÁïåüåç'
    
    assertEQ(buffer.byteLength(specialStr, 'utf8'), 19)
    assertEQ(buffer.byteLength(specialStr, 'utf16le'), 38)
    assertEQ(buffer.byteLength(specialStr, 'ascii'), 19)
}

function testByteLengthTypedArrays() {
    // Test with different TypedArrays
    const int8Array = new Int8Array([1, 2, 3, 4])
    assertEQ(buffer.byteLength(int8Array), 4)
}

function testByteLengthBufferAndViews() {
    const bufferData = buffer.from('Hello, world!')
    assertEQ(buffer.byteLength(bufferData), 13)
    assertEQ(buffer.byteLength(bufferData, 'utf8'), 13)
    
    const arrayBuffer = new ArrayBuffer(16)
    const dataView = new DataView(arrayBuffer)
    assertEQ(buffer.byteLength(dataView), 16)
    assertEQ(buffer.byteLength(arrayBuffer), 16)
}

// buffer.from tests
function testFromArray() {
    const arr = [72, 101, 108, 108, 111] // "Hello" in ASCII
    const buf = buffer.from(arr)
    assertEQ(buf.length, 5)
    assertEQ(buf.toString('ascii'), "Hello")
    
    const singular = [256, 300, -1, 255]
    const truncatedBuf = buffer.from(singular)
    assertEQ(truncatedBuf.length, 4)
    // Values should be truncated to fit in 0-255 range
    assertEQ(truncatedBuf.at(0), 0) // 256 -> 0
    assertEQ(truncatedBuf.at(1), 44) // 300 -> 44
    assertEQ(truncatedBuf.at(2), -1) // -1 -> 255
    assertEQ(truncatedBuf.at(3), -1)
}

function testFromArrayBuffer() {
    const arr = new Uint8Array([72, 101, 108, 108, 111])
    const arrayBuffer = arr.buffer as ArrayBuffer
    
    const buf1 = buffer.from(arrayBuffer)
    assertEQ(buf1.length, 5)
    assertEQ(buf1.toString('ascii'), "Hello")
    
    const buf2 = buffer.from(arrayBuffer, 1)
    assertEQ(buf2.length, 4)
    assertEQ(buf2.toString('ascii'), "ello")
    
    const buf3 = buffer.from(arrayBuffer, 1, 2)
    assertEQ(buf3.length, 2)
    assertEQ(buf3.toString('ascii'), "el")
}

function testFromBufferOrUint8Array() {
    const originalBuf = buffer.from([72, 101, 108, 108, 111])
    const copiedBuf = buffer.from(originalBuf)
    assertEQ(copiedBuf.length, originalBuf.length)
    assertEQ(copiedBuf.toString(), originalBuf.toString())
    
    const uint8Arr = new Uint8Array([72, 101, 108, 108, 111])
    const bufFromUint8 = buffer.from(uint8Arr)
    assertEQ(bufFromUint8.length, uint8Arr.length)
    assertEQ(bufFromUint8.toString('ascii'), "Hello")
}

function testFromString() {
    const str = "Hello, World!"
    const buf1 = buffer.from(str)
    assertEQ(buf1.toString(), str)

    const buf2 = buffer.from(str, 'ascii')
    assertEQ(buf2.toString('ascii'), str)

    const specialStr = '‰Ω†Â•ΩÔºå‰∏ñÁïåüåç'
    const buf4 = buffer.from(specialStr)
    assertEQ(buf4.toString(), specialStr)
}

// Buffer.toString() tests
function testBasicStringEncodings() {
    const asciiStr = 'Hello, World!'
    const asciiBuffer = buffer.from(asciiStr)
    assertEQ(asciiBuffer.toString('ascii'), 'Hello, World!')
    assertEQ(asciiBuffer.toString('utf8'), 'Hello, World!')
    assertEQ(asciiBuffer.toString('utf-8'), 'Hello, World!')
    assertEQ(asciiBuffer.toString('base64'), 'SGVsbG8sIFdvcmxkIQ==')
    assertEQ(asciiBuffer.toString('hex'), '48656c6c6f2c20576f726c6421')
}

function testUnicodeString() {
    const unicodeStr = '‰Ω†Â•ΩÔºå‰∏ñÁïåüåç'
    const unicodeBuffer = buffer.from(unicodeStr)
    assertEQ(unicodeBuffer.toString('utf8'), '‰Ω†Â•ΩÔºå‰∏ñÁïåüåç')
    assertEQ(unicodeBuffer.toString('base64'), '5L2g5aW977yM5LiW55WM8J+MjQ==')
}

function testPartialBufferReading() {
    const asciiStr = 'Hello, World!'
    const asciiBuffer = buffer.from(asciiStr)
    assertEQ(asciiBuffer.toString('utf8', 0, 5), 'Hello')
}

function testMixedContent() {
    const mixedStr = 'Hi, ‰∏ñÁïå!'
    const mixedBuffer = buffer.from(mixedStr)
    assertEQ(mixedBuffer.toString('utf8'), 'Hi, ‰∏ñÁïå!')
    assertEQ(mixedBuffer.toString('ascii'), 'Hi, ‰∏ñÁïå!')
    assertEQ(mixedBuffer.toString('base64'), 'SGksIOS4lueVjCE=')
}

function testNumbersHandling() {
    const numbers = '12345'
    const numbersBuffer = buffer.from(numbers)
    assertEQ(numbersBuffer.toString('utf8'), '12345')
    assertEQ(numbersBuffer.toString('ascii'), '12345')
    assertEQ(numbersBuffer.toString('hex'), '3132333435')
}

function testSpecialCharacters() {
    const specialChars = '!@#$%^&*()'
    const specialBuffer = buffer.from(specialChars)
    assertEQ(specialBuffer.toString('utf8'), '!@#$%^&*()')
    assertEQ(specialBuffer.toString('ascii'), '!@#$%^&*()')
    assertEQ(specialBuffer.toString('base64'), 'IUAjJCVeJiooKQ==')
}

function testEdgeCases() {
    // Empty buffer
    const emptyBuffer = buffer.from('')
    assertEQ(emptyBuffer.toString('utf8'), '')
    // Null bytes
    const nullBuffer = buffer.from('\0\0\0')
    assertEQ(nullBuffer.toString('utf8'), '\0\0\0')
    // Large buffer
    const largeStr = 'A'.repeat(1000)
    const largeBuffer = buffer.from(largeStr)
    assertEQ(largeBuffer.toString('utf8', 0, 50), 'A'.repeat(50))
}

function testAllSupportedEncodings() {
    const testStr = 'Test123'
    const testBuffer = buffer.from(testStr)
    assertEQ(testBuffer.toString('ascii'), 'Test123')
    assertEQ(testBuffer.toString('utf8'), 'Test123')
    assertEQ(testBuffer.toString('utf-8'), 'Test123')
    assertEQ(testBuffer.toString('base64'), 'VGVzdDEyMw==')
    assertEQ(testBuffer.toString('base64url'), 'VGVzdDEyMw==')
    assertEQ(testBuffer.toString('hex'), '54657374313233')
}