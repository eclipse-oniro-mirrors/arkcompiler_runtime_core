/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0(the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Decimal } from "@arkts.math.Decimal";

function main(): int {
    const suite = new arktest.ArkTestsuite("Decimal mod API tests");
    suite.addTest("Decimal mod with different precision and rounding", testModWithDiffPRandRM001);
    suite.addTest("Decimal mod with different precision and rounding", testModWithDiffPRandRM002);
    suite.addTest("Decimal mod with different precision and rounding", testModWithDiffPRandRM003);
    suite.addTest("Decimal mod with different precision and rounding", testModWithDiffPRandRM004);
    suite.addTest("Decimal mod with different precision and rounding", testModWithDiffPRandRM005);
    return suite.run();
}

function checkModResult(a: string, b: string, expected: string, sd: number, rm: number) {
    Decimal.precision = sd;
    Decimal.rounding = rm;
    arktest.assertEQ(new Decimal(a).mod(b).valueOf(), expected);
}

function testModWithDiffPRandRM001() {
    Decimal.toExpNeg = Decimal.toExpPos = 0;
    checkModResult('1.3894699e+3042', '-2.31875507700977838117805540505980140857029476462714e+91', '1.9357052749968517239204685249164188278642182342502e+91', 61, 0);
    checkModResult('79.235', '4.4827898048205433701866299445e+255', '7.9235e+1', 75, 0);
    checkModResult('4.476999920584999735690940e+2947', '431.4007436129918618300842573436992667279830088', '2.177092162465684682859259261336151290563486416e+2', 73, 0);
    checkModResult('1.951106229235660612010096898495653211543461145647637e+61', '-3.3477064e+141', '1.951106229235660612010096898495653211543461145647637e+61', 89, 6);
    checkModResult('-9.916630e+84', '-66.064342', '-1.3177302e+1', 37, 4);
    checkModResult('-860.1444052695', '825080074792355962132959107719531393891221', '-8.601444052695e+2', 32, 3);
    checkModResult('6.1352951126363381185748747422972468541675591991781e+9278', '4.1560786995244e+1527', '2.651534168388e+1527', 34, 6);
    checkModResult('4.944978e+764', '5323614045.2252161212631613035133757836906706', '5.1535379640553098968737518932745870816240816e+9', 97, 1);
    checkModResult('9.09144e+6306', '3.50201226950969565080636878120146612e+55', '2.69469845381791678871664408741658344e+55', 96, 5);
}

function testModWithDiffPRandRM002() {
    checkModResult('32172841276723723017320184344985646175887112.47790381', '5.58951e+9', '2.42307711247790381e+9', 20, 1);
    checkModResult('7.00620e+9706', '-8.08968082636983139609501341360433350633079179648541620232683e+9707', '7.0062e+9706', 42, 1);
    checkModResult('4.264042494837184947927734754557762536643709070327e+540', '9.95e+15', '3.95e+15', 45, 4);
    checkModResult('5.6105940856889306e+8254', '-7e+2', '6e+2', 93, 4);
    checkModResult('2526.4723101095362366485683598497883', '8.77812650378806065221188793462677511675764948870478079267e+94', '2.526472310109536236648569e+3', 25, 2);
    checkModResult('-4659.75203988732274192476946401', '6.060e+79', '-4.65975203988732274192476946401e+3', 72, 5);
    checkModResult('9.139217102709553745990883488575994294713541e+500', '-418253.135835407934425294007034135260164397764', '3.58109993522251265587238475937111423227918172e+5', 95, 0);
    checkModResult('-8.1086318916990298755700481699299539037472013444974422e+5755', '-1.5661587555799104561758191e+87', '-1.0074281153436182858841239e+87', 99, 5);
    checkModResult('-416737.42745', '-77173894789158506974126571178514075283378413478233.00755', '-4.1673742745e+5', 16, 6);
}

function testModWithDiffPRandRM003() {
    checkModResult('8.333306239514058871243415468295297607303726047354266e+684', '3.502702752540721094141e+59', '1.367728644750058669789e+59', 61, 4);
    checkModResult('-6.25787639e+479', '9.9197660713292e+55', '-4.5153786834196e+55', 60, 0);
    checkModResult('3.72001563869117563677e+76', '-66669138.417849525425581002528394724049111419621217', '6.2279859967071260303160475364250607980294928950909e+7', 55, 2);
    checkModResult('-1.5482390020990842932e+1127', '-1.527299849113353346489254e+726', '-1.057674615874692739663148e+726', 63, 5);
    checkModResult('-1.81968692707021067164405981e+1010', '-8.0e+4383', '-1.819e+1010', 4, 1);
    checkModResult('-3053673848.9365372689017115785293', '-7.0224310e+2372', '-3.053673848936537268901711579e+9', 28, 3);
    checkModResult('54183.632867779042905454844274458562747', '-83662541.555738139789607530938580336298367634', '5.41836328678e+4', 12, 5);
    checkModResult('-4.22473209309078364216473134517737205060872591792014964962722e+9967', '-269720069.2925602198855004698047', '-1.596172726513e+7', 14, 5);
    checkModResult('-5.75017431522121151911584268476607397041271245184126e+6110', '3.1316103139139653e+59', '-1.8603166122551754e+59', 33, 3);
    checkModResult('-53.3032029466169433002012740687580043518816717487', '31641.6419229957', '-5.33032029466169433002012740687580043518816717487e+1', 70, 3);
}

function testModWithDiffPRandRM004() {
    checkModResult('72217.81124137174718066449515357955447849981408895', '-8.7683588909862633417120718073873e+49', '7.221781124137174718066449515357955447849981408895e+4', 53, 1);
    checkModResult('4692222630612536029410534310094035996228840113566296.8', '1228263.06453688667212142398916324', '5.4696289351779412826381928353116e+5', 67, 0);
    checkModResult('-7.9540186730450607380161429790e+6430', '-4639.1111967549704803866386', '-1.07e+3', 3, 5);
    checkModResult('5.22e+7656', '-8.500204601289537368439368068473e+64', '1.31145091818334943531353566321e+64', 34, 5);
    checkModResult('9.87886266656141131566931816173489290346252900698068e+66', '-9.537278383404716745059580002e+195', '9.87886266656141131566931816173489290346252900698068e+66', 98, 4);
    checkModResult('-9031367.14748312394', '9.8676925037570147928180472738580628944445e+112', '-9.03136714748312394e+6', 93, 3);
    checkModResult('-3.237780151586765403233992546861473219e+103', '-4.213698590019308332103708310931502e+86', '-3.715913030258199339756353959945608e+86', 100, 5);
    checkModResult('-2e+624', '3.0630010e+754', '-2e+624', 24, 3);
    checkModResult('-26267210542733.60053963718272912688751521576671166112045188', '8.920557499910098814348531734605286864e+7549', '-2.62672105e+13', 9, 6);
}

function testModWithDiffPRandRM005() {
    checkModResult('5.884563e+86', '5.544271814073647469677715398389e+68', '1.656897857425690453539776341638e+68', 49, 6);
    checkModResult('-2.9501e+1031', '-5.705094676024e+32', '-3.086833450968e+32', 38, 0);
    checkModResult('2190203683.01784039790649953183427044501728975229622892', '-129341.6581527620814546235644263675042036956912', '6.1385517120072635e+4', 17, 4);
    checkModResult('374.465410986072628695747577414265711313', '5.2879747143440196018217433252932138284305606201435437e+952', '3.7446541098607e+2', 14, 1);
    checkModResult('8.4784750153107531506270037576e+327', '6.4828775998173475131160558410831475175e+2971', '8.4784750153107531506270037576e+327', 34, 0);
    checkModResult('9.62707270e+501', '-6.342341847592514387089599362701767676614396026825953485e+539', '9.6270727e+501', 84, 1);
}
