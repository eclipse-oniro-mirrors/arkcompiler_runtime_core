/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0(the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Decimal } from "@arkts.math.Decimal";

function main(): int {
    const suite = new arktest.ArkTestsuite("Decimal ln API tests part 11");
    suite.addTest("Decimal ln with specific config", testLnWithSpecificConfigPart001);
    suite.addTest("Decimal ln with specific config", testLnWithSpecificConfigPart002);
    suite.addTest("Decimal ln with specific config", testLnWithSpecificConfigPart003);
    suite.addTest("Decimal ln with toExpNeg and toExpPos is 0", testLnWithToExpNegAndToExpPosIsZero);
    return suite.run();
}

function checkLnResult(n: string, expected: string, sd: number, rm: number) {
    Decimal.precision = sd;
    Decimal.rounding = rm;
    arktest.assertEQ(new Decimal(n).ln().valueOf(), expected);
}

function testLnWithSpecificConfigPart001() {
    Decimal.set({ precision: 40, rounding: 4, toExpNeg: -9e15, toExpPos: 9e15, minE: -9e15, maxE: 9e15 });
    checkLnResult('0.999999999999999999999999999999999999999999993901016148293422192196736265601661935467416309801727317670352425687933', '-0.0000000000000000000000000000000000000000000060989838517065778078032637343983381', 35, 5);
    checkLnResult('1.0000000000000000000000000000000000001557068218834187197100492745906330662942472387805706361042981050161586903484636128434617775053436339425448812194544548', '0.0000000000000000000000000000000000001557068218834187197100492745906330663', 37, 6);
    checkLnResult('0.9999999999999999999999999999965', '-0.000000000000000000000000000003500000000000000000000000000006125', 37, 4);
    checkLnResult('0.999999999978069784575542971695341560698127887742654234264366033657806', '-0.00000000002193021542469749548', 19, 6);
    checkLnResult('0.99999999999999999999999999999999999999971989402139646726487926603258362083338', '-0.00000000000000000000000000000000000000028010597861', 11, 3);
    checkLnResult('1.0000000005777313213100622689185785411683162890830022421832393625555641832484284367817582206653835891277275299383003063423401888577943921722016789943432463695865333', '0.00000000057773132114317552917152047', 26, 0);
    checkLnResult('0.99998899817496551713109615150897242336013399949226209047495781001932', '-0.000011001885556', 11, 3);
    checkLnResult('0.9999999999999999999999999999999999999998297812400933250983600309185363087152186898130964880717734025466693634260269779753896445207544565324993821252294277099318291490267724329103905', '-0.00000000000000000000000000000000000000017021875990667490163996908', 26, 2);
    checkLnResult('0.999999999999999999999999999999867678505517799638290521749019978249164551148555611278304293867128540415736157410807909474981350886279390744210330912921984627066838448347590465998102019224', '-0.0000000000000000000000000000001323', 4, 6);
    checkLnResult('0.99999999999999955124573963968202720343790876222338286616005694319199910050972066877767645901567386160990300', '-0.0000000000000004487542', 7, 2);
}

function testLnWithSpecificConfigPart002() {
    checkLnResult('1.00000000000000000000000000000000000000000000000000000000238653373610066251324626982217917546085298331873741456053912434675', '0.0000000000000000000000000000000000000000000000000000000023865337361006625132462698221791754608529833187', 47, 6);
    checkLnResult('0.9999861381597997249299307707821689337357639252598918981802356169251231384862641946832270120025664317350590928784923055179837234141982333351243328116077696716052298729080148160342', '-0.000013861936276469802', 18, 5);
    checkLnResult('0.999518302013578741663390652958008318798483548326838687601953768440697860', '-0.00048181404016638611452172080975', 30, 2);
    checkLnResult('0.999999999999999999999999999999999999999999999999999998330036520393109006599069774962', '-0.000000000000000000000000000000000000000000000000000001669963479606891', 18, 0);
    checkLnResult('0.9999999999971982592566014030229274322557335630334721819051248984500648246070196539508012557622985639254125086208121666523259793307451588484063477678399192077493910841989290', '-0.00000000000280174074340252185266918493667', 30, 6);
    checkLnResult('1.0000000000000000000000000000000000000000000000000003081468179941393977604635738549120099277215766896592811135855391834253391376095954064189345149319503595848525394170943997567283', '0.0000000000000000000000000000000000000000000000000003081468179941393977604635738549120099', 37, 3);
    checkLnResult('1.0101564097626380683093087282120826613421424331759509214909151214101003', '0.0101051800145446340394781491861117815898', 39, 6);
    checkLnResult('0.99999999999999999999999999999999999999999999999999998835768423821199588003439629108184316187951135202946432288978839496371393350180031770629223550075209192125418982248995945098956877584132', '-0.00000000000000000000000000000000000000000000000000001164231576178800411996', 22, 1);
    checkLnResult('0.999999999999999999999999999999999999999999999999999999999976872096656109063431181886276194814782001823830665873550337102544082509981820955995454425929992234626018878531564551440745722576230', '-0.00000000000000000000000000000000000000000000000000000000002312790334389093657', 19, 5);
    checkLnResult('0.9999999967066363395314220', '-0.00000000329336366589170011195437', 24, 6);
}

function testLnWithSpecificConfigPart003() {
    checkLnResult('1.0857744658E-87', '-200.242609564754818345602', 24, 6);
    checkLnResult('7967796600342935039987851875126979686690856098804803834653251050081030306760096147743650654823921573015034335799167324649191446374757438.0484311242', '312.924395547087248674854', 24, 2);
    checkLnResult('4.959906063275914201262895287E-84', '-191.8157610097980062', 19, 3);
    checkLnResult('247605260094390353104779047655089617126976010142339438487265438023612656.077017582415972838691597824259541', '164.390207201496998614488673041664777028805542', 45, 0);
    checkLnResult('7.397668035008368', '2', 1, 3);
    checkLnResult('1.0643E-106', '-244.011702551303980943176356044', 30, 0);
    checkLnResult('2.350797564113792872976049891678503E-39', '-89', 2, 5);
    checkLnResult('89.249409735932840957', '5', 1, 0);
}

function testLnWithToExpNegAndToExpPosIsZero() {
    Decimal.toExpNeg = Decimal.toExpPos = 0;
    checkLnResult('3.22623980772186395511829472880667363767934689738221E+295688495330', '6.808479215178688102694343822133e+11', 31, 6);
    checkLnResult('3.1424008119820360904816828115594380261542633787339288E+6142101067398', '1.4142710357454596074562853825e+13', 29, 0);
    checkLnResult('8.799993E-79577', '-1.832306391942611440981400905118e+5', 32, 0);
    checkLnResult('8.70504056438959496505198875861603616462926E-5971', '-1.374657168803434206833683423555e+4', 31, 4);
    checkLnResult('8.4006029856E+923125420044', '2.1e+12', 2, 3);
    checkLnResult('4.0119839E-3299350', '-7.59703273728404749704426251310976420299891015285939e+6', 51, 2);
    checkLnResult('4.3302768368838848441860607605878081415720594735E+76594', '1.7636566824426052100565028315589397992162e+5', 41, 3);
    checkLnResult('3.8E+329784205242', '7.59356194896453019208845913197638776266462015689e+11', 48, 6);
    checkLnResult('7.6732416747937E+1102', '2.53948651164891795785685349144456466914229134475e+3', 48, 2);
    checkLnResult('2.077820490683659388975846E+723625853', '1.666210102754220135345042493516555e+9', 34, 4);
    checkLnResult('6.688785E-28910', '-6.65658346062145642467325909920069259e+4', 36, 6);
    checkLnResult('6.0136041193424216912E-17927305397954', '-4.1279146166878774234420729153e+13', 29, 3);
    checkLnResult('5.096332862894596814711832511046074722E+745', '1.71705441551516514163775766e+3', 27, 5);
}
