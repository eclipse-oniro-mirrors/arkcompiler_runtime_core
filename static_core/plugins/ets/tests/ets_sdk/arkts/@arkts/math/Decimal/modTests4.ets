/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0(the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Decimal } from "@arkts.math.Decimal";

function main(): int {
    const suite = new arktest.ArkTestsuite("Decimal mod API tests");
    suite.addTest("Decimal mod with different precision and rounding", testModWithDiffPRandRM001);
    suite.addTest("Decimal mod with different precision and rounding", testModWithDiffPRandRM002);
    suite.addTest("Decimal mod with different precision and rounding", testModWithDiffPRandRM003);
    suite.addTest("Decimal mod with different precision and rounding", testModWithDiffPRandRM004);
    return suite.run();
}

function checkModResult(a: string, b: string, expected: string, sd: number, rm: number) {
    Decimal.precision = sd;
    Decimal.rounding = rm;
    arktest.assertEQ(new Decimal(a).mod(b).valueOf(), expected);
}

function testModWithDiffPRandRM001() {
    Decimal.toExpNeg = Decimal.toExpPos = 0;
    checkModResult('7145500474663735829770809398299303175.875800464970535410224', '90828572.5113415651186621228687335129152209', '5.6290732076087447357393897802e+7', 29, 1);
    checkModResult('-6.05845881219948340925618875938e+91', '6.61836246027891675911003e+7034', '-6.0584588121994e+91', 14, 1);
    checkModResult('-7.43e+833', '-3.1891516544348227127456801051019337878811793572460629e+1748', '-7.43e+833', 39, 4);
    checkModResult('-586487137896561.9', '-7e+720', '-5.864871378965619e+14', 32, 3);
    checkModResult('-7004720099355232745.58685968254503', '464534361433180', '-6.46330431152558685968254503e+12', 83, 4);
    checkModResult('7376349279.6789964', '8.13158102169523546706061074913188868474536498e+1244', '7.3763492796789964e+9', 83, 1);
    checkModResult('-2.66694516312127080093289225754644e+5649', '-8.2788550315689695e+274', '-6.58461978336281e+273', 91, 3);
    checkModResult('-26377480.2334276377485822339988800328191768957719819966', '97339239938767981386925617.88982454562567822091088', '-2.6377480233427637748582233e+7', 26, 1);
    checkModResult('2.3644616729891784263411140e+3430', '-981855.982985359583764068205579338555912870110328229714', '5.192582575653964788593134550979615774147e+5', 40, 2);
    checkModResult('-2567.301939196367215654841', '-4.7110984724522e+20', '-2.567301939196367215654841e+3', 48, 3);
}

function testModWithDiffPRandRM002() {
    checkModResult('-6.887177370604424697705428668658450e+36', '-7.67098e+3101', '-6.88717737060442469770542866865845e+36', 73, 1);
    checkModResult('2.3477568659602166267356708374e+758', '260693.9220345082421249094573691967212817853512', '2.359424256311595263045483114847279155538568672e+5', 55, 6);
    checkModResult('-5.033571988963017652865943270154512156255697111231944e+1306', '-1.04835155898865079e+703', '-9.344544833551976e+702', 72, 1);
    checkModResult('8.214139451354306802429236611686779e+5690', '-1.1263730322555479536183521284e+67', '3.74429518435572840395289768e+66', 50, 5);
    checkModResult('-8.1488000628720211739998282062206736158332e+75', '-2.001705e+6119', '-8.148800062872021173999828206220673615833e+75', 40, 1);
    checkModResult('-1080.0089303345457', '-2.70053959411289137357067400343848e+7462', '-1.0800089303345457e+3', 47, 3);
    checkModResult('-951.8120833154', '-4601803.9053077601346104732884149542122', '-9.518120833154e+2', 85, 1);
    checkModResult('623427944.6738997303017990', '8.80254156992034229e+39', '6.23427944673899730301799e+8', 67, 5);
    checkModResult('2.35391833099492200539685512e+541', '6.54579350680846293549701724417257e+6501', '2.35391833099492200539685512e+541', 78, 3);
    checkModResult('-5.802871745569351746236032657404971772902653184e+166', '-569601127769.9071963300149221373', '-3.942765500842812255133287266114e+11', 95, 2);
    checkModResult('58251.5299394592584913418694544936952', '9.922305336838175628353279413320037919974386628e+529', '5.82515299394592584913418694544936952e+4', 38, 0);
    checkModResult('178.810791', '5.9730850405607582e+127', '1.78810791e+2', 84, 5);
}

function testModWithDiffPRandRM003() {
    checkModResult('-7.213282126127679116801393251769456078498115487567582164e+771', '9.6205166181505588836203473075832010219834163e+54', '-2.5117368798393502824500490159742596742822416e+54', 68, 2);
    checkModResult('4.4e+1415', '-1791.169782612342099849155398906941466798405915791267', '4.653087683667797453179502356881392981661075348818e+2', 49, 6);
    checkModResult('-2.80845381738689415933627794871721050391716565400744493348202e+159', '4042022.949118089592', '-5.1205e+5', 5, 5);
    checkModResult('-7.608461933481403715443327118274378005025e+6785', '73027440923359159570.9274647515324850715', '-4.0233559318242465845769751200091461814e+19', 100, 0);
    checkModResult('5.3656679337854155278424098140145779577342655431342620134014e+7681', '-9.34344633539969e+136', '3.2266e+135', 5, 0);
    checkModResult('-8.76e+15', '7.884013646400282186823118749015404657404866922926e+5546', '-9e+15', 1, 0);
    checkModResult('3.08613897206936240922007217437132e+9939', '5.60781020e+9', '4.424842e+9', 17, 2);
    checkModResult('17.347072298067804168620815', '9.6146989823337249222122068576315652901e+59', '1.7347072298067804168620815e+1', 81, 2);
    checkModResult('-3.3610512896674974771860856952304666e+76', '9.82609790457683994410', '-5.4089915183757222993e+0', 91, 3);
    checkModResult('-5.075266107871695934621156287679557190e+225', '-8950634354.102096867', '-3.320100822028796139e+9', 64, 4);
}

function testModWithDiffPRandRM004() {
    checkModResult('1.80906977550635553008735110130154444563675928517e+222', '-2.3641653094828594182991e+850', '1.809069775506355530087351e+222', 25, 5);
    checkModResult('2.10724292529592973714942968646730881946629591268819155763e+96', '8.7469186241449712430e+308', '2.1072429252959297371494297e+96', 26, 5);
    checkModResult('2.511951653e+3360', '-62704201442675201961255868610.62', '2.566182839527647e+28', 16, 3);
    checkModResult('-243025.9013822376723836745951444', '-2.6675104229981642056765726341862e+9212', '-2.430259013822376723836745951444e+5', 91, 1);
    checkModResult('5.9150440852e+129', '1756386.26758530048962177340289455990042113', '1.51990747887335793925678558668139806689985e+6', 53, 5);
    checkModResult('-94252.40812498886857383293649', '-3.8032732751134162575094809941651e+621', '-9.425240812498886857383293649e+4', 96, 4);
    checkModResult('-6.00559063113006083268308811806162403396832594e+7303', '-526206391770735839309548148095066062264265607373.735063960260', '-2.5090125586506678664e+47', 20, 6);
    checkModResult('-2.2567835144492993286994200e+573', '3.86e+19', '-2.72e+19', 56, 0);
    checkModResult('45.40437334953326105840633843242', '8.165685418205048453423994094023522482e+91', '4.540437334953326105840633843242e+1', 55, 6);
}
