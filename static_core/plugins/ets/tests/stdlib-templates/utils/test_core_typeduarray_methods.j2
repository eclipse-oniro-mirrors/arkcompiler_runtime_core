/**
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const success: number = 0;
const fail: number = 1;

function main(): int {
  let failures: number = 0;

  failures += check(testBytePerElement(),"test BytePerElement for {{.item.objectType}}");

  failures += check(testTypedUArrayIterator(),"test {{.item.objectType}} Iterator");
  failures += check(testTypedUArrayIteratorEmptyArray(), "test {{.item.objectType}} Iterator Empty Array");
  failures += check(testTypedUArrayIteratorSingleElement(), "test {{.item.objectType}} Iterator Single Element");
  failures += check(testTypedUArrayIteratorAfterModification(), "test {{.item.objectType}} Iterator After Modification");
  failures += check(testTypedUArrayIteratorAfterCompletion(), "test {{.item.objectType}} Iterator After Completion");

  failures += check(testEmptyTypedUArrayToString(), "Try to Empty Array toString");
  failures += check(testNonEmptyTypedUArrayToString(), "Try to Nonempty Array toString");

  failures += check(testEmptyTypedUArrayAt(), "Test to Empty Array at");
  failures += check(testNonEmptyTypedUArrayAt(), "Test to Nonempty Array at");

  failures += check(testNonEmptyTypedUArrayReverse(), "Test NonEmpty Array Reverse");
  failures += check(testEmptyTypedUArrayReverse(), "Test Empty Array Reverse");
  failures += check(testOf(), "Create Array object by means call non-subset {{.item.objectType}}.of(...{{.item.primitiveTypeWide}}[])");

  if (failures > 0){
    console.log("failed");
    return fail;
  }

  console.log("All passed");
  return success;
}

function check(result: int, message: String): number {
  if (result == 0) {
    return success;
  }
  console.log("\nFAILED: " + message);
  return fail;
}

function check(result: number, message: String): number {
  if (result == 0) {
    return success;
  }
  console.log("\nFAILED: " + message);
  return fail;
}

const normalSource: {{.item.type}}[] = {{.item.data}};
const abnormalSource: {{.item.type}}[] = {{.item.abnormalData}};

function testBytePerElement(): number {
  if ({{.item.objectType}}.BYTES_PER_ELEMENT as int == {{.item.primitiveSizeBytes}}) return success;
  return fail;
}

function testTypedUArrayIterator(): number {
  let ss = new ArrayBuffer(5 * {{.item.primitiveSizeBytes}});
  let typedUArray: {{.item.objectType}};

  try {
    typedUArray = new {{.item.objectType}}(ss);
  } catch(e) {
    console.log(e);
    return fail;
  }

  let length = typedUArray.length;

  try {
    typedUArray[0] = 1 as number;
    typedUArray[1] = 2 as number;
    typedUArray[2] = 3 as number;
    typedUArray[3] = 4 as number;
    typedUArray[4] = 5 as number;
  } catch(e) {
    console.log(e);
    return fail;
  }

  let arrayIterator = typedUArray.$_iterator();
  let next = arrayIterator.next();
  let counter: number = 0;
  while (!next.done) {
    if (next.value == undefined) {
        return fail;
    }
    if (typedUArray[counter] != (next.value!) as number) {
        return fail;
    }
    next = arrayIterator.next()
    counter++
  }

  if (counter != typedUArray.length) {
    return fail;
  }

  return success;
}

function testTypedUArrayIteratorEmptyArray(): number {
  let emptyArray = new {{.item.objectType}}(new ArrayBuffer(0));
  let emptyIterator = emptyArray.$_iterator();
  let emptyNext = emptyIterator.next();

  if (!emptyNext.done || emptyNext.value != undefined) {
    return fail;
  }

  return success;
}

function testTypedUArrayIteratorSingleElement(): number {
  let singleArray = new {{.item.objectType}}(new ArrayBuffer(1 *  {{.item.primitiveSizeBytes}}));

  try {
    singleArray[0] = 99;
  } catch(e) {
    console.log(e);
    return fail;
  }

  let singleIterator = singleArray.$_iterator();
  let singleNext = singleIterator.next();

  if (singleNext.done || singleNext.value != 99) {
    return fail;
  }

  singleNext = singleIterator.next();
  if (!singleNext.done || singleNext.value != undefined) {
    return fail;
  }

  return success;
}

function testTypedUArrayIteratorAfterModification(): number {
  let ss = new ArrayBuffer(5 * {{.item.primitiveSizeBytes}});
  let typedUArray: {{.item.objectType}};

  try {
    typedUArray = new {{.item.objectType}}(ss);
  } catch(e) {
    console.log(e);
    return fail;
  }

  try {
    typedUArray[0] = 1;
    typedUArray[1] = 2;
    typedUArray[2] = 3;
    typedUArray[3] = 4;
    typedUArray[4] = 5;
  } catch(e) {
    console.log(e);
    return fail;
  }

  // Testing iterator after modification
  let arrayIterator = typedUArray.$_iterator();
  let next = arrayIterator.next();
  let expectedValues = [1, 2, 3, 4, 5];
  let counter: int = 0;

  while (!next.done) {
    if (next.value == undefined) {
      return fail;
    }
    if (expectedValues[counter] != next.value) {
      return fail;
    }
    next = arrayIterator.next();
    counter++;
  }

  if (counter != typedUArray.length) {
    return fail;
  }

  // Modify a value
  typedUArray[0] = 99;
  if(typedUArray.$_iterator().next().value != 99){
    return fail;
  }

  return success;
}

function testTypedUArrayIteratorAfterCompletion(): number {
  let ss = new ArrayBuffer(5 * {{.item.primitiveSizeBytes}});
  let typedUArray: {{.item.objectType}};

  try {
    typedUArray = new {{.item.objectType}}(ss);
  } catch(e) {
    console.log(e);
    return fail;
  }

  typedUArray[0] = 1;
  typedUArray[1] = 2;
  typedUArray[2] = 3;
  typedUArray[3] = 4;
  typedUArray[4] = 5;

  let arrayIterator = typedUArray.$_iterator();
  let next = arrayIterator.next();

  while (!next.done) {
    next = arrayIterator.next();
  }

  // Check iterator after completion
  next = arrayIterator.next();
  if (!next.done || next.value != undefined) {
    return fail;
  }

  return success;
}

function testNonEmptyTypedUArrayToString(): number {
  let source: number[] = [1, 2, 3, 4, 5];
  let ss = new ArrayBuffer(source.length * {{.item.primitiveSizeBytes}});
  let typedUArray: {{.item.objectType}};

  try {
    typedUArray = new {{.item.objectType}}(ss);
    typedUArray.set(source);
  } catch(e) {
    console.log(e);
    return fail;
  }

  const toStringResult = typedUArray.toString();
  console.log("toString result: " + toStringResult);
  // Assertion
  if (toStringResult == "1,2,3,4,5") {
    console.log("toString test passed.");
    return success;
  } else {
    console.log("testNonEmptyTypedUArrayToString test failed.");
    return fail;
  }
}

function testEmptyTypedUArrayToString(): number {
  let ss = new ArrayBuffer(0);
  let typedUArray: {{.item.objectType}};
  try {
    typedUArray = new {{.item.objectType}}(ss);
  } catch(e) {
    console.log(e);
    return fail;
  }

  const toStringResult = typedUArray.toString();
  console.log("toString result: " + toStringResult);
  // Assertion
  if (toStringResult == "") {
    console.log("testEmptyTypedUArrayToString test passed.");
    return success;
  } else {
    console.log("toString test failed.");
    return fail;
  }
}

function testNonEmptyTypedUArrayAt(): number {
  let source: number[] = [1, 2, 3, 4, 5];
  let ss = new ArrayBuffer(source.length * {{.item.primitiveSizeBytes}});
  let typedUArray: {{.item.objectType}};

  try {
    typedUArray = new {{.item.objectType}}(ss);
    typedUArray.set(source);
  } catch(e) {
    console.log(e);
    return fail;
  }

  let index = 0;
  let length = typedUArray.length;
  let atResult = typedUArray.at(index);
  console.log("testNonEmptyTypedUArrayAt result: " + atResult);
  // Assertion
  if (atResult == new Number(source[index])) {
    console.log("testNonEmptyTypedUArrayAt test passed.");
  } else {
    console.log("testNonEmptyTypedUArrayAt test failed.");
    return fail;
  }

  index = -1;
  atResult = typedUArray.at(index);
  console.log("testNonEmptyTypedUArrayAt result: " + atResult);
  // Assertion
  if (atResult == new Number(source[index + length as int])) {
    console.log("testNonEmptyTypedUArrayAt test passed.");
  } else {
    console.log("testNonEmptyTypedUArrayAt test failed.");
    return fail;
  }

  index = typedUArray.length as int;
  atResult = typedUArray.at(index);
  console.log("testNonEmptyTypedUArrayAt result: " + atResult);
  // Assertion
  if (atResult == undefined) {
    console.log("testNonEmptyTypedUArrayAt test passed.");
  } else {
    console.log("testNonEmptyTypedUArrayAt test failed.");
    return fail;
  }
  return success;
}

function testEmptyTypedUArrayAt(): number {
  let ss = new ArrayBuffer(0);
  let typedUArray: {{.item.objectType}};
  try {
    typedUArray = new {{.item.objectType}}(ss);
  } catch(e) {
    console.log(e);
    return fail;
  }

  let atResult = typedUArray.at(0);
  console.log("testEmptyTypedUArrayAt result: " + atResult);
  // Assertion
  if (atResult == undefined) {
    console.log("testEmptyTypedUArrayAt test passed.");
    return success;
  } else {
    console.log("testEmptyTypedUArrayAt test failed.");
    return fail;
  }
}

function testNonEmptyTypedUArrayReverse(): number {
  let source1: {{.item.type}}[] = [5, 3, 1, 4, 2];
  let ss = new ArrayBuffer(source1.length * {{.item.primitiveSizeBytes}});
  let TypedUArray: {{.item.objectType}};

  try {
    TypedUArray = new {{.item.objectType}}(ss);
    TypedUArray.set(source1);
  } catch(e) {
    console.log(e);
    return fail;
  }

  // Test toReversed function
  let reversedArray: {{.item.objectType}} = TypedUArray.reverse();
  let expectedArray: {{.item.type}}[] = [2, 4, 1, 3, 5];
  for (let i = 0; i < reversedArray.length; i++) {
    if (reversedArray[i] != expectedArray[i]) {
      console.log("Test failed. testNonEmptyTypedUArrayReverse: " + JSON.stringify(reversedArray[i]));
      return fail;
    }
  }
  return success;
}

function testEmptyTypedUArrayReverse(): number {
  let ss = new ArrayBuffer(0);
  let TypedUArray: {{.item.objectType}};

  try {
    TypedUArray = new {{.item.objectType}}(ss);
  } catch(e) {
    console.log(e);
    return fail;
  }

  // Test toReversed function
  let reversedArray: {{.item.objectType}} = TypedUArray.reverse();

  if (reversedArray != TypedUArray || reversedArray.length != 0) {
    console.log("Test failed. testEmptyTypedUArrayReverse: " + reversedArray);
    return fail;
  }

  return success;
}

const source: {{.item.primitiveTypeWide}}[] = {{.item.data}};
function testOf(): int {
  let origin: {{.item.objectType}};

  try {
    origin = {{.item.objectType}}.of(...source);
  } catch(e) {
    console.println(e);
    return fail;
  }

  if (origin.length != source.length) {
    console.println("Array length mismatch");
    return fail;
  }

  for (let i: int = 0; i < source.length; i++) {
    if (origin[i] as {{.item.primitiveTypeWide}} != source[i]) {
      console.println("Array data mismatch");
      return fail;
    }
  }
  return success;
}
