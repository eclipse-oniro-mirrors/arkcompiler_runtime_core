# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
    method_name: forEach,
    method_nature: procedure,
    result: arr,
    result_nature: array,
    result_type: "FixedArray<boolean>",
    method_signature: { arr: "FixedArray<boolean>", fn : "(value:boolean,index:int,self:FixedArray<boolean>)=>void" },
    method_throws: "false",
    method_signature_desc: {arr: "boolean_array", fn: "func_boolean_int_boolean_array"},
    method_test_index_data:
      {
        test1:
          {
            arr: "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]",
            fn: '(value:boolean,index:int,self:FixedArray<boolean>): void =>  {self[index.toInt()] = !value}',
          },
        test2:
          {
            arr: "[]",
            fn: '(value:boolean,index:int,self:FixedArray<boolean>): void =>  {self[index.toInt()] = !value}',
          },

      },
      method_expected_data:
      {
        test1: "[true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]",
        test2: "[]"
      },
  }
- {
    method_name: forEach,
    method_nature: procedure,
    result: arr,
    result_nature: array,
    result_type: "FixedArray<byte>",
    method_signature: { arr: "FixedArray<byte>", fn : "(value:byte,index:int,self:FixedArray<byte>)=>void" },
    method_throws: "false",
    method_signature_desc: {arr: "byte_array", fn: "func_byte_int_byte_array"},
    method_test_index_data:
      {
        test1:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
            fn: '(value:byte,index:int,self:FixedArray<byte>): void =>  {self[index.toInt()] = ((value * 2).toByte())}',
          },
          test2:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
            fn: '(value:byte,index:int,self:FixedArray<byte>): void =>  {self[index.toInt()] = ((value + index.toInt()).toByte())}',
          },
          test3:
          {
            arr: "[]",
            fn: '(value:byte,index:int,self:FixedArray<byte>): void =>  {self[index.toInt()] = ((value + index.toInt()).toByte())}',
          },
      },
      method_expected_data:
      {
        test1: "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        test2: "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        test3: "[]"
      },
  }
- {
    method_name: forEach,
    method_nature: procedure,
    result: arr,
    result_nature: array,
    result_type: "FixedArray<short>",
    method_signature: { arr: "FixedArray<short>", fn : "(value:short,index:int,self:FixedArray<short>)=>void" },
    method_throws: "false",
    method_signature_desc: {arr: "short_array", fn: "func_short_int_short_array"},
    method_test_index_data:
      {
        test1:
          {
            arr: "[0 ,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
            fn: '(value:short,index:int,self:FixedArray<short>): void =>  {self[index.toInt()] = ((value * 2).toShort())}',
          },
        test2:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
            fn: '(value:short,index:int,self:FixedArray<short>): void =>  {self[index.toInt()] = ((value + index.toInt()).toShort())}',
          },
        test3:
          {
            arr: "[]",
            fn: '(value:short,index:int,self:FixedArray<short>): void =>  {self[index.toInt()] = ((value + index.toInt()).toShort())}',
          },
      },
      method_expected_data:
        {
        test1: "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        test2: "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        test3: "[]"
        },
  }
- {
    method_name: forEach,
    method_nature: procedure,
    result: arr,
    result_nature: array,
    result_type: "FixedArray<int>",
    method_signature: { arr: "FixedArray<int>", fn : "(value:int,index:int,self:FixedArray<int>)=>void" },
    method_throws: "false",
    method_signature_desc: {arr: "int_array", fn: "func_int_int_int_array"},
    method_test_index_data:
      {
        test1:
          {
            arr: "[0 ,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
            fn: '(value:int,index:int,self:FixedArray<int>): void =>  {self[index.toInt()] = value * 2}',
          },
        test2:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
            fn: '(value:int,index:int,self:FixedArray<int>): void =>  {self[index.toInt()] = value + index.toInt()}',
          },
        test3:
          {
            arr: "[]",
            fn: '(value:int,index:int,self:FixedArray<int>): void =>  {self[index.toInt()] = value + index.toInt()}',
          },
      },
      method_expected_data:
        {
        test1: "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        test2: "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        test3: "[]"
      },
  }
- {
    method_name: forEach,
    method_nature: procedure,
    result: arr,
    result_nature: array,
    result_type: "FixedArray<long>",
    method_signature: { arr: "FixedArray<long>", fn : "(value:long,index:int,self:FixedArray<long>)=>void" },
    method_throws: "false",
    method_signature_desc: {arr: "long_array", fn: "func_long_int_long_array"},
    method_test_index_data:
      {
       test1:
         {
          arr: "[0 ,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
          fn: '(value:long,index:int,self:FixedArray<long>): void =>  {self[index.toInt()] = value * 2}',
        },
      test2:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
            fn: '(value:long,index:int,self:FixedArray<long>): void =>  {self[index.toInt()] = value + index.toInt()}',
          },
      test3:
          {
            arr: "[]",
            fn: '(value:long,index:int,self:FixedArray<long>): void =>  {self[index.toInt()] = value + index.toInt()}',
          },
      },
      method_expected_data:
        {
        test1: "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        test2: "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        test3: "[]"
      },
  }
- {
    method_name: forEach,
    method_nature: procedure,
    result: arr,
    result_nature: array,
    result_type: "FixedArray<float>",
    method_signature: { arr: "FixedArray<float>", fn : "(value:float,index:int,self:FixedArray<float>)=>void" },
    method_throws: "false",
    method_signature_desc: {arr: "float_array", fn: "func_float_int_float_array"},
    method_test_index_data:
       {
        test1:
          {
            arr: "[0 ,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
            fn: '(value:float,index:int,self:FixedArray<float>): void =>  {self[index.toInt()] = value * 2}',
          },
        test2:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
            fn: '(value:float,index:int,self:FixedArray<float>): void =>  {self[index.toInt()] = value + index.toInt()}',
          },
        test3:
          {
            arr: "[]",
            fn: '(value:float,index:int,self:FixedArray<float>): void =>  {self[index.toInt()] = value + index.toInt()}',
          },
      },
      method_expected_data:
        {
        test1: "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        test2: "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        test3: "[]"
      },
  }
- {
    method_name: forEach,
    method_nature: procedure,
    result: arr,
    result_nature: array,
    result_type: "FixedArray<double>",
    method_signature: { arr: "FixedArray<double>", fn : "(value:double,index:int,self:FixedArray<double>)=>void" },
    method_throws: "false",
    method_signature_desc: {arr: "double_array", fn: "func_double_int_double_array"},
    method_test_index_data:
       {
        test1:
          {
            arr: "[0 ,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
            fn: '(value:double,index:int,self:FixedArray<double>): void =>  {self[index.toInt()] = value * 2}',
          },
        test2:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
            fn: '(value:double,index:int,self:FixedArray<double>): void =>  {self[index.toInt()] = value + index.toInt()}',
          },
        test3:
          {
            arr: "[]",
            fn: '(value:double,index:int,self:FixedArray<double>): void =>  {self[index.toInt()] = value + index.toInt()}',
          },
      },
      method_expected_data:
        {
        test1: "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        test2: "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        test3: "[]"
      },
  }
- {
    method_name: forEach,
    method_nature: procedure,
    result: arr,
    result_nature: array,
    result_type: "FixedArray<char>",
    method_signature: { arr: "FixedArray<char>", fn : "(value:char,index:int,self:FixedArray<char>)=>void" },
    method_throws: "false",
    method_signature_desc: {arr: "char_array", fn: "func_char_int_char_array"},
      method_test_index_data:
       {
        test1:
          {
            arr: "[c'\\x00', c'\\x01', c'\\x02', c'\\x03', c'\\x04', c'\\x05', c'\\x06', c'\\x07', c'\\x08', c'\\x09', c'\\x0A', c'\\x0B', c'\\x0C', c'\\x0D', c'\\x0E', c'\\x0F']",
            fn: '(value:char,index:int,self:FixedArray<char>): void =>  {self[index.toInt()] = (value.toInt() * 2).toChar()}',
          },
        test2:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
            fn: '(value:char,index:int,self:FixedArray<char>): void =>  {self[index.toInt()] = (value.toInt() + index.toInt()).toChar()}',
          },
        test3:
          {
            arr: "[]",
            fn: '(value:char,index:int,self:FixedArray<char>): void =>  {self[index.toInt()] = (value.toInt() + index.toInt()).toChar(0}',
          },
      },
      method_expected_data:
        {
        test1: "[c'\\x00', c'\\x02', c'\\x04', c'\\x06', c'\\x08', c'\\x0A', c'\\x0C', c'\\x0E', c'\\x10', c'\\x12', c'\\x14', c'\\x16', c'\\x18', c'\\x1A', c'\\x1C', c'\\x1E']",
        test2: "[c'\\x00', c'\\x02', c'\\x04', c'\\x06', c'\\x08', c'\\x0A', c'\\x0C', c'\\x0E', c'\\x10', c'\\x12', c'\\x14', c'\\x16', c'\\x18', c'\\x1A', c'\\x1C', c'\\x1E']",
        test3: "[]"
      },
  }
