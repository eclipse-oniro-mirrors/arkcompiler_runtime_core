/**
 * Copyright (c) 2024-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let module = ESValue.load('../../plugins/ets/tests/interop_js/tests/generic_static/ts_to_sts/main');
let GenericStatic = module.getProperty('GenericStatic');
let genericStaticMethodCallFromTs = module.getProperty('genericStaticMethodCallFromTs');

function checkGenericStaticInt(): boolean {
    try {
        const tsInt = ESValue.wrapInt(1);
        const res = GenericStatic.invokeMethod('get', tsInt);
        
        if (res == null) {
            return false;
        }
        
        return res.toNumber() === 1;
    } catch (e) {
        return false;
    }
}

function checkGenericStaticString(): boolean {
    try {
        const tsString = ESValue.wrapString("test");
        const res = GenericStatic.invokeMethod('get', tsString);
        
        if (res == null) {
            return false;
        }
        
        return res.toString() === "test";
    } catch (e) {
        return false;
    }
}

function checkGenericStaticBool(): boolean {
    try {
        const tsBool = ESValue.wrapBoolean(true);
        const res = GenericStatic.invokeMethod('get', tsBool);
        
        if (res == null) {
            return false;
        }
        
        return res.toBoolean() === true;
    } catch (e) {
        return false;
    }
}

function checkGenericStaticArr(): boolean {
    try {
        const jsArray = [1, 2, 3];
        const tsArr = ESValue.wrap(jsArray);
        const res = GenericStatic.invokeMethod('get', tsArr);
        
        if (res == null) {
            return false;
        }
        
        const firstElement = res.getProperty(0);
        if (firstElement == null) {
            return false;
        }
        
        return firstElement.toNumber() === 1;
    } catch (e) {
        return false;
    }
}

function checkGenericStaticMethodCallFromTsInt(): boolean {
    try {
        const tsInt = ESValue.wrapInt(1);
        const res = genericStaticMethodCallFromTs.invoke(tsInt);
        
        if (res == null) {
            return false;
        }
        
        return res.toNumber() === 1;
    } catch (e) {
        return false;
    }
}

function checkGenericStaticMethodCallFromTsString(): boolean {
    try {
        const tsString = ESValue.wrapString("test");
        const res = genericStaticMethodCallFromTs.invoke(tsString);
        
        if (res == null) {
            return false;
        }
        
        return res.toString() === "test";
    } catch (e) {
        return false;
    }
}

function checkGenericStaticMethodCallFromTsBool(): boolean {
    try {
        const tsBool = ESValue.wrapBoolean(true);
        const res = genericStaticMethodCallFromTs.invoke(tsBool);
        
        if (res == null) {
            return false;
        }
        
        return res.toBoolean() === true;
    } catch (e) {
        return false;
    }
}

function checkGenericStaticMethodCallFromTsArr(): boolean {
    try {
        const jsArray = [1, 2, 3];
        const tsArr = ESValue.wrap(jsArray);
        const res = genericStaticMethodCallFromTs.invoke(tsArr);
        
        if (res == null) {
            return false;
        }
        
        const firstElement = res.getProperty(0);
        if (firstElement == null) {
            return false;
        }
        
        return firstElement.toNumber() === 1;
    } catch (e) {
        return false;
    }
}