/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "ani.h"
#include <string>
#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>
#include "libarkbase/utils/logger.h"

[[maybe_unused]] static void GetStdString(ani_env *env, ani_string str, std::string &result)
{
    ani_size sz {};
    LOG_IF(env->String_GetUTF8Size(str, &sz) != ANI_OK, FATAL, ANI) << "Failed to get UTF8 string size";
    result.resize(sz + 1);

    LOG_IF(env->String_GetUTF8SubString(str, 0, sz, result.data(), result.size(), &sz) != ANI_OK, FATAL, ANI) << "Failed to get UTF8 substring";

    result.resize(sz);
}

[[maybe_unused]] static bool Equal(double a1, double a2)
{
    return std::abs(a1 - a2) < 0.000001F;
}

{% set names = ["", "Direct"] -%}

{% for name in names -%}
{% if (name != "Direct" or type != "string") and (name != "Direct" or arm32 == "false" or type != "float") %}
ani_{{ type }} return{{ name }}{{ Type }}({% if name != "Direct" %} [[maybe_unused]] ani_env *env {% endif %})
{
    {% if type == "boolean" -%}
    ani_boolean ret = ANI_TRUE;
    {% elif type == "float" or type == "double" -%}
    auto ret = ani_{{ type }}(1.1);
    {% elif type == "string" -%}
    std::string str("UTF_STRING@#$");
    ani_string ret;
    LOG_IF(env->String_NewUTF8(str.c_str(), str.length(), &ret) != ANI_OK, FATAL, ANI) << "Failed to create UTF8 string";
    {% else -%}
    auto ret = ani_{{ type }}(1);
    {% endif -%}
    return ret;
}

void check{{ name }}{{ Type }}({% if name != "Direct" %}[[maybe_unused]] ani_env *env, {% endif %} ani_{{ type }} value)
{
    {% if type == "boolean" -%}
    LOG_IF(value != ani_{{ type }}(ANI_TRUE), FATAL, ANI) << "value != ANI_TRUE";
    {% elif type == "float" or type == "double" -%}
    LOG_IF(!Equal(value, 1.1), FATAL, ANI) << "'" << value << "' not equal to 1.1";
    {% elif type == "string" -%}
    std::string ret {};
    GetStdString(env, value, ret);
    LOG_IF(ret != "UTF_STRING@#$", FATAL, ANI) << "'" << ret << "' not equal to 'UTF_STRING@#$'";
    {% else -%}
    LOG_IF(value != ani_{{ type }}(1), FATAL, ANI) << "'" << value << "' not equal to 1";
    {% endif -%}
}
{% endif %}
{% endfor -%}

const std::vector<ani_native_function> g_{{ type }}Methods = {
    {"return{{ Type }}", nullptr, reinterpret_cast<void *>(return{{ Type }})},
    {"returnQuick{{ Type }}", nullptr, reinterpret_cast<void *>(return{{ Type }})},
    {% if type != "string" and (arm32 == "false" or type != "float" ) -%}
        {"returnDirect{{ Type }}", nullptr, reinterpret_cast<void *>(returnDirect{{ Type }})},
    {% endif -%}
    {"check{{ Type }}", nullptr, reinterpret_cast<void *>(check{{ Type }})},
    {"checkQuick{{ Type }}", nullptr, reinterpret_cast<void *>(check{{ Type }})},
    {% if type != "string" and (arm32 == "false" or type != "float" ) %}
        {"checkDirect{{ Type }}", nullptr, reinterpret_cast<void *>(checkDirect{{ Type }})},
    {% endif -%}
};

ANI_EXPORT ani_status ANI_Constructor(ani_vm *vm, uint32_t *result)
{
    ani_env *env;
    LOG_IF(vm->GetEnv(ANI_VERSION_1, &env) != ANI_OK, FATAL, ANI) << "Unsupported ANI_VERSION_1";

    static const char *moduleName = "EtsAniTests";

    ani_module module;

    LOG_IF(env->FindModule(moduleName, &module) != ANI_OK, FATAL, ANI) << "Not found '" << moduleName << "'";

    for (auto &m : g_{{ type }}Methods) {
        LOG_IF(env->Module_BindNativeFunctions(module, &m, 1) != ANI_OK, FATAL, ANI) << "Failed to bind function '" << m.name << "'";
    }
    *result = ANI_VERSION_1;
    return ANI_OK;
}
