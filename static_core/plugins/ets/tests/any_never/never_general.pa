# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

.language eTS

.record N <external>
.record std.core.Object <external>
.record escompat.Error <external>
.record std.core.String <external>
.function void std.core.Object._ctor_(std.core.Object a0) <ctor, external, access.function=public>
.function void escompat.Error._ctor_(escompat.Error a0, std.core.String a1) <ctor, external, access.function=public>

.record A {
    N field
}
.function void A._ctor_(A a0) <ctor> {
	call.short std.core.Object._ctor_, a0
	call.short foo
	stobj.obj a0, A.field
	return.void
}

.record B {}
.function void B._ctor_(B a0) <ctor> {
    return.void
}

.function N foo() {
	lda.str "foo() never returns"
	sta.obj v0
	initobj.short escompat.Error._ctor_:(escompat.Error,std.core.String), v0
	sta.obj v0
	throw v0
}
.function void bar(N a0) {
	return.void
}


.function i32 main() <static, access.function=public> {
try_begin_label_0:
	initobj.short A._ctor_
    ldai 0x1
    return
try_end_label_0:
jmp try_begin_label_1
try_begin_label_1:
	call.short foo
    ldai 0x2
    return
try_end_label_1:
jmp try_begin_label_2
try_begin_label_2:
	initobj.short A._ctor_:(A)
	sta.obj v1
	ldobj.obj v1, A.field
	call.acc.short bar:(N), v0, 0x0
    ldai 0x3
    return
try_end_label_2:
    ldai 0x0
    return

.catch std.core.Object, try_begin_label_0, try_end_label_0, try_begin_label_1
.catch std.core.Object, try_begin_label_1, try_end_label_1, try_begin_label_2
.catch std.core.Object, try_begin_label_2, try_end_label_2, try_end_label_2
}