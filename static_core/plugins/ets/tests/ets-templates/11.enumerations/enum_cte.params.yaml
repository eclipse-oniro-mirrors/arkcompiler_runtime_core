# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Qualification by type is mandatory
        to access the enumeration constant
    check_variants:
      - decl_data: |-
          enum Color { Red, Green, Blue }
      - decl_data: |-
          const enum Color { Red, Green, Blue }
    decl: |-
      [decl_data]
    sub_cases_logic:
      - |-
        let c = Red
      - |-
        let c = Green
      - |-
        let c = Blue

  - desc: |-
      >-
        Enumeration type enum specifies a distinct user-defined type
        with an associated set of named constants that define its
        possible values.
        If constant expression is omitted, then the value of the enum
        constant is set implicitly to an integer value.
        params: modifying enum named constants values
    check_variants:
      - decl_data: |-
          enum Color { Red, Green, Blue }
      - decl_data: |-
          const enum Color { Red, Green, Blue }
    decl: |-
      [decl_data]
    sub_cases_logic:
      - |-
        Color.Red = 2
      - |-
        Color.Green = 3
      - |-
        Color.Blue = 4

  - desc: |-
      >-
        Enumeration type enum specifies a distinct user-defined type
        with an associated set of named constants that define its
        possible values.
        If constant expression is omitted, then the value of the enum
        constant is set implicitly to an integer value.
        params: modifying enum named constants values
    check_variants:
      - decl_data: |-
          enum Color { Red, Green, Blue }
      - decl_data: |-
          const enum Color { Red, Green, Blue }
    decl: |-
      [decl_data]
    sub_cases_logic:
      - |-
        Color.Red = Color.Blue
      - |-
        Color.Green = Color.Blue
      - |-
        Color.Blue = Color.Red

  - desc: |-
      >-
        Enumeration type enum specifies a distinct user-defined type
        with an associated set of named constants that define its
        possible values.
        params: modifying enum variable by int
    check_variants:
      - decl_data: |-
          enum Color { Red, Green, Blue }
      - decl_data: |-
          const enum Color { Red, Green, Blue }
    decl: |-
      [decl_data]
    sub_cases_logic:
      - |-
        let r: Color = Color.Red
        r = 3
      - |-
        let g: Color = Color.Green
        g = 4
      - |-
        let b: Color = Color.Blue
        b = 5

  - desc: |-
      >-
        Enumeration type enum specifies a distinct user-defined type
        with an associated set of named constants that define its
        possible values.
        If constant expression is omitted, then the value of the enum
        constant is set implicitly to an integer value.
        params: modifying enum using type assertion
    check_variants:
      - decl_data: |-
          enum Color { Red, Green, Blue }
      - decl_data: |-
          const enum Color { Red, Green, Blue }
    decl: |-
      [decl_data]
    sub_cases_logic:
      - |-
        (Color as Any).Red = 2
      - |-
        (Color as Any).Green = 3
      - |-
        (Color as Any).Blue = 4

  - desc: |-
      >-
        Enumeration type enum specifies a distinct user-defined type
        with an associated set of named constants that define its
        possible values.
        If constant expression is omitted, then the value of the enum
        constant is set implicitly to an integer value.
        params: adding or reading new elements from enum
    check_variants:
      - decl_data: |-
          enum Color { Red, Green, Blue }
      - decl_data: |-
          const enum Color { Red, Green, Blue }
    decl: |-
      [decl_data]
    sub_cases_logic:
      - |-
        Color.Unexist = 5
      - |-
        let v: Color = Color.Unexist

  - desc: |-
      >-
        A compile-time error occurs if integer or string type enumeration
        constants are combined in a single enumeration.
    check_variants:
      - decl_data: |-
          enum E { A, B = "hello" }
      - decl_data: |-
          enum E { A = 5, B = "hello" }
    decl: |-
      [decl_data]
    logic: ""

  - desc: |-
      >-
        All enumeration constant names must be unique.
        Otherwise, a compile-time error occurs.
    check_variants:
      - decl_data: |-
          enum E { A = 5, A = 77 }
    decl: |-
      [decl_data]
    logic: ""
