# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Checking for enum with explicit int type constant
        for get constant from value.
    decl_variants:
      - |-
        enum Enum: int { Red, Green = 10, Blue,
          First = -2147483648, Second = 12345, Third = 2147483647,
          One = 1, one = 1, oNe = 1 }
      - |-
        const enum Enum: int { Red, Green = 10, Blue,
          First = -2147483648, Second = 12345, Third = 2147483647,
          One = 1, one = 1, oNe = 1 }
    sub_cases_logic:
      - |-
        let c = Enum.fromValue(0)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertEQ(c, Enum.Red)
        arktest.assertEQ(Enum[c], "Red")
        c = Enum.fromValue(10)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertEQ(c, Enum.Green)
        arktest.assertEQ(Enum[c], "Green")
        c = Enum.fromValue(11)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertEQ(c, Enum.Blue)
        arktest.assertEQ(Enum[c], "Blue")
        c = Enum.fromValue(-2147483648)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertEQ(c, Enum.First)
        arktest.assertEQ(Enum[c], "First")
        c = Enum.fromValue(12345)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertEQ(c, Enum.Second)
        arktest.assertEQ(Enum[c], "Second")
        c = Enum.fromValue(2147483647)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertEQ(c, Enum.Third)
        arktest.assertEQ(Enum[c], "Third")
        c = Enum.fromValue(1)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertEQ(c, Enum.oNe)
        arktest.assertEQ(Enum[c], "oNe")

  - desc: |-
      >-
        Checking for enum with explicit long type constant
        for get constant from value.
    decl_variants:
      - |-
        enum Enum: long { Red, Green = 10, Blue,
          First = -9223372036854775808, Second = 12345,
          Third = 9223372036854775807,
          One = 1, one = 1, oNe = 1 }
      - |-
        const enum Enum: long { Red, Green = 10, Blue,
          First = -9223372036854775808, Second = 12345,
          Third = 9223372036854775807,
          One = 1, one = 1, oNe = 1 }
    sub_cases_logic:
      - |-
        let c = Enum.fromValue(0)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertEQ(c, Enum.Red)
        arktest.assertEQ(Enum[c], "Red")
        c = Enum.fromValue(10)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertEQ(c, Enum.Green)
        arktest.assertEQ(Enum[c], "Green")
        c = Enum.fromValue(11)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertEQ(c, Enum.Blue)
        arktest.assertEQ(Enum[c], "Blue")
        c = Enum.fromValue(-9223372036854775808)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertEQ(c, Enum.First)
        arktest.assertEQ(Enum[c], "First")
        c = Enum.fromValue(12345)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertEQ(c, Enum.Second)
        arktest.assertEQ(Enum[c], "Second")
        c = Enum.fromValue(9223372036854775807)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertEQ(c, Enum.Third)
        arktest.assertEQ(Enum[c], "Third")
        c = Enum.fromValue(1)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertEQ(c, Enum.oNe)
        arktest.assertEQ(Enum[c], "oNe")

  - desc: |-
      >-
        Checking for enum with explicit byte type constant
        for get constant from value.
    decl_variants:
      - |-
        enum Enum: byte { Red, Green = 10, Blue,
          First = -128, Second = 123, Third = 127,
          One = 1, one = 1, oNe = 1 }
      - |-
        const enum Enum: byte { Red, Green = 10, Blue,
          First = -128, Second = 123, Third = 127,
          One = 1, one = 1, oNe = 1 }
    sub_cases_logic:
      - |-
        let c = Enum.fromValue(0)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof byte)
        arktest.assertEQ(c, Enum.Red)
        arktest.assertEQ(Enum[c], "Red")
        c = Enum.fromValue(10)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof byte)
        arktest.assertEQ(c, Enum.Green)
        arktest.assertEQ(Enum[c], "Green")
        c = Enum.fromValue(11)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof byte)
        arktest.assertEQ(c, Enum.Blue)
        arktest.assertEQ(Enum[c], "Blue")
        c = Enum.fromValue(-2147483648)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof byte)
        arktest.assertEQ(c, Enum.First)
        arktest.assertEQ(Enum[c], "First")
        c = Enum.fromValue(12345)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof byte)
        arktest.assertEQ(c, Enum.Second)
        arktest.assertEQ(Enum[c], "Second")
        c = Enum.fromValue(2147483647)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof byte)
        arktest.assertEQ(c, Enum.Third)
        arktest.assertEQ(Enum[c], "Third")
        c = Enum.fromValue(1)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof byte)
        arktest.assertEQ(c, Enum.oNe)
        arktest.assertEQ(Enum[c], "oNe")

  - desc: |-
      >-
        Checking for enum with explicit short type constant
        for get constant from value.
    decl_variants:
      - |-
        enum Enum: short { Red, Green = 10, Blue,
          First = -32768, Second = 12345, Third = 32767,
          One = 1, one = 1, oNe = 1 }
      - |-
        const enum Enum: short { Red, Green = 10, Blue,
          First = -32768, Second = 12345, Third = 32767,
          One = 1, one = 1, oNe = 1 }
    sub_cases_logic:
      - |-
        let c = Enum.fromValue(0)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof short)
        arktest.assertEQ(c, Enum.Red)
        arktest.assertEQ(Enum[c], "Red")
        c = Enum.fromValue(10)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof short)
        arktest.assertEQ(c, Enum.Green)
        arktest.assertEQ(Enum[c], "Green")
        c = Enum.fromValue(11)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof short)
        arktest.assertEQ(c, Enum.Blue)
        arktest.assertEQ(Enum[c], "Blue")
        c = Enum.fromValue(-2147483648)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof short)
        arktest.assertEQ(c, Enum.First)
        arktest.assertEQ(Enum[c], "First")
        c = Enum.fromValue(12345)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof short)
        arktest.assertEQ(c, Enum.Second)
        arktest.assertEQ(Enum[c], "Second")
        c = Enum.fromValue(2147483647)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof short)
        arktest.assertEQ(c, Enum.Third)
        arktest.assertEQ(Enum[c], "Third")
        c = Enum.fromValue(1)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof short)
        arktest.assertEQ(c, Enum.oNe)
        arktest.assertEQ(Enum[c], "oNe")

  - desc: |-
      >-
        Checking for enum with explicit double type constant
        for get constant from value.
    decl_variants:
      - |-
        enum Enum: double { Red = 1.5, Green = 10.3, Blue = 7.6,
          First = -214748.3648, Second = 123.45, Third = 2147483.647,
          One = 1.0, one = 1.0, oNe = 1.0 }
      - |-
        const enum Enum: double { Red = 1.5, Green = 10.3, Blue = 7.6,
          First = -214748.3648, Second = 123.45, Third = 2147483.647,
          One = 1.0, one = 1.0, oNe = 1.0 }
    sub_cases_logic:
      - |-
        let c = Enum.fromValue(1.5)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof double)
        arktest.assertEQ(c, Enum.Red)
        arktest.assertEQ(Enum[c], "Red")
        c = Enum.fromValue(10.3)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof double)
        arktest.assertEQ(c, Enum.Green)
        arktest.assertEQ(Enum[c], "Green")
        c = Enum.fromValue(7.6)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof double)
        arktest.assertEQ(c, Enum.Blue)
        arktest.assertEQ(Enum[c], "Blue")
        c = Enum.fromValue(-214748.3648)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof double)
        arktest.assertEQ(c, Enum.First)
        arktest.assertEQ(Enum[c], "First")
        c = Enum.fromValue(123.45)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof double)
        arktest.assertEQ(c, Enum.Second)
        arktest.assertEQ(Enum[c], "Second")
        c = Enum.fromValue(2147483.647)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof double)
        arktest.assertEQ(c, Enum.Third)
        arktest.assertEQ(Enum[c], "Third")
        c = Enum.fromValue(1.0)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof double)
        arktest.assertEQ(c, Enum.oNe)
        arktest.assertEQ(Enum[c], "oNe")

  - desc: |-
      >-
        Checking for enum with explicit float type constant
        for get constant from value.
    decl_variants:
      - |-
        enum Enum: float { Red = 1.5f, Green = 10.3f, Blue = 7.6f,
          First = -214748.3648f, Second = 123.45f, Third = 2147483.647f,
          One = 1.0f, one = 1.0f, oNe = 1.0f }
      - |-
        const enum Enum: float { Red = 1.5f, Green = 10.3f, Blue = 7.6f,
          First = -214748.3648f, Second = 123.45f, Third = 2147483.647f,
          One = 1.0f, one = 1.0f, oNe = 1.0f }
    sub_cases_logic:
      - |-
        let c = Enum.fromValue(1.5f)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof float)
        arktest.assertEQ(c, Enum.Red)
        arktest.assertEQ(Enum[c], "Red")
        c = Enum.fromValue(10.3f)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof float)
        arktest.assertEQ(c, Enum.Green)
        arktest.assertEQ(Enum[c], "Green")
        c = Enum.fromValue(7.6f)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof float)
        arktest.assertEQ(c, Enum.Blue)
        arktest.assertEQ(Enum[c], "Blue")
        c = Enum.fromValue(-214748.3648f)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof float)
        arktest.assertEQ(c, Enum.First)
        arktest.assertEQ(Enum[c], "First")
        c = Enum.fromValue(123.45f)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof float)
        arktest.assertEQ(c, Enum.Second)
        arktest.assertEQ(Enum[c], "Second")
        c = Enum.fromValue(2147483.647f)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof float)
        arktest.assertEQ(c, Enum.Third)
        arktest.assertEQ(Enum[c], "Third")
        c = Enum.fromValue(1.0f)
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof float)
        arktest.assertEQ(c, Enum.oNe)
        arktest.assertEQ(Enum[c], "oNe")

  - desc: |-
      >-
        Checking for enum with explicit string type constant
        for get constant from value.
    decl_variants:
      - |-
        enum Enum: string { Red = "reD", Green = "grEen", Blue = "Blue",
          Complex =
          "\x17\x2b\xef\u1f48\u2331\u2b03\u2eec \n \u{CAFE}\n\uBABF生日快乐!С Днём рождения!",
          One = "one", one = "one", oNe = "one" }
      - |-
        const enum Enum: string { Red = "reD", Green = "grEen", Blue = "Blue",
          Complex =
          "\x17\x2b\xef\u1f48\u2331\u2b03\u2eec \n \u{CAFE}\n\uBABF生日快乐!С Днём рождения!",
          One = "one", one = "one", oNe = "one" }
    sub_cases_logic:
      - |-
        let c = Enum.fromValue("reD")
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof string)
        arktest.assertEQ(c, Enum.Red)
        arktest.assertEQ(Enum[c], "Red")
        c = Enum.fromValue("grEen")
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof string)
        arktest.assertEQ(c, Enum.Green)
        arktest.assertEQ(Enum[c], "Green")
        c = Enum.fromValue("Blue")
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof string)
        arktest.assertEQ(c, Enum.Blue)
        arktest.assertEQ(Enum[c], "Blue")
        c = Enum.fromValue(
          "\x17\x2b\xef\u1f48\u2331\u2b03\u2eec \n \u{CAFE}\n\uBABF生日快乐!С Днём рождения!")
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof string)
        arktest.assertEQ(c, Enum.Complex)
        arktest.assertEQ(Enum[c], "Complex")
        c = Enum.fromValue("one")
        arktest.assertTrue(c instanceof Enum)
        arktest.assertTrue(c.valueOf() instanceof string)
        arktest.assertEQ(c, Enum.oNe)
        arktest.assertEQ(Enum[c], "oNe")
