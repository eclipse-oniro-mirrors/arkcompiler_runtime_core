# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        The constant which is first and has no explicit value gets
        zero value.
        A constant with an explicit value has that explicit value.
        A constant that is not the first and has no explicit value
        takes the value of the immediately preceding constant plus one.
        params: Int.MAX_VALUE + 1
    decl_variants:
      - |-
        enum Enum { first, second = 2147483648, third}
      - |-
        const enum Enum { first, second = 2147483648, third}
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), 0)
        arktest.assertEQ(Enum.second.valueOf(), 2147483648)
        arktest.assertEQ(Enum.third.valueOf(), 2147483649)

  - desc: |-
      >-
        The constant which is first and has no explicit value gets
        zero value.
        A constant with an explicit value has that explicit value.
        A constant that is not the first and has no explicit value
        takes the value of the immediately preceding constant plus one.
        params: Int.MIN_VALUE - 1
    decl_variants:
      - |-
        enum Enum { first, second = -2147483649, third}
      - |-
        const enum Enum { first, second = -2147483649, third}
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), 0)
        arktest.assertEQ(Enum.second.valueOf(), -2147483649)
        arktest.assertEQ(Enum.third.valueOf(), -2147483648)

  - desc: |-
      Values can be the same
    decl_variants:
      - |-
        enum Enum { A, B = 2147483648, C, D = B, E }
      - |-
        const enum Enum { A, B = 2147483648, C, D = B, E }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.A instanceof Enum)
        arktest.assertTrue(Enum.B instanceof Enum)
        arktest.assertTrue(Enum.C instanceof Enum)
        arktest.assertTrue(Enum.D instanceof Enum)
        arktest.assertTrue(Enum.E instanceof Enum)
        arktest.assertTrue(Enum.A.valueOf() instanceof long)
        arktest.assertTrue(Enum.B.valueOf() instanceof long)
        arktest.assertTrue(Enum.C.valueOf() instanceof long)
        arktest.assertTrue(Enum.D.valueOf() instanceof long)
        arktest.assertTrue(Enum.E.valueOf() instanceof long)
        arktest.assertEQ(Enum.A.valueOf(), 0)
        arktest.assertEQ(Enum.B.valueOf(), 2147483648)
        arktest.assertEQ(Enum.C.valueOf(), 2147483649)
        arktest.assertEQ(Enum.D.valueOf(), 2147483648)
        arktest.assertEQ(Enum.E.valueOf(), 2147483649)

  - desc: |-
      Checking for Long.MAX_VALUE in enum
    decl_variants:
      - |-
        enum Enum { first = 9223372036854775807 - 2, second, third }
      - |-
        const enum Enum { first = 9223372036854775807 - 2, second, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), 9223372036854775805)
        arktest.assertEQ(Enum.second.valueOf(), 9223372036854775806)
        arktest.assertEQ(Enum.third.valueOf(), 9223372036854775807)

  - desc: |-
      Using different integer literals
    decl_variants:
      - |-
        enum Enum { first = 0b0011, second = 0o731,
          third = 0x00FE_CAFE, fourth = 9_223_372_036_854_775_805 }
      - |-
        const enum Enum { first = 0b0011, second = 0o731,
          third = 0x00FE_CAFE, fourth = 9_223_372_036_854_775_805 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.fourth instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertTrue(Enum.fourth.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.toString(), "3")
        arktest.assertEQ(Enum.second.toString(), "473")
        arktest.assertEQ(Enum.third.toString(), "16698110")
        arktest.assertEQ(Enum.fourth.toString(), "9223372036854775805")

  - desc: |-
      >-
        A constant expression of type int or long can be used
        to set the value explicitly
    decl_variants:
      - |-
        const a: long = 0
        const b: long = 1
        const c: long = 3
        enum Enum { first = a, second = b, third = c }
      - |-
        const a: long = 0
        const b: long = 1
        const c: long = 3
        const enum Enum { first = a, second = b, third = c }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(a instanceof long)
        arktest.assertTrue(b instanceof long)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), a)
        arktest.assertEQ(Enum.second.valueOf(), b)
        arktest.assertEQ(Enum.third.valueOf(), c)

  - desc: |-
      >-
        Checking int overflow with long type usage.
        A constant expression of type int or long can be used
        to set the value explicitly.
    decl_variants:
      - |-
        const a: long = 0x7fffffff - 1
        enum Enum { first = a, second, third }
      - |-
        const a: long = 0x7fffffff - 1
        const enum Enum { first = a, second, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), 2147483646)
        arktest.assertEQ(Enum.second.valueOf(), 2147483647)
        arktest.assertEQ(Enum.third.valueOf(), 2147483648)

  - desc: |-
      >-
        Checking int overflow with long type usage.
        A constant expression of type int or long can be used
        to set the value explicitly.
    decl_variants:
      - |-
        const a: long = 0x7fffffff - 10
        const b: long = 1010
        const v: long = a + b
        enum Enum { first = a, second = b, third = first + second }
      - |-
        const a: long = 0x7fffffff - 10
        const b: long = 1010
        const v: long = a + b
        const enum Enum { first = a, second = b, third = first + second }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), a)
        arktest.assertEQ(Enum.second.valueOf(), b)
        arktest.assertEQ(Enum.third.valueOf(), v)

  - desc: |-
      >-
        Checking int overflow with long type usage.
        A constant expression of type int or long can be used
        to set the value explicitly.
    decl_variants:
      - |-
        const a: long = 0x7fffffff - 10
        const b: long = 1010
        const v: long = a + b
        enum Enum { first = a, second = b, third = a + b }
      - |-
        const a: long = 0x7fffffff - 10
        const b: long = 1010
        const v: long = a + b
        const enum Enum { first = a, second = b, third = a + b }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), a)
        arktest.assertEQ(Enum.second.valueOf(), b)
        arktest.assertEQ(Enum.third.valueOf(), v)

  - desc: |-
      >-
        Checking int overflow with long type usage.
        A constant expression of type int or long can be used
        to set the value explicitly.
    decl_variants:
      - |-
        const a: long = 5
        enum Enum { A = a << 32 }
      - |-
        const a: long = 5
        const enum Enum { A = a << 32 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.A instanceof Enum)
        arktest.assertTrue(Enum.A.valueOf() instanceof long)
        arktest.assertEQ(Enum.A, 0x5_0000_0000)

  - desc: |-
      >-
        A constant expression of type int or long can be used
        to set the value explicitly.
    decl_variants:
      - |-
        const x = 5 as long
        enum Enum { first = x, second, third }
      - |-
        const x = 5 as long
        const enum Enum { first = x, second, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), 5)
        arktest.assertEQ(Enum.second.valueOf(), 6)
        arktest.assertEQ(Enum.third.valueOf(), 7)

  - desc: |-
      >-
        A constant expression of type int or long can be used
        to set the value explicitly.
    decl_variants:
      - |-
        enum Enum { first = 5 as long, second, third }
      - |-
        const enum Enum { first = 5 as long, second, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), 5)
        arktest.assertEQ(Enum.second.valueOf(), 6)
        arktest.assertEQ(Enum.third.valueOf(), 7)

  - desc: |-
      >-
        A constant expression of type int or long can be used
        to set the value explicitly.
        Qualification by type is mandatory to access the enumeration
        constant, except enumeration constant initialization expressions.
    decl_variants:
      - |-
        enum Enum { A = 5, B = (1 << 1) * 2, C = (1 << 3) * 3,
          D = (B | C), E = ((B | C) << 2) * 3, F = A % 4,
          G = (A + F) / 3, H = (G | (F & A)), I = F ^ A,
          J = ~A, K = -B, L = -A >>> G, M = 2147483648 }
      - |-
        const enum Enum { A = 5, B = (1 << 1) * 2, C = (1 << 3) * 3,
          D = (B | C), E = ((B | C) << 2) * 3, F = A % 4,
          G = (A + F) / 3, H = (G | (F & A)), I = F ^ A,
          J = ~A, K = -B, L = -A >>> G, M = 2147483648 }
      - |-
        enum Enum { M = 2147483648, A = 5, B = (1 << 1) * 2,
          C = (1 << 3) * 3, D = (B | C), E = ((B | C) << 2) * 3,
          F = A % 4, G = (A + F) / 3, H = (G | (F & A)),
          I = F ^ A, J = ~A, K = -B, L = -A >>> G }
      - |-
        const enum Enum { M = 2147483648, A = 5, B = (1 << 1) * 2,
          C = (1 << 3) * 3, D = (B | C), E = ((B | C) << 2) * 3,
          F = A % 4, G = (A + F) / 3, H = (G | (F & A)),
          I = F ^ A, J = ~A, K = -B, L = -A >>> G }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.A instanceof Enum)
        arktest.assertTrue(Enum.B instanceof Enum)
        arktest.assertTrue(Enum.C instanceof Enum)
        arktest.assertTrue(Enum.D instanceof Enum)
        arktest.assertTrue(Enum.E instanceof Enum)
        arktest.assertTrue(Enum.F instanceof Enum)
        arktest.assertTrue(Enum.G instanceof Enum)
        arktest.assertTrue(Enum.H instanceof Enum)
        arktest.assertTrue(Enum.I instanceof Enum)
        arktest.assertTrue(Enum.J instanceof Enum)
        arktest.assertTrue(Enum.K instanceof Enum)
        arktest.assertTrue(Enum.L instanceof Enum)
        arktest.assertTrue(Enum.M instanceof Enum)
        arktest.assertTrue(Enum.A.valueOf() instanceof long)
        arktest.assertTrue(Enum.B.valueOf() instanceof long)
        arktest.assertTrue(Enum.C.valueOf() instanceof long)
        arktest.assertTrue(Enum.D.valueOf() instanceof long)
        arktest.assertTrue(Enum.E.valueOf() instanceof long)
        arktest.assertTrue(Enum.F.valueOf() instanceof long)
        arktest.assertTrue(Enum.G.valueOf() instanceof long)
        arktest.assertTrue(Enum.H.valueOf() instanceof long)
        arktest.assertTrue(Enum.I.valueOf() instanceof long)
        arktest.assertTrue(Enum.J.valueOf() instanceof long)
        arktest.assertTrue(Enum.K.valueOf() instanceof long)
        arktest.assertTrue(Enum.L.valueOf() instanceof long)
        arktest.assertTrue(Enum.M.valueOf() instanceof long)
        arktest.assertEQ(Enum.A, 5)
        arktest.assertEQ(Enum.B, 4)
        arktest.assertEQ(Enum.C, 24)
        arktest.assertEQ(Enum.D, 28)
        arktest.assertEQ(Enum.E, 336)
        arktest.assertEQ(Enum.F, 1)
        arktest.assertEQ(Enum.G, 2)
        arktest.assertEQ(Enum.H, 3)
        arktest.assertEQ(Enum.I, 4)
        arktest.assertEQ(Enum.J, ~5)
        arktest.assertEQ(Enum.J, -6)
        arktest.assertEQ(Enum.K, -4)
        arktest.assertEQ(Enum.L, -5 >>> 2)
        arktest.assertEQ(Enum.L, 1073741822)
        arktest.assertEQ(Enum.M, 2147483648)

  - desc: |-
      >-
        A constant expression of type int or long can be used
        to set the value explicitly
    decl_variants:
      - |-
        enum Enum1 { first = 2147483648, second, third }
        enum Enum2 { first = Enum1.first, second, third }
      - |-
        const enum Enum1 { first = 2147483648, second, third }
        const enum Enum2 { first = Enum1.first, second, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum1.first instanceof Enum1)
        arktest.assertTrue(Enum1.second instanceof Enum1)
        arktest.assertTrue(Enum1.third instanceof Enum1)
        arktest.assertTrue(Enum1.first.valueOf() instanceof long)
        arktest.assertTrue(Enum1.second.valueOf() instanceof long)
        arktest.assertTrue(Enum1.third.valueOf() instanceof long)
        arktest.assertEQ(Enum1.first.valueOf(), 2147483648)
        arktest.assertEQ(Enum1.second.valueOf(), 2147483649)
        arktest.assertEQ(Enum1.third.valueOf(), 2147483650)
        arktest.assertTrue(Enum2.first instanceof Enum2)
        arktest.assertTrue(Enum2.second instanceof Enum2)
        arktest.assertTrue(Enum2.third instanceof Enum2)
        arktest.assertTrue(Enum2.first.valueOf() instanceof long)
        arktest.assertTrue(Enum2.second.valueOf() instanceof long)
        arktest.assertTrue(Enum2.third.valueOf() instanceof long)
        arktest.assertEQ(Enum2.first.valueOf(), 2147483648)
        arktest.assertEQ(Enum2.second.valueOf(), 2147483649)
        arktest.assertEQ(Enum2.third.valueOf(), 2147483650)

  - desc: |-
      Using in string operator contexts
    decl_variants:
      - |-
        enum Enum { first = -1, second = 2147483648, third = -42 }
      - |-
        const enum Enum { first = -1, second = 2147483648, third = -42 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ("_" + Enum.first, "_-1")
        arktest.assertEQ("_" + Enum.second, "_2147483648")
        arktest.assertEQ("_" + Enum.third, "_-42")
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first + "_", "-1_")
        arktest.assertEQ(Enum.second + "_", "2147483648_")
        arktest.assertEQ(Enum.third + "_", "-42_")

  - desc: |-
      Using in numeric operator contexts
    decl_variants:
      - |-
        enum Enum { first = -1, second = 2147483648, third = -42 }
      - |-
        const enum Enum { first = -1, second = 2147483648, third = -42 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first, -1)
        arktest.assertEQ(Enum.second, 2147483648)
        arktest.assertEQ(Enum.third, -42)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first + 1, 0)
        arktest.assertEQ(Enum.second + 1, 2147483649)
        arktest.assertEQ(Enum.third + 1, -41)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(1 + Enum.first, 0)
        arktest.assertEQ(1 + Enum.second, 2147483649)
        arktest.assertEQ(1 + Enum.third, -41)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertTrue(Enum.first == -1)
        arktest.assertTrue(Enum.second == 2147483648)
        arktest.assertTrue(Enum.third == -42)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertTrue(Enum.first === -1)
        arktest.assertTrue(Enum.second === 2147483648)
        arktest.assertTrue(Enum.third === -42)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first + Enum.second + Enum.third, 2147483605)

  - desc: |-
      Using in numeric operator contexts
    decl_variants:
      - |-
        enum Enum { first = -1, second = 2147483648, third }
      - |-
        const enum Enum { first = -1, second = 2147483648, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first + Enum.second - Enum.third, -2)

  - desc: |-
      Checking in switch statement
    decl_variants:
      - |-
        enum Color { Red = 700, Green = 500, Blue = 2147483648 }
      - |-
        const enum Color { Red = 700, Green = 500, Blue = 2147483648 }
    sub_cases_logic:
      - |-
        let v: Color = Color.Green
        switch (v) {
          case Color.Green:
            arktest.assertTrue(v instanceof Color)
            arktest.assertTrue(v.valueOf() instanceof long)
            arktest.assertEQ(v.toString(), "500")
            break
          default:
            arktest.assertTrue(false)
        }

  - desc: |-
      Checking enumeration methods
    decl_variants:
      - |-
        enum Enum { first = -1, second = 2147483648, third }
      - |-
        const enum Enum { first = -1, second = 2147483648, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), -1)
        arktest.assertEQ(Enum.second.valueOf(), 2147483648)
        arktest.assertEQ(Enum.third.valueOf(), 2147483649)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.toString(), "-1")
        arktest.assertEQ(Enum.second.toString(), "2147483648")
        arktest.assertEQ(Enum.third.toString(), "2147483649")
