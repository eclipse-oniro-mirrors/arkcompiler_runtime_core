# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        The integer value of an enum constant is set implicitly
        if an enumeration constant specifies no value.
    decl_variants:
      - |-
        enum Enum { first, second, third }
      - |-
        const enum Enum { first, second, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ(Enum.first.valueOf(), 0)
        arktest.assertEQ(Enum.second.valueOf(), 1)
        arktest.assertEQ(Enum.third.valueOf(), 2)

  - desc: |-
      >-
        The constant which is first and has no explicit value gets
        zero value.
        A constant with an explicit value has that explicit value.
        A constant that is not the first and has no explicit value
        takes the value of the immediately preceding constant plus one.
    decl_variants:
      - |-
        enum Enum { first, second = -2147483648, third}
      - |-
        const enum Enum { first, second = -2147483648, third}
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ(Enum.first.valueOf(), 0)
        arktest.assertEQ(Enum.second.valueOf(), -2147483648)
        arktest.assertEQ(Enum.third.valueOf(), -2147483647)

  - desc: |-
      Values can be the same
    decl_variants:
      - |-
        enum Enum { first, second = -1, third }
      - |-
        const enum Enum { first, second = -1, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertTrue(Enum.first.valueOf() == 0)
        arktest.assertTrue(Enum.second.valueOf() == -1)
        arktest.assertTrue(Enum.third.valueOf() == 0)
        arktest.assertTrue(Enum.third == Enum.first)

  - desc: |-
      Checking for Int.MAX_VALUE in enum
    decl_variants:
      - |-
        enum Enum { first = 0x7fffffff - 2, second, third }
      - |-
        const enum Enum { first = 0x7fffffff - 2, second, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ(Enum.first.valueOf(), 2147483645)
        arktest.assertEQ(Enum.second.valueOf(), 2147483646)
        arktest.assertEQ(Enum.third.valueOf(), 2147483647)

  - desc: |-
      Using different integer literals
    decl_variants:
      - |-
        enum Enum { first = 0b0011, second = 0o731,
          third = 0x00FE_CAFE, fourth = 1_123_456 }
      - |-
        const enum Enum { first = 0b0011, second = 0o731,
          third = 0x00FE_CAFE, fourth = 1_123_456 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.fourth instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertTrue(Enum.fourth.valueOf() instanceof int)
        arktest.assertEQ(Enum.first.toString(), "3")
        arktest.assertEQ(Enum.second.toString(), "473")
        arktest.assertEQ(Enum.third.toString(), "16698110")
        arktest.assertEQ(Enum.fourth.toString(), "1123456")

  - desc: |-
      >-
        A constant expression of type int or long can be used
        to set the value explicitly
    decl_variants:
      - |-
        const a: int = 2147483647
        const b: int = 2147483647 - 1
        enum Enum { first = a, second = b, third = b - 1 }
      - |-
        const a: int = 2147483647
        const b: int = 2147483647 - 1
        const enum Enum { first = a, second = b, third = b - 1 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ(Enum.first.valueOf(), a)
        arktest.assertEQ(Enum.second.valueOf(), b)
        arktest.assertEQ(Enum.third.valueOf(), b - 1)

  - desc: |-
      >-
        A constant expression of type int or long can be used
        to set the value explicitly.
        Qualification by type is mandatory to access the enumeration
        constant, except enumeration constant initialization expressions.
    decl_variants:
      - |-
        enum Enum { A = 5, B = (1 << 1) * 2, C = (1 << 3) * 3,
          D = (B | C), E = ((B | C) << 2) * 3, F = A % 4,
          G = (A + F) / 3, H = (G | (F & A)), I = F ^ A,
          J = ~A, K = -B, L = -A >>> G }
      - |-
        const enum Enum { A = 5, B = (1 << 1) * 2, C = (1 << 3) * 3,
          D = (B | C), E = ((B | C) << 2) * 3, F = A % 4,
          G = (A + F) / 3, H = (G | (F & A)), I = F ^ A,
          J = ~A, K = -B, L = -A >>> G }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.A instanceof Enum)
        arktest.assertTrue(Enum.B instanceof Enum)
        arktest.assertTrue(Enum.C instanceof Enum)
        arktest.assertTrue(Enum.D instanceof Enum)
        arktest.assertTrue(Enum.E instanceof Enum)
        arktest.assertTrue(Enum.F instanceof Enum)
        arktest.assertTrue(Enum.G instanceof Enum)
        arktest.assertTrue(Enum.H instanceof Enum)
        arktest.assertTrue(Enum.I instanceof Enum)
        arktest.assertTrue(Enum.J instanceof Enum)
        arktest.assertTrue(Enum.K instanceof Enum)
        arktest.assertTrue(Enum.L instanceof Enum)
        arktest.assertTrue(Enum.A.valueOf() instanceof int)
        arktest.assertTrue(Enum.B.valueOf() instanceof int)
        arktest.assertTrue(Enum.C.valueOf() instanceof int)
        arktest.assertTrue(Enum.D.valueOf() instanceof int)
        arktest.assertTrue(Enum.E.valueOf() instanceof int)
        arktest.assertTrue(Enum.F.valueOf() instanceof int)
        arktest.assertTrue(Enum.G.valueOf() instanceof int)
        arktest.assertTrue(Enum.H.valueOf() instanceof int)
        arktest.assertTrue(Enum.I.valueOf() instanceof int)
        arktest.assertTrue(Enum.J.valueOf() instanceof int)
        arktest.assertTrue(Enum.K.valueOf() instanceof int)
        arktest.assertTrue(Enum.L.valueOf() instanceof int)
        arktest.assertEQ(Enum.A, 5)
        arktest.assertEQ(Enum.B, 4)
        arktest.assertEQ(Enum.C, 24)
        arktest.assertEQ(Enum.D, 28)
        arktest.assertEQ(Enum.E, 336)
        arktest.assertEQ(Enum.F, 1)
        arktest.assertEQ(Enum.G, 2)
        arktest.assertEQ(Enum.H, 3)
        arktest.assertEQ(Enum.I, 4)
        arktest.assertEQ(Enum.J, ~5)
        arktest.assertEQ(Enum.J, -6)
        arktest.assertEQ(Enum.K, -4)
        arktest.assertEQ(Enum.L, -5 >>> 2)
        arktest.assertEQ(Enum.L, 1073741822)

  - desc: |-
      >-
        A constant expression of type int or long can be used
        to set the value explicitly
    decl_variants:
      - |-
        enum Enum1 { first = 123, second, third }
        enum Enum2 { first = Enum1.first, second, third }
      - |-
        const enum Enum1 { first = 123, second, third }
        const enum Enum2 { first = Enum1.first, second, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum1.first instanceof Enum1)
        arktest.assertTrue(Enum1.second instanceof Enum1)
        arktest.assertTrue(Enum1.third instanceof Enum1)
        arktest.assertTrue(Enum1.first.valueOf() instanceof int)
        arktest.assertTrue(Enum1.second.valueOf() instanceof int)
        arktest.assertTrue(Enum1.third.valueOf() instanceof int)
        arktest.assertEQ(Enum1.first.valueOf(), 123)
        arktest.assertEQ(Enum1.second.valueOf(), 124)
        arktest.assertEQ(Enum1.third.valueOf(), 125)
        arktest.assertTrue(Enum2.first instanceof Enum2)
        arktest.assertTrue(Enum2.second instanceof Enum2)
        arktest.assertTrue(Enum2.third instanceof Enum2)
        arktest.assertTrue(Enum2.first.valueOf() instanceof int)
        arktest.assertTrue(Enum2.second.valueOf() instanceof int)
        arktest.assertTrue(Enum2.third.valueOf() instanceof int)
        arktest.assertEQ(Enum2.first.valueOf(), 123)
        arktest.assertEQ(Enum2.second.valueOf(), 124)
        arktest.assertEQ(Enum2.third.valueOf(), 125)

  - desc: |-
      Using in string operator contexts
    decl_variants:
      - |-
        enum Enum { first = -1, second, third = -42 }
      - |-
        const enum Enum { first = -1, second, third = -42 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ("_" + Enum.first, "_-1")
        arktest.assertEQ("_" + Enum.second, "_0")
        arktest.assertEQ("_" + Enum.third, "_-42")
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ(Enum.first + "_", "-1_")
        arktest.assertEQ(Enum.second + "_", "0_")
        arktest.assertEQ(Enum.third + "_", "-42_")

  - desc: |-
      Using in numeric operator contexts
    decl_variants:
      - |-
        enum Enum { first = -1, second, third = -42 }
      - |-
        const enum Enum { first = -1, second, third = -42 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ(Enum.first, -1)
        arktest.assertEQ(Enum.second, 0)
        arktest.assertEQ(Enum.third, -42)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ(Enum.first + 1, 0)
        arktest.assertEQ(Enum.second + 1, 1)
        arktest.assertEQ(Enum.third + 1, -41)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ(1 + Enum.first, 0)
        arktest.assertEQ(1 + Enum.second, 1)
        arktest.assertEQ(1 + Enum.third, -41)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertTrue(Enum.first == -1)
        arktest.assertTrue(Enum.second == 0)
        arktest.assertTrue(Enum.third == -42)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertTrue(Enum.first === -1)
        arktest.assertTrue(Enum.second === 0)
        arktest.assertTrue(Enum.third === -42)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ(Enum.first + Enum.second + Enum.third, -43)

  - desc: |-
      Using in numeric operator contexts
    decl_variants:
      - |-
        enum Enum { first = -1, second = 2147483646, third }
      - |-
        const enum Enum { first = -1, second = 2147483646, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ(Enum.first + Enum.second - Enum.third, -2)

  - desc: |-
      Checking in switch statement
    decl_variants:
      - |-
        enum Color { Red = 700, Green = 500, Blue = 400 }
      - |-
        const enum Color { Red = 700, Green = 500, Blue = 400 }
    sub_cases_logic:
      - |-
        let v: Color = Color.Green
        switch (v) {
          case Color.Green:
            arktest.assertTrue(v instanceof Color)
            arktest.assertTrue(v.valueOf() instanceof int)
            arktest.assertEQ(v.toString(), "500")
            break
          default:
            arktest.assertTrue(false)
        }

  - desc: |-
      Checking enumeration methods
    decl_variants:
      - |-
        enum Enum { first = -1, second = 2147483646, third }
      - |-
        const enum Enum { first = -1, second = 2147483646, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ(Enum.first.valueOf(), -1)
        arktest.assertEQ(Enum.second.valueOf(), 2147483646)
        arktest.assertEQ(Enum.third.valueOf(), 2147483647)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof int)
        arktest.assertTrue(Enum.second.valueOf() instanceof int)
        arktest.assertTrue(Enum.third.valueOf() instanceof int)
        arktest.assertEQ(Enum.first.toString(), "-1")
        arktest.assertEQ(Enum.second.toString(), "2147483646")
        arktest.assertEQ(Enum.third.toString(), "2147483647")

  - desc: |-
      Checking int overflow
    decl_variants:
      - |-
        enum Enum { first = 0x7fffffff - 1, second, third }
      - |-
        const enum Enum { first = 0x7fffffff - 1, second, third }
    sub_cases_logic:
      - |-
        arktest.assertEQ(Enum.first.valueOf(), 0x7fffffff - 1)
        arktest.assertEQ(Enum.second.valueOf(), 0x7fffffff)
        arktest.assertEQ(Enum.third.valueOf(), 0x7fffffff + 1)
      - |-
        arktest.assertEQ(Enum.first.valueOf(), 0x7fffffff - 1)
        arktest.assertEQ(Enum.second.valueOf(), 0x7fffffff)
        arktest.assertEQ(Enum.third.valueOf(), 0x7fffffff + 1)
