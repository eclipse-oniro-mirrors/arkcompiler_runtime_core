# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Enumeration type enum specifies a distinct user-defined type
        with an associated set of named constants that define its
        possible values.
        If constant expression is omitted, then the value of the enum
        constant is set implicitly to an integer value.
        The constant which is first and has no explicit value
        gets zero value.
        A constant that is not the first and has no explicit value
        takes the value of the immediately preceding constant
        plus one.
    check_variants:
      - decl_data: |-
          enum Color { Red, Green, Blue }
          enum Color2 { Red, Green, Blue }
      - decl_data: |-
          enum Color { Red, Green, Blue, }
          enum Color2 { Red, Green, Blue, }
      - decl_data: |-
          const enum Color { Red, Green, Blue }
          const enum Color2 { Red, Green, Blue }
      - decl_data: |-
          const enum Color { Red, Green, Blue, }
          const enum Color2 { Red, Green, Blue, }
    decl: |-
      [decl_data]
    sub_cases_logic:
      - |-
        let r: Color = Color.Red
        let g: Color = Color.Green
        let b: Color = Color.Blue
        arktest.assertTrue(r instanceof Color)
        arktest.assertTrue(g instanceof Color)
        arktest.assertTrue(b instanceof Color)
        arktest.assertFalse(r instanceof Color2)
        arktest.assertFalse(g instanceof Color2)
        arktest.assertFalse(b instanceof Color2)
        arktest.assertTrue(r.valueOf() instanceof int)
        arktest.assertTrue(g.valueOf() instanceof int)
        arktest.assertTrue(b.valueOf() instanceof int)
        arktest.assertEQ(r, 0)
        arktest.assertEQ(g, 1)
        arktest.assertEQ(b, 2)
      - |-
        let r = Color.Red
        let g = Color.Green
        let b = Color.Blue
        arktest.assertTrue(r instanceof Color)
        arktest.assertTrue(g instanceof Color)
        arktest.assertTrue(b instanceof Color)
        arktest.assertFalse(r instanceof Color2)
        arktest.assertFalse(g instanceof Color2)
        arktest.assertFalse(b instanceof Color2)
        arktest.assertTrue(r.valueOf() instanceof int)
        arktest.assertTrue(g.valueOf() instanceof int)
        arktest.assertTrue(b.valueOf() instanceof int)
        arktest.assertEQ(r, 0)
        arktest.assertEQ(g, 1)
        arktest.assertEQ(b, 2)
      - |-
        arktest.assertTrue(Color.Red instanceof Color)
        arktest.assertTrue(Color.Green instanceof Color)
        arktest.assertTrue(Color.Blue instanceof Color)
        arktest.assertFalse(Color.Red instanceof Color2)
        arktest.assertFalse(Color.Green instanceof Color2)
        arktest.assertFalse(Color.Blue instanceof Color2)
        arktest.assertTrue(Color.Red.valueOf() instanceof int)
        arktest.assertTrue(Color.Green.valueOf() instanceof int)
        arktest.assertTrue(Color.Blue.valueOf() instanceof int)
        arktest.assertEQ(Color.Red, 0)
        arktest.assertEQ(Color.Green, 1)
        arktest.assertEQ(Color.Blue, 2)

  - desc: |-
      >-
        Enumeration type enum specifies a distinct user-defined type
        with an associated set of named constants that define its
        possible values.
        params: modifying enum variable by other named constant
    check_variants:
      - decl_data: |-
          enum Color { Red, Green, Blue }
      - decl_data: |-
          const enum Color { Red, Green, Blue }
    decl: |-
      [decl_data]
    sub_cases_logic:
      - |-
        let r: Color = Color.Red
        r = Color.Blue
        arktest.assertEQ(Color.Red, 0)
        arktest.assertEQ(Color.Green, 1)
        arktest.assertEQ(Color.Blue, 2)
        arktest.assertEQ(r, 2)
      - |-
        let g: Color = Color.Green
        g = Color.Blue
        arktest.assertEQ(Color.Red, 0)
        arktest.assertEQ(Color.Green, 1)
        arktest.assertEQ(Color.Blue, 2)
        arktest.assertEQ(g, 2)
      - |-
        let b: Color = Color.Blue
        b = Color.Red
        arktest.assertEQ(Color.Red, 0)
        arktest.assertEQ(Color.Green, 1)
        arktest.assertEQ(Color.Blue, 2)
        arktest.assertEQ(b, 0)

  - desc: |-
      >-
        Qualification by type is mandatory to access the enumeration
        constant, except enumeration constant initialization expressions
    check_variants:
      - decl_data: |-
          enum Flags { Read, Write, ReadWrite = Read | Write }
      - decl_data: |-
          const enum Flags { Read, Write, ReadWrite = Read | Write }
    decl: |-
      [decl_data]
    logic: |-
      let r: Flags = Flags.Read
      let w: Flags = Flags.Write
      let rw: Flags = Flags.ReadWrite
      arktest.assertTrue(r instanceof Flags)
      arktest.assertTrue(w instanceof Flags)
      arktest.assertTrue(rw instanceof Flags)
      arktest.assertTrue(r.valueOf() instanceof int)
      arktest.assertTrue(w.valueOf() instanceof int)
      arktest.assertTrue(rw.valueOf() instanceof int)
      arktest.assertEQ(r, 0)
      arktest.assertEQ(w, 1)
      arktest.assertEQ(rw, 0 | 1)

  - desc: |-
      >-
        The value of an enum constant can be set as follows:
        * Explicitly to a numeric constant expression
        (expression of type int or long ) or to a constant expression
        of type string; or
        * Implicitly by omitting the constant expression.
    check_variants:
      - decl_data: |-
          enum IntEnum { A = 2, B, C }
      - decl_data: |-
          const enum IntEnum { A = 2, B, C }
    decl: |-
      [decl_data]
    logic: |-
      arktest.assertTrue(IntEnum.A instanceof IntEnum)
      arktest.assertTrue(IntEnum.B instanceof IntEnum)
      arktest.assertTrue(IntEnum.C instanceof IntEnum)
      arktest.assertTrue(IntEnum.A.valueOf() instanceof int)
      arktest.assertTrue(IntEnum.B.valueOf() instanceof int)
      arktest.assertTrue(IntEnum.C.valueOf() instanceof int)
      arktest.assertEQ(IntEnum.A, 2)
      arktest.assertEQ(IntEnum.B, 3)
      arktest.assertEQ(IntEnum.C, 4)

  - desc: |-
      >-
        The value of an enum constant can be set as follows:
        * Explicitly to a numeric constant expression
        (expression of type int or long ) or to a constant expression
        of type string; or
        * Implicitly by omitting the constant expression.
    check_variants:
      - decl_data: |-
          enum IntEnum { A = 0, B = 1 << 1, C = 1 << 2,
            D = (B | C), E = (B | C) << 1 }
      - decl_data: |-
          const enum IntEnum { A = 0, B = 1 << 1, C = 1 << 2,
            D = (B | C), E = (B | C) << 1 }
    decl: |-
      [decl_data]
    logic: |-
      arktest.assertTrue(IntEnum.A instanceof IntEnum)
      arktest.assertTrue(IntEnum.B instanceof IntEnum)
      arktest.assertTrue(IntEnum.C instanceof IntEnum)
      arktest.assertTrue(IntEnum.D instanceof IntEnum)
      arktest.assertTrue(IntEnum.E instanceof IntEnum)
      arktest.assertTrue(IntEnum.A.valueOf() instanceof int)
      arktest.assertTrue(IntEnum.B.valueOf() instanceof int)
      arktest.assertTrue(IntEnum.C.valueOf() instanceof int)
      arktest.assertTrue(IntEnum.D.valueOf() instanceof int)
      arktest.assertTrue(IntEnum.E.valueOf() instanceof int)
      arktest.assertEQ(IntEnum.A, 0)
      arktest.assertEQ(IntEnum.B, 2)
      arktest.assertEQ(IntEnum.C, 4)
      arktest.assertEQ(IntEnum.D, 6)
      arktest.assertEQ(IntEnum.E, 12)

  - desc: |-
      >-
        The value of an enum constant can be set as follows:
        * Explicitly to a numeric constant expression
        (expression of type int or long ) or to a constant expression
        of type string; or
        * Implicitly by omitting the constant expression.
    check_variants:
      - decl_data: |-
          enum LongEnum { A = 0x7FFF_FFFF_1, B, C }
      - decl_data: |-
          const enum LongEnum { A = 0x7FFF_FFFF_1, B, C }
    decl: |-
      [decl_data]
    logic: |-
      arktest.assertTrue(LongEnum.A instanceof LongEnum)
      arktest.assertTrue(LongEnum.B instanceof LongEnum)
      arktest.assertTrue(LongEnum.C instanceof LongEnum)
      arktest.assertTrue(LongEnum.A.valueOf() instanceof long)
      arktest.assertTrue(LongEnum.B.valueOf() instanceof long)
      arktest.assertTrue(LongEnum.C.valueOf() instanceof long)
      arktest.assertEQ(LongEnum.A, 0x7FFF_FFFF_1)
      arktest.assertEQ(LongEnum.B, 0x7FFF_FFFF_2)
      arktest.assertEQ(LongEnum.C, 0x7FFF_FFFF_3)

  - desc: |-
      >-
        The value of an enum constant can be set as follows:
        * Explicitly to a numeric constant expression
        (expression of type int or long ) or to a constant expression
        of type string; or
        * Implicitly by omitting the constant expression.
    check_variants:
      - decl_data: |-
          enum LongEnum { A = 0x7FFF_FFFF_1, B = 0x7FFF_FFFF_1 << 1,
            C = 0x7FFF_FFFF_1 << 2, D = (B | C), E = (B | C) << 1 }
      - decl_data: |-
          const enum LongEnum { A = 0x7FFF_FFFF_1, B = 0x7FFF_FFFF_1 << 1,
            C = 0x7FFF_FFFF_1 << 2, D = (B | C), E = (B | C) << 1 }
    decl: |-
      [decl_data]
    logic: |-
      arktest.assertTrue(LongEnum.A instanceof LongEnum)
      arktest.assertTrue(LongEnum.B instanceof LongEnum)
      arktest.assertTrue(LongEnum.C instanceof LongEnum)
      arktest.assertTrue(LongEnum.D instanceof LongEnum)
      arktest.assertTrue(LongEnum.E instanceof LongEnum)
      arktest.assertTrue(LongEnum.A.valueOf() instanceof long)
      arktest.assertTrue(LongEnum.B.valueOf() instanceof long)
      arktest.assertTrue(LongEnum.C.valueOf() instanceof long)
      arktest.assertTrue(LongEnum.D.valueOf() instanceof long)
      arktest.assertTrue(LongEnum.E.valueOf() instanceof long)
      arktest.assertEQ(LongEnum.A, 0x7FFF_FFFF_1)
      arktest.assertEQ(LongEnum.B, 0x7FFF_FFFF_1 << 1)
      arktest.assertEQ(LongEnum.C, 0x7FFF_FFFF_1 << 2)
      arktest.assertEQ(LongEnum.D,
        (0x7FFF_FFFF_1 << 1) | (0x7FFF_FFFF_1 << 2))
      arktest.assertEQ(LongEnum.E,
        ((0x7FFF_FFFF_1 << 1) | (0x7FFF_FFFF_1 << 2)) << 1)

  - desc: |-
      >-
        The value of an enum constant can be set as follows:
        * Explicitly to a numeric constant expression
        (expression of type int or long ) or to a constant expression
        of type string; or
        * Implicitly by omitting the constant expression.
    check_variants:
      - decl_data: |-
          enum Commands { Open = "fopen", Close = "fclose" }
      - decl_data: |-
          const enum Commands { Open = "fopen", Close = "fclose" }
      - decl_data: |-
          enum Commands { Open = "f" + "open",
            Close = "f" + "clo" + "se" }
      - decl_data: |-
          const enum Commands { Open = "f" + "open",
            Close = "f" + "clo" + "se" }
    decl: |-
      [decl_data]
    logic: |-
      arktest.assertTrue(Commands.Open instanceof Commands)
      arktest.assertTrue(Commands.Close instanceof Commands)
      arktest.assertTrue(Commands.Open.valueOf() instanceof string)
      arktest.assertTrue(Commands.Close.valueOf() instanceof string)
      arktest.assertEQ(Commands.Open, "fopen")
      arktest.assertEQ(Commands.Close, "fclose")

  - desc: |-
      Values can be the same
    decl: |-
      enum E { A = 5, B = 5 }
    logic: |-
      arktest.assertTrue(E.A instanceof E)
      arktest.assertTrue(E.B instanceof E)
      arktest.assertTrue(E.A.valueOf() instanceof int)
      arktest.assertTrue(E.B.valueOf() instanceof int)
      arktest.assertEQ(E.A, 5)
      arktest.assertEQ(E.B, 5)
      arktest.assertEQ(E.A, E.B)

  - desc: |-
      Values can be the same
    decl: |-
      enum E { A = "abc", B = "abc" }
    logic: |-
      arktest.assertTrue(E.A instanceof E)
      arktest.assertTrue(E.B instanceof E)
      arktest.assertTrue(E.A.valueOf() instanceof string)
      arktest.assertTrue(E.B.valueOf() instanceof string)
      arktest.assertEQ(E.A, "abc")
      arktest.assertEQ(E.B, "abc")
      arktest.assertEQ(E.A, E.B)

  - desc: |-
      >-
        Values can be the same.
        If constant expression is omitted, then the value of the enum
        constant is set implicitly to an integer value.
        The constant which is first and has no explicit value
        gets zero value.
        A constant that is not the first and has no explicit value
        takes the value of the immediately preceding constant
        plus one.
    decl: |-
      enum E { A, B, C, D, BC = B | C }
    logic: |-
      arktest.assertTrue(E.A instanceof E)
      arktest.assertTrue(E.B instanceof E)
      arktest.assertTrue(E.C instanceof E)
      arktest.assertTrue(E.D instanceof E)
      arktest.assertTrue(E.A.valueOf() instanceof int)
      arktest.assertTrue(E.B.valueOf() instanceof int)
      arktest.assertTrue(E.C.valueOf() instanceof int)
      arktest.assertTrue(E.D.valueOf() instanceof int)
      arktest.assertEQ(E.A, 0)
      arktest.assertEQ(E.B, 1)
      arktest.assertEQ(E.C, 2)
      arktest.assertEQ(E.D, 3)
      arktest.assertEQ(E.BC, 3)

  - desc: |-
      >-
        Empty enum is supported as a corner case for compatibility
        with TypeScript.
    decl: |-
      enum Empty {}
    logic: ""
