# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - { stype: boolean, sval: 'true', dtype: as byte }
  - { stype: boolean, sval: 'false', dtype2: .toInt() }
  - { stype: boolean, sval: 'true', dtype2: .toDouble() }
  - { stype: short, sval: (1).toShort(), dtype: as boolean }
  - { stype: long, sval: (1).toLong(), dtype: as boolean }
  - { stype: float, sval: 1.0f, dtype: as boolean }

  - { stype: Boolean, sval: new Boolean(), dtype2: .toShort() }
  - { stype: Boolean, sval: new Boolean(), dtype2: .toLong() }
  - { stype: Boolean, sval: new Boolean(), dtype2: f }
  - { stype: byte, sval: 1 as byte, dtype: as Boolean }
  - { stype: int, sval: (1).toInt(), dtype: as Boolean }
  - { stype: double, sval: 1.0, dtype: as Boolean }

  - { stype: int, sval: 1, dtype: as string }
  - { stype: string, sval: '"1"', dtype2: .toInt() }
  - { stype: Boolean, sval: new Boolean(), dtype: as string }
  - { stype: string, sval: '"true"', dtype: as Boolean }
  - { stype: Object, sval: new Int(), dtype: as Boolean }


  - defs: |-
      class A {}
      class B extends A {}
      class C extends A {}
    stype: B
    sval: new B()
    dtype: as C

  - defs: |-
      interface I {}
      interface J extends I {}
      interface K extends I {}
      class B implements J {}
      class C implements K {}
    stype: B
    sval: new B()
    dtype: as C

  - defs: |-
      class A {}
      class B {}
    stype: B[]
    sval: new B[1]
    dtype: as A[]

  - defs: |-
      type func = (a: int, b: int) => int;
    stype: func
    sval: '(a: int, b: int): int => { return a + b; }'
    dtype2: .toInt()

  - defs: |-
      type func = (a: int, b: int) => Int;
      function foo(a: int, b: int): Int {
        return new Int(a + b);
      }
    stype: Int
    sval: foo(1, 2)
    dtype: as func

  - defs: |-
      class A<T> {}
    stype: A<Int>
    sval: new A<Int>()
    dtype: as A<Long>

  - defs: |-
      class X {}
      class Y extends X {}
      class BB<T> {}
    stype: BB<Y>
    sval: new BB<Y>()
    dtype: as BB<X>

  - defs: |-
      class X {}
      class Y extends X {}
      class BB<T> {}
    stype: BB<X>
    sval: new BB<X>()
    dtype: as BB<Y>

#  Should be allowed as narrowing conversion.
#  - defs: |-
#      class X {}
#      class Y extends X {}
#      class BB<in T> {}
#    stype: BB<Y>
#    sval: new BB<Y>()
#    dtype: BB<X>
#
#  - defs: |-
#      class X {}
#      class Y extends X {}
#      class BB<out T> {}
#    stype: BB<X>
#    sval: new BB<X>()
#    dtype: BB<Y>

  - defs: |-
      class A {}
    stype: Object
    sval: new A()
    dtype2: .toDouble()

  - defs: |-
      interface I {}
      class A implements I {}
      class B implements I {}
    stype: I
    sval: new A()
    dtype: as B

  - defs: |-
      class A {}
    stype: Object
    sval: new A[1]
    dtype: as A[][]

  - defs: |-
      type func = (a: int, b: int) => Int;
      function foo(a: int, b: int): Int {
        return new Int(a + b);
      }
    stype: func
    sval: foo
    dtype: as Object[]
