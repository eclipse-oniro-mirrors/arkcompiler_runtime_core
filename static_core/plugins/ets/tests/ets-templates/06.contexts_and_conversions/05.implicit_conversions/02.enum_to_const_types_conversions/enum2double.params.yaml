# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          let s: number = 42
      use: |-
          // assignment-like context, variable declaration
          let v1: number = Color.Red
          arktest.assertEQ(v1, 0.0)

          let v2: number = Color.Green + Color.Blue
          arktest.assertEQ(v2, 201.0)

          let v3: number = s + Color.Blue + 33
          arktest.assertEQ(v3, 176.0)

          // assignment-like context, constant declaration
          const c1: number = Color.Red
          arktest.assertEQ(c1, 0.0)

          const c2: number = Color.Green + Color.Blue
          arktest.assertEQ(c2, 201.0)

          const c3: number = s + Color.Blue + 34
          arktest.assertEQ(c3, 177.0)

    - decl: |-
          let s: int = 42
          let v: number
      use: |-
          // assignment-like context, variable assignment
          v = Color.Red
          arktest.assertEQ(v, 0.0)

          v = Color.Green + Color.Blue
          arktest.assertEQ(v, 201.0)

          v = s + Color.Blue + 12
          arktest.assertEQ(v, 155.0)

    - decl: |-
          let s: int = 42
          class A {
              fld1: int = Color.Red
              fld2: number = Color.Blue + Color.Green
              fld3: int = s + Color.Green - 42.0
          }
      tags: 'negative, compile-only'
      use: |-
          // assignment-like context, field declaration
          let a: A = new A()
          arktest.assertEQ(a.fld1, 0.0)
          arktest.assertEQ(a.fld2, 201.0)
          arktest.assertEQ(a.fld3, 100.0)

    - decl: |-
          let s: int = 42
          class A {
              fld1: int
              fld2: int
              fld3: number
          }
      tags: 'negative, compile-only'
      use: |-
          // assignment-like context, field assignment
          let a: A = new A()
          a.fld1 = Color.Red
          a.fld2 = Color.Blue + Color.Green
          a.fld3 = s + Color.Green + 1
          arktest.assertEQ(a.fld1, 0.0)
          arktest.assertEQ(a.fld2, 201.0)
          arktest.assertEQ(a.fld3, 143.0)

    - decl: |-
          let s: int = 42
          function foo(p: int): number {
              return p + 1
          }
      tags: 'negative, compile-only'
      use: |-
          // call context, function
          arktest.assertEQ(foo(Color.Red), 1.0)
          arktest.assertEQ(foo(Color.Green + Color.Blue), 202.0)
          arktest.assertEQ(foo(s + Color.Blue + 2), 146.0)

    - decl: |-
          let s: number = 42.0
          class A {
              meth(p: number): number {
                  return p + 2.0
              }
          }
      use: |-
          // call context, method
          let a: A = new A()
          arktest.assertEQ(a.meth(Color.Red), 2.0)
          arktest.assertEQ(a.meth(Color.Green + Color.Blue), 203.0)
          arktest.assertEQ(a.meth(s + Color.Blue), 145.0)

    - decl: |-
          let s: int = 42
          class A {
              fld: int
              constructor(p: int) {
                  this.fld = p
              }
          }
      tags: 'negative, compile-only'
      use: |-
          // call context, constructor
          arktest.assertEQ(new A(Color.Red).fld, 0.0)
          arktest.assertEQ(new A(Color.Green + Color.Blue).fld, 201.0)
          arktest.assertEQ(new A(s + Color.Blue + 10).fld, 153.0)

    - decl: |-
          let s: int = 42
      tags: 'negative, compile-only'
      use: |-
          // call context, lambda
          arktest.assertEQ(((p: number): number => { return p })(Color.Red), 0.0)
          arktest.assertEQ(((p: int): int => { return p })(Color.Green + Color.Blue), 201)
          arktest.assertEQ(((p: int): number => { return p })(s + Color.Blue + 5), 148.0)

    - decl: |-
          let s: number = 42
          class A {
              fld: number
          }
      use: |-
          // composite object
          let a: A = { fld: Color.Red }
          arktest.assertEQ(a.fld, 0.0)
          a = { fld: Color.Blue + Color.Green }
          arktest.assertEQ(a.fld, 201.0)
          a = { fld: s + Color.Blue + 1 }
          arktest.assertEQ(a.fld, 144.0)

    - decl: |-
          let s: number = 42.0
      use: |-
          // composite array
          let v: number[] = [ Color.Red ]
          arktest.assertEQ(v[0], 0.0)
          v = [ Color.Green + Color.Blue, Color.Blue + s ]
          arktest.assertEQ(v[0], 201.0)
          arktest.assertEQ(v[1], 143.0)
