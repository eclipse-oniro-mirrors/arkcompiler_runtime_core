# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - val:
      - [byte,    42 as byte,   "\"42\""]

  - val:
      - [Byte,    new Byte(42 as byte),   "\"42\""]

  - val:
      - [Integral,  new Byte(42 as byte),   "\"42\""]

  - val:
      - [Integral,  new Byte(42 as byte),   "\"42\""]
  - val:
      - [float,   3.14f,      new Float(3.14f).toString()]

  - val:
      - [Float,   new Float(3.14f),       p1.toString()]

  - val:
      - [Floating,  new Float(3.14f),    p1.toString()]

  - val:
      - ["Object|null",              "null",       "\"null\""]

  - val:
      - ["Object",         "new Object()",         p1.toString()]

  - val:
      - ["boolean[]",  "[true, false]",       p1.toString()]

  - val:
      - ["FixedArray<boolean>",  "[true, false]",       p1.toString()]

  - val:
      - ["[boolean, number]",  "[true, 42]",                    p1.toString()]

  - val:
      - ["Color",  "Color.Red",   "\"0\""]
    defs: |-
      enum Color { Red, Green, Blue };

  - val:
      - ["Color",  "Color.Red",   p1.toString()]
    defs: |-
      enum Color { Red, Green, Blue };

  - val:
      - ["Foo",    "foo",   p1.toString()]
    defs: |-
      type Foo = () => int;
      function foo(): int {
        return 42;
      };

  - val:
      - [A,    new A(),   "\"[object Object]\""]
    defs: |-
      class A {}
      class B {
        public override toString(): string {
            return "B"
        }
      }

  - val:
      - ["(p: number) => number",    "(x: number): number => { return 2.0 * x; }",   p1.toString()]
