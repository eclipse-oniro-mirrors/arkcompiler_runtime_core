# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - val:
      - [byte,    42 as byte,   "42"]
      - [short,   42,  "42"]
      - [int,     42,    "42"]
      - [long,    42,   "42"]
      - [char,    "c'\\u0020'", "\" \""]
      - [boolean, "true",       "\"true\""]
      - [boolean, "false",      "\"false\""]
      - [bigint, 42n,      "\"42\""]

  - val:
      - [Byte,    new Byte(42 as byte),   "42"]
      - [Short,   new Short(42), "42"]
      - [Int,     new Int(42),     "42"]
      - [Long,    new Long(42),   "42"]
      - [Boolean, new Boolean(true),      "\"true\""]
      - [Boolean, new Boolean(false),     "\"false\""]
      - [bigint, new BigInt(42),      "\"42\""]

  - val:
      - [Integral,  new Byte(42 as byte),   "42"]
      - [Integral,  new Short(42), "42"]
      - [Integral,  new Int(42),     "\"42\""]
      - [Integral,  new Long(42),   "\"42\""]

  - val:
      - [Integral,  new Byte(42 as byte),   "42"]
      - [Integral,  new Short((42).toShort()), "42"]
      - [Integral,  new Int((42).toInt()),     "\"42\""]
      - [Integral,  new Long((42).toLong()),   "\"42\""]

  - val:
      - [float,   3.14f,      new Float(3.14f)]
      - [double,  3.14,      new Double(3.14)]
      - [float,   0.0f/0.0f,   "NaN"]
      - [double,  0.0/0.0,   "NaN"]
      - [float,   1.0f/0.0f,   "\"Infinity\""]
      - [double,  1.0/0.0,   "\"Infinity\""]
      - [float,   -1.0f/0.0f,  "\"-Infinity\""]
      - [double,  -1.0/0.0,  "\"-Infinity\""]

  - val:
      - [Float,   new Float(3.14f),       p1]
      - [Double,  new Double(3.14),     p2]
      - [Float,   new Float(0.0f/0.0f),  "NaN"]
      - [Double,  new Double(0.0/0.0),            "NaN"]
      - [Float,   new Float(1.0f/0.0f),  "\"Infinity\""]
      - [Double,  new Double(1.0/0.0),            "\"Infinity\""]
      - [Float,   new Float(-1.0f/0.0f), "\"-Infinity\""]
      - [Double,  new Double(-1.0/0.0),           "\"-Infinity\""]

  - val:
      - [Floating,  new Float(3.14f),    p1]
      - [Floating,  new Double(3.14),  p2.toString()]

  - val:
      - ["Char|undefined",           "undefined",  "undefined"]
      - ["Error|null",               "null",       "\"null\""]

  - val:
      - ["Object",         "new Object()",         p1]
      - ["Boolean",        "new Boolean()",        p2.toString()]

  - val:
      - ["char[]",     "[c'A', c'\\uFAFA']",  p1]
      - ["float[]",    "[0.1f, 0.2f, 0.3f]",  p2.toString()]

  - val:
      - ["FixedArray<char>",     "[c'A', c'\\uFAFA']",  p1]
      - ["FixedArray<int>",      "[1431655765]",        p2.toString()]

  - val:
      - ["[byte, number]",     "[1 as byte, 2]",              p1]
      - ["[double, double, number]",   "[1.0, 2.0, 3.0]",     p2.toString()]

  - val:
      - ["Color",  "Color.Red",   "0"]
      - ["Color",  "Color.Blue",  "2"]
      - ["Color",  "Color.Green", "\"1\""]
    defs: |-
      enum Color { Red, Green, Blue };

  - val:
      - ["Color",  "Color.Red",   p1]
      - ["Color",  "Color.Blue",  p2]
      - ["Color",  "Color.Green", p3.toString()]
    defs: |-
      enum Color { Red, Green, Blue };

  - val:
      - [A,    new A(),   "\"[object Object]\""]
      - [B,    new B(),   "\"B\""]
    defs: |-
      class A {}
      class B {
        public override toString(): string {
            return "B"
        }
      }

