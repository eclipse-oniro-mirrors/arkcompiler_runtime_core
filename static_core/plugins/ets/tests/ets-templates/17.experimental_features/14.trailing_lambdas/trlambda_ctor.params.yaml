# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # regular lambda cases as baseline for trailing lambda
    - decl: |-
        class A {
            static global: number = 0.0
            constructor(n: number, f: () => void) {
                f()
                A.global += n
            }
        }
      tags: []
      use: |-
        // regular lambda in constructor
        A.global = 0.0
        new A(10.0, () => { A.global = 3.0 })
        arktest.assertEQ( A.global, 13.0 )

    - decl: |-
        class A {
            static global: number = 0.0
            constructor(n: number, f?: () => void) {
                f?.()
                A.global += n
            }
        }
      tags: []
      use: |-
        // regular optional lambda in constructor
        A.global = 0.0
        new A(10.0, () => { A.global = 3.0 } )
        arktest.assertEQ( A.global, 13.0 )
        
        A.global = 0.0
        new A(10.0)
        arktest.assertEQ( A.global, 10.0 )

    # trailing lambda cases
    - decl: |-
        class A {
            static global: number = 0.0
            constructor(n: number, f: () => void) {
                f()
                A.global += n
            }
        }
      tags: [compile-only, negative]
      use: |-
        A.global = 0.0
        new A(10.0)  // trailing lambda
        {
            A.global = 3.0
        }
        arktest.assertEQ( A.global, 13.0 )

    - decl: |-
        class A {
            static global: number = 0.0
            constructor(f: () => void) {
                f()
                A.global += A.global
            }
        }
      tags: [compile-only, negative]
      use: |-
        A.global = 0.0
        new A  // trailing lambda
        {
            A.global = 3.0
        }
        arktest.assertEQ( A.global, 6.0 )
