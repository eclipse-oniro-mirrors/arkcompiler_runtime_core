# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # regular lambda cases as baseline for trailing lambda
    - decl: |-
          class A {
              static globl: number = 0.0
              static foo(n: number, f: () => void) {
                  f()
                  A.globl += n
              }
          }
      use: |-
          // regular lambda
          A.foo(10.0, () => {
              A.globl = 3.0
          })
          arktest.assertEQ( A.globl, 13.0 )

    - decl: |-
          class A {
              static globl: number = 0.0
              static foo(n: number, f?: () => void) { // optional
                  f?.()
                  A.globl += n
              }
          }
      use: |-
          // regular lambda
          A.foo(10.0, () => {
              A.globl = 3.0
          })
          arktest.assertEQ( A.globl, 13.0 )

          A.foo(10.0)
          arktest.assertEQ( A.globl, 23.0 )

    # trailing lambda cases
    - decl: |-
          class A {
              static globl: number = 0.0
              static foo(n: number, f: () => void) {
                  f()
                  A.globl += n
              }
          }
      use: |-
          A.foo(10.0)  // trailing lambda
          {
              A.globl = 3.0
          }
          arktest.assertEQ( A.globl, 13.0 )

    - decl: |-
          type FF = () => void
          class A {
              static globl: number = 0.0
              static foo(n: number, f?: FF) { // optional
                  f?.()
                  A.globl += n
              }
          }
      use: |-
          A.foo(10.0)  // trailing lambda
          {
              A.globl = 3.0
          }
          arktest.assertEQ( A.globl, 13.0 )

          A.foo(10.0)
          arktest.assertEQ( A.globl, 23.0 )

    # regular lambda cases with extra block afterwards
    - decl: |-
          class A {
              static globl: number = 0.0
              static foo(n: number, f: () => void) {
                  f()
                  A.globl += n
              }
          }
      use: |-
          // regular lambda
          A.foo(10.0, () => { A.globl = 3.0 })
          {
              A.globl = 4.0
          }
          arktest.assertEQ( A.globl, 4.0 )

    - decl: |-
          type FF = () => void
          class A {
              static globl: number = 0.0
              static foo(n: number, f?: FF) { // optional
                  f?.()
                  A.globl += n
              }
          }
      use: |-
          // regular lambda
          A.foo(10.0, () => { A.globl = 3.0 })
          {
              A.globl = 4.0
          }
          arktest.assertEQ( A.globl, 4.0 )

          A.foo(10.0) // trailing lambda
          {
              A.globl = 5.0
          }
          arktest.assertEQ( A.globl, 15.0 )

          A.foo(10.0)  // no trailing lambda
          arktest.assertEQ( A.globl, 25.0 )

    # regular lambda cases with extra block afterwards separated by a semicolon
    - decl: |-
          type FF = () => void
          class A {
              static globl: number = 0.0
              static foo(n: number, f: FF) {
                  f()
                  A.globl += n
              }
          }
      use: |-
          // not a trailing lambda, block separated by semicolon
          A.foo(10.0, () => { A.globl = 3.0 }); { A.globl = 4.0 }
          arktest.assertEQ( A.globl, 4.0 )

    - decl: |-
          class A {
              static globl: number = 0.0
              static foo(n: number, f?: () => void) { // optional
                  f?.()
                  A.globl += n
              }
          }
      use: |-
          // not a trailing lambda, block separated by semicolon
          A.foo(10.0, () => { A.globl = 3.0 }); { A.globl = 4.0 }
          arktest.assertEQ( A.globl, 4.0 )

          A.foo(10.0) { A.globl = 4.0 } // trailing lambda
          arktest.assertEQ( A.globl, 14.0 )

          A.foo(10.0); { A.globl = 4.0 } // not a trailing lambda
          arktest.assertEQ( A.globl, 4.0 )

    # case without last function parameter with extra block afterwards separated by a semicolon
    - decl: |-
          class A {
              static globl: number = 0.0
              static foo(n: number) {
                  A.globl += n
              }
          }
      use: |-
          A.globl = 1.0
          A.foo(10.0); { A.globl = 4.0 } // no last function parameter
          arktest.assertEQ( A.globl, 4.0 )

    # optional parameters before optional trailing lambda, may be skipped
    - decl: |-
        type StringProvider = () => string
        class Holder {
          static foo(val1: String, val2?: String, lf?: StringProvider): string {
              return `${val1} ${val2} ${lf?.()}`
          }
        }
      use: |-

        let result = Holder.foo('Hello', 'World', () => 'of Trailing Lambdas')
        arktest.assertEQ('Hello World of Trailing Lambdas', result);
        
        result = Holder.foo('Hello') {
        return 'of Trailing Lambdas'
        }
        arktest.assertEQ('Hello undefined of Trailing Lambdas', result);
        
        result = Holder.foo('Hello'); {
        // This is not a trailing lambda block
        }
        arktest.assertEQ('Hello undefined undefined', result);

    # optional parameters before optional trailing lambda, may be skipped
    - decl: |-
        type StringProvider = () => string
        class Holder {
          static boo(val1: String, val2: String = 'Missed', lf?: StringProvider): string {
              return `${val1} ${val2} ${lf?.()}`
          }
        }
      use: |-
        let result = Holder.boo('Hello', 'World', () => 'of Trailing Lambdas')
        arktest.assertEQ('Hello World of Trailing Lambdas', result);
        
        result = Holder.boo('Hello') {
          return 'of Trailing Lambdas'
        }
        arktest.assertEQ('Hello Missed of Trailing Lambdas', result);

        result = Holder.boo('Hello'); {
          // This is not a trailing lambda block
        }
        arktest.assertEQ('Hello Missed undefined', result);

    # optional parameters before optional trailing lambda, may be skipped
    - decl: |-
        type StringProvider = () => string
        const stub: StringProvider = () => 'I am Stub'
        class Holder {
          static roo(val1: String, val2: String = 'Missed', lf: StringProvider = stub): string {
              return `${val1} ${val2} ${lf?.()}`
          }
        }

      use: |-
        let result = Holder.roo('Hello', 'World', () => 'of Trailing Lambdas')
        arktest.assertEQ('Hello World of Trailing Lambdas', result);
        
        result = Holder.roo('Hello'); {
          // This is not a trailing lambda block
        }
        arktest.assertEQ('Hello Missed I am Stub', result);
