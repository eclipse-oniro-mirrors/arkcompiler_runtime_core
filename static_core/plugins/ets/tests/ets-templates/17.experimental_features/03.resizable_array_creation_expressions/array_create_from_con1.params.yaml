# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: Create empty Array
    logic: |-
      let a = new number[0]
      arktest.assertEQ(a.length, 0)

  - desc: |-
      Create Array with length < 0
      tags:
        - negative
        - compile-only
    decl: |-
    sub_cases_logic:
      - |-
        let a = new number[-1]
      - |-
        let a = new number[-30][10]
      - |-
        let a = new number[30][-10]

  - desc: |-
      Create Array with length fractional part != 0
      tags:
        - negative
        - compile-only
    decl: |-
    sub_cases_logic:
      - |-
        let a = new number[3.141592653589]
      - |-
        let a = new number[5][3.7]
      - |-
        let a = new number[3.7][5]

  - desc: Create Array with length < 0
    decl: |-
      function f(len: int): void {
        let a = new number[len]
      }
    logic: |-
      let expectedError = (e: Error): boolean => {
        return true
      }
      arktest.expectThrow(() => {f(-1)}, expectedError)
      arktest.expectThrow(() => {f(-30)}, expectedError)

  - desc: Create Array with different length fractional part
    decl: |-
      function f1(len: double): void {
        let a = new number[len]
      }
      function f2(len1: double, len2: double): void {
        let a = new number[len1][len2]
      }
    logic: |-
      let expectedError = (e: Error): boolean => {
        return true
      }
      f1(2.0)
      f1(35.0)
      arktest.expectThrow(() => {f1(3.141592653589)}, expectedError)
      f2(5.0, 3.0)
      arktest.expectThrow(() => {f2(5, 3.7)}, expectedError)
      arktest.expectThrow(() => {f2(3.7, 5)}, expectedError)

  - desc: Create Array with type Object
    logic: |-
      let a = new Object[30]
      arktest.assertEQ(a.length, 30)
      for (let i = 0; i < 30; i++) {
        arktest.assertTrue(a[i] instanceof Object)
      }

  - desc: Create Array with undefined default values
    sub_cases_logic:
      - |-
        let a = new (Object|undefined)[30]
        arktest.assertEQ(a.length, 30)
        for (let i = 0; i < 30; i++) {
          arktest.assertEQ(a[i], undefined)
        }
      - |-
        let a = new Any[30]
        arktest.assertEQ(a.length, 30)
        for (let i = 0; i < 30; i++) {
          arktest.assertEQ(a[i], undefined)
        }

  - desc: Create 1D Array with predefined types
    check_variants:
      - {check_type: "number", check_value: "0"}
      - {check_type: "double", check_value: "0.0"}
      - {check_type: "float", check_value: "0.0f"}
      - {check_type: "long", check_value: "0"}
      - {check_type: "int", check_value: "0"}
      - {check_type: "short", check_value: "0"}
      - {check_type: "byte", check_value: "0"}
      - {check_type: "string", check_value: "\"\""}
      - {check_type: "bigint", check_value: "0n"}
      - {check_type: "char", check_value: "c'\\u0000'"}
      - {check_type: "boolean", check_value: "false"}
    logic: |-
      let a = new [check_type][30]
      arktest.assertEQ(a.length, 30)
      arktest.assertTrue(a[0] instanceof [check_type])
      for (let i = 0; i < 30; i++) {
        arktest.assertEQ(a[i], [check_value])
      }

  - desc: Create 2D Array with predefined types
    check_variants:
      - {check_type: "number", check_value: "0"}
      - {check_type: "double", check_value: "0.0"}
      - {check_type: "float", check_value: "0.0f"}
      - {check_type: "long", check_value: "0"}
      - {check_type: "int", check_value: "0"}
      - {check_type: "short", check_value: "0"}
      - {check_type: "byte", check_value: "0"}
      - {check_type: "string", check_value: "\"\""}
      - {check_type: "bigint", check_value: "0n"}
      - {check_type: "char", check_value: "c'\\u0000'"}
      - {check_type: "boolean", check_value: "false"}
    logic: |-
      let a = new [check_type][30][10]
      arktest.assertEQ(a.length, 30)
      arktest.assertTrue(a[0][0] instanceof [check_type])
      for (let i = 0; i < 30; i++) {
        arktest.assertEQ(a[i].length, 10)
        for (let j = 0; j < 10; j++) {
          arktest.assertEQ(a[i][j], [check_value])
        }
      }

  - desc: |-
      >-
        Create Array with type that has constructor
        that can be called with no argument provided
    decl: |-
      class C {
        n: number = 0
        constructor (n: number = 5) {
          this.n = n
        }
      }
    logic: |-
      let a = new C[30]
      arktest.assertEQ(a.length, 30)
      arktest.assertTrue(a[0] instanceof C)
      for (let i = 0; i < 30; i++) {
        arktest.assertEQ((a[i] as C).n, 5)
      }

  - desc: |-
      >-
        Create Array with type that has constructor
        that can be called with no argument provided
    decl: |-
      class C {
        n: number = 0
        constructor (n?: number) {
          if (n == undefined) {
            this.n = 5
          }
        }
      }
    logic: |-
      let a = new C[30]
      arktest.assertEQ(a.length, 30)
      arktest.assertTrue(a[0] instanceof C)
      for (let i = 0; i < 30; i++) {
        arktest.assertEQ((a[i] as C).n, 5)
      }

  - desc: |-
      >-
        Create Array with type that has constructor
        that can be called with no argument provided
    decl: |-
      class C {
        n: number = 0
        constructor (...args: Any[]) {
          if  (args.length == 0) {
            this.n = 5
          }
        }
      }
    logic: |-
      let a = new C[30]
      arktest.assertEQ(a.length, 30)
      arktest.assertTrue(a[0] instanceof C)
      for (let i = 0; i < 30; i++) {
        arktest.assertEQ((a[i] as C).n, 5)
      }

  - desc: |-
      >-
        A compile-time error occurs if arrayElelementType refers to a class
        that does not contain an accessible parameterless constructor,
        or constructor with all parameters of the second form of
        optional parameters, or if type has no default value
      tags:
        - negative
        - compile-only
    decl: |-
      class C {
        constructor (n: number) {}
      }
    sub_cases_logic:
      - |-
        let a = new C[3]
