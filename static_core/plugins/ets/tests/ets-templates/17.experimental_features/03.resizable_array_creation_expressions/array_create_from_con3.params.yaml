# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: Create empty Array
    logic: |-
      let a = new int[0]((inx: int) => 3 - inx)
      arktest.assertEQ(a.length, 0)

  - desc: |-
      Create Array with length < 0
      tags:
        - negative
        - compile-only
    decl: |-
    sub_cases_logic:
      - |-
        let a = new string[-1]((inx: int) => "a")
      - |-
        let a = number int[-30][10]((inx1: int, inx2: int) => 5.7)
      - |-
        let a = number int[30][-10]((inx1: int, inx2: int) => 5.7)

  - desc: |-
      Create Array with length fractional part != 0
      tags:
        - negative
        - compile-only
    decl: |-
    sub_cases_logic:
      - |-
        let a = new string[5.7]((inx: int) => "a")
      - |-
        let a = new number[5][3.7]((inx1: int, inx2: int) => 5.7)
      - |-
        let a = new number[3.7][5]((inx1: int, inx2: int) => 5.7)

  - desc: Create Array with length < 0
    decl: |-
      function f(len: int): void {
        let a = new string[len]((inx: int) => "a")
      }
    logic: |-
      let res: boolean = false
      let expectedError = (e: Error): boolean => {
        return true
      }
      arktest.expectThrow(() => {f(-1)}, expectedError)
      arktest.expectThrow(() => {f(-30)}, expectedError)

  - desc: Create Array with different length fractional part
    decl: |-
      function f1(len: double): void {
        let a = new number[len]((inx: int) => 5.7)
      }
      function f2(len1: double, len2: double): void {
        let a = new number[len1][len2]((inx1: int, inx2: int) => 5.7)
      }
    logic: |-
      let expectedError = (e: Error): boolean => {
        return true
      }
      f1(2.0)
      f1(35.0)
      arktest.expectThrow(() => {f1(3.141592653589)}, expectedError)
      f2(5.0, 3.0)
      arktest.expectThrow(() => {f2(5, 3.7)}, expectedError)
      arktest.expectThrow(() => {f2(3.7, 5)}, expectedError)

  - desc: Create Array with predefined types
    check_variants:
      - {check_type: "Any"}
      - {check_type: "Object"}
    logic: |-
      let a = new [check_type][30]((inx: int) => new Object)
      arktest.assertEQ(a.length, 30)
      for (let i = 0; i < 30; i++) {
        arktest.assertTrue(a[i] instanceof Object)
      }

  - desc: Create Array with predefined types
    check_variants:
      - {check_type: "Any", check_value: "undefined"}
      - {check_type: "Any", check_value: "null"}
    logic: |-
      let a = new [check_type][30]((inx: int) => [check_value])
      arktest.assertEQ(a.length, 30)
      arktest.assertTrue(a[0] instanceof [check_type])
      for (let i = 0; i < 30; i++) {
        arktest.assertEQ(a[i], [check_value])
      }

  - desc: Create Array with predefined types
    check_variants:
      - {check_type: "Any"}
      - {check_type: "Object"}
    sub_cases_logic:
      - |-
        let v: int = 10
        let a = new [check_type][30]((inx: int) => v + inx)
        arktest.assertEQ(a.length, 30)
        arktest.assertTrue(a[0] instanceof int)
        for (let i = 0; i < 30; i++) {
          arktest.assertEQ(a[i], v + i)
        }
      - |-
        let b: string[] = ["a", "b", "c", "d"]
        let a = new [check_type][4]((inx: int) => "_" + b[inx])
        arktest.assertEQ(a.length, 4)
        arktest.assertEQ(b.length, 4)
        arktest.assertTrue(a[0] instanceof string)
        for (let i = 0; i < 4; i++) {
          arktest.assertEQ(a[i], "_" + b[i])
        }

  - desc: Create 1D Array with predefined types
    check_variants:
      - {check_type: "number", v_value: "3"}
      - {check_type: "double", v_value: "5.7"}
      - {check_type: "float", v_value: "1.5f"}
      - {check_type: "long", v_value: "9223372036854775000"}
      - {check_type: "int", v_value: "123123"}
      - {check_type: "short", v_value: "325"}
      - {check_type: "byte", v_value: "37"}
    logic: |-
      let v: [check_type] = [v_value]
      let a = new [check_type][30]((inx: int): [check_type] => v + inx)
      arktest.assertEQ(a.length, 30)
      arktest.assertTrue(a[0] instanceof [check_type])
      for (let i = 0; i < 30; i++) {
        let check_value: [check_type] = v + i
        arktest.assertEQ(a[i], check_value)
      }

  - desc: Create 2D Array with predefined types
    check_variants:
      - {check_type: "number", v_value: "3"}
      - {check_type: "double", v_value: "5.7"}
      - {check_type: "float", v_value: "1.5f"}
      - {check_type: "long", v_value: "9223372036854775000"}
      - {check_type: "int", v_value: "123123"}
      - {check_type: "short", v_value: "325"}
      - {check_type: "byte", v_value: "37"}
    logic: |-
      let v: [check_type] = [v_value]
      let a = new [check_type][30][10]((inx1: int, inx2: int): [check_type] => v + inx1 + inx2)
      arktest.assertEQ(a.length, 30)
      arktest.assertTrue(a[0][0] instanceof [check_type])
      for (let i = 0; i < 30; i++) {
        arktest.assertEQ(a[i].length, 10)
        for (let j = 0; j < 10; j++) {
          let check_value: [check_type] = v + i + j
          arktest.assertEQ(a[i][j], check_value)
        }
      }

  - desc: Create Array with type string
    logic: |-
      let b: string[] = ["a", "b", "c", "d"]
      let a = new string[4]((inx: int): string => "_" + b[inx])
      arktest.assertEQ(a.length, 4)
      arktest.assertEQ(b.length, 4)
      arktest.assertTrue(a[0] instanceof string)
      for (let i = 0; i < 4; i++) {
        arktest.assertEQ(a[i], "_" + b[i])
      }

  - desc: Create Array with type bigint
    logic: |-
      let v: bigint = "12345678901234567890n"
      let a = new bigint[30]((inx: int) => v + BigInt(inx))
      arktest.assertEQ(a.length, 30)
      arktest.assertTrue(a[0] instanceof bigint)
      for (let i = 0; i < 30; i++) {
        arktest.assertEQ(a[i], v + BigInt(i))
      }

  - desc: Create Array with type boolean
    logic: |-
      let v: int = 3
      let a = new boolean[30]((inx: int): boolean => ((v + inx) % 2) == 1 ? true : false)
      arktest.assertEQ(a.length, 30)
      arktest.assertTrue(a[0] instanceof boolean)
      for (let i = 0; i < 30; i++) {
        arktest.assertEQ(a[i], ((v + i) % 2) == 1 ? true : false)
      }

  - desc: |-
      Create Array with wrong type values
      tags:
        - negative
        - compile-only
    check_variants:
      - {check_type: "Object", check_value: "undefined"}
      - {check_type: "Object", check_value: "null"}
      - {check_type: "number", check_value: "\"abc\""}
      - {check_type: "int", check_value: "5.7"}
      - {check_type: "string", check_value: "123"}
      - {check_type: "boolean", check_value: "\"true\""}
    logic: |-
      let a = new [check_type][30]((inx: int) => [check_value])

  - desc: Create Array with covariant subtypes
    decl: |-
      class Animal {
        name: string = ""
      }
      class Dog extends Animal {
        override name: string = "dog"
        bark(): string {
          return this.name
        }
      }
      class Cat extends Animal {
        override name: string = "cat"
      }
    sub_cases_logic:
      - |-
        let v: int = 1
        let a = new Animal[30]((inx: int) => {name: "animal" + (v + inx).toString()} as Animal)
        arktest.assertEQ(a.length, 30)
        arktest.assertTrue(a[0] instanceof Animal)
        for (let i = 0; i < 30; i++) {
          arktest.assertEQ((a[i] as Animal).name, "animal" + (v + i).toString())
        }
        let b = new Animal[30]((inx: int) => {name: "dog" + (v + inx).toString()} as Dog)
        arktest.assertEQ(b.length, 30)
        arktest.assertTrue(b[0] instanceof Dog)
        for (let i = 0; i < 30; i++) {
          arktest.assertEQ((b[i] as Dog).bark(), "dog" + (v + i).toString())
        }
        let c = new Animal[30]((inx: int) => {name: "cat" + (v + inx).toString()} as Cat)
        arktest.assertEQ(c.length, 30)
        arktest.assertTrue(c[0] instanceof Cat)
        for (let i = 0; i < 30; i++) {
          arktest.assertEQ((c[i] as Cat).name, "cat" + (v + i).toString())
        }
      - |-
        let v: int = 1
        let a = new Animal[30]((inx: int): Animal => {
          let id = (v + inx) % 3
          switch (id) {
            case 1:
              return new Dog
            case 2:
              return new Cat
            default:
              return new Animal
          }
        })
        arktest.assertEQ(a.length, 30)
        for (let i = 0; i < 30; i++) {
          let id = (v + i) % 3
          switch (id) {
            case 1:
              arktest.assertTrue(a[i] instanceof Dog)
              arktest.assertEQ((a[i] as Dog).bark(), "dog")
              break
            case 2:
              arktest.assertTrue(a[i] instanceof Cat)
              arktest.assertEQ((a[i] as Cat).name, "cat")
              break
            default:
              arktest.assertFalse(a[i] instanceof Dog)
              arktest.assertFalse(a[i] instanceof Cat)
              arktest.assertEQ((a[i] as Animal).name, "")
          }
        }

  - desc: |-
      Create Array with not covariant subtypes
      tags:
        - negative
        - compile-only
    decl: |-
      class Animal {}
      class Dog extends Animal {}
      class Cat extends Animal {}
    sub_cases_logic:
      - |-
        let a = new Dog[30]((inx: int) => new Animal)
      - |-
        let a = new Dog[30]((inx: int) => new Cat)

  - desc: Create Array with covariant function subtypes
    decl: |-
      class A {
        v: int
        constructor(v: int = 0) {
          this.v = v
        }
      }
      class B extends A {
        constructor(v: int = 0) {
          super(-v)
        }
        f(): int {
          return 13
        }
      }
      type HandlerBInt = (a: B, b: int) => A
      type HandlerAInt = (a: A, b: int) => B
      const handlerAInt: HandlerAInt = (a: A, b: int): B => {
        if (a instanceof B){
          return new B(a.f() + b)
        } else {
          return new B(b)
        }
      }
      type HandlerA = (a: A) => A
      const handlerA: HandlerA = (a: A): A => {
        if (a instanceof B){
          return new A(a.f())
        } else {
          return new A
        }
      }
      type HandlerNothing = () => B
      const handlerNothing: HandlerNothing = (): B => {
        return new B(567)
      }
    sub_cases_logic:
      - |-
        let a = new HandlerBInt[30]((inx: int) => handlerAInt)
        arktest.assertEQ(a.length, 30)
        for (let i = 0; i < 30; i++) {
          arktest.assertEQ((a[i](new B, 7).v, -20)
        }
        let b = new HandlerBInt[30]((inx: int) => handlerA)
        arktest.assertEQ(b.length, 30)
        for (let i = 0; i < 30; i++) {
          arktest.assertEQ((b[i](new B, 7).v, 13)
        }
        let c = new HandlerBInt[30]((inx: int) => handlerNothing)
        arktest.assertEQ(c.length, 30)
        for (let i = 0; i < 30; i++) {
          arktest.assertEQ((c[i](new B, 7).v, -567)
        }
      - |-
        let v: int = 1
        let a = new HandlerBInt[30]((inx: int): HandlerBInt => {
          let id = (v + inx) % 3
          switch (id) {
            case 1:
              return handlerAInt
            case 2:
              return handlerA
            default:
              return handlerNothing
          }
        })
        arktest.assertEQ(a.length, 30)
        for (let i = 0; i < 30; i++) {
          let id = (v + i) % 3
          switch (id) {
            case 1:
              arktest.assertEQ((a[i](new B, 7).v, -20)
              break
            case 2:
              arktest.assertEQ((a[i](new B, 7).v, 13)
              break
            default:
              arktest.assertEQ((a[i](new B, 7).v, -567)
          }
        }

  - desc: |-
      Create Array with not covariant function subtypes
      tags:
        - negative
        - compile-only
    decl: |-
      class A {}
      class B extends A {}
      class C extends A {}
      type HandlerReq = (a: B, b: int) => B
      type HandlerCInt = (a: C, b: int) => B
      const handlerCInt: HandlerCInt = (a: C, b: int): B => {
        return new B
      }
      type HandlerBInt = (a: B, b: int) => A
      const handlerBInt: HandlerBInt = (a: B, b: int): A => {
        return new B
      }
      type HandlerB = (a: B) => A
      const handlerB: HandlerB = (a: B): A => {
        return new B
      }
      type HandlerBIntInt = (a: B, b: int, c: int) => B
      const handlerBIntInt: HandlerBIntInt = (a: B, b: int, c: int): B => {
        return new B
      }
      type HandlerNothing = () => C
      const handlerNothing: HandlerNothing = (): C => {
        return new C
      }
    sub_cases_logic:
      - |-
        let a = new HandlerReq[30]((inx: int) => handlerCInt)
      - |-
        let a = new HandlerReq[30]((inx: int) => handlerBInt)
      - |-
        let a = new HandlerReq[30]((inx: int) => handlerB)
      - |-
        let a = new HandlerReq[30]((inx: int) => handlerBIntInt)
      - |-
        let a = new HandlerReq[30]((inx: int) => handlerNothing)
