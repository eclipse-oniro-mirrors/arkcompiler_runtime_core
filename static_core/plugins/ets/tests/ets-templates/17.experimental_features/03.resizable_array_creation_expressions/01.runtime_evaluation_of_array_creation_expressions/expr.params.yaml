# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - defs: |-
          let res: string = ""
          function foo(p: int): int {
              res += p
              return p
          }
      use: |-
          res = ""
          let v: number[][][][][] = new number[foo(1)][foo(2)][foo(3)][foo(4)][foo(5)]
          arktest.assertEQ(res, "12345")
          arktest.assertTrue(v instanceof Array)
          arktest.assertTrue(v[0][0][0][0][0] instanceof number)

    - defs: |-
          type UT = number[][][][][] | null
          let res: string = ""
          function foo(p: int): int {
              res += p
              if (p == 3) {
                  throw new Error()
              }
              return p
          }
      use: |-
          res = ""
          let v: UT = null
          let expectedError = (e: Error): boolean => {
              return (e instanceof Error)
          }
          arktest.expectThrow(() => {v = new number[foo(1)][foo(2)][foo(3)][foo(4)][foo(5)]}, expectedError)
          arktest.assertEQ(res, "123")
          arktest.assertEQ(v, null)

    - desc: |- # 24859 undefined register, Register type conflict
      defs: |-
          type UT = number[][][][][] | null
          let res: string = ""
          function foo(p: int): int {
              res += p
              if (p == 3) {
                  throw new Error()
              }
              return p
          }
      use: |-
          res = ""
          let v: UT = null
          let check: boolean = false
          try {
              v = new number[foo(1)][foo(2)][foo(3)][foo(4)][foo(5)]
          } catch (e) {
              // expected
              check = true
          }
          arktest.assertEQ(check, true)
          arktest.assertEQ(res, "123")
          arktest.assertEQ(v, null)

    - defs: |-
          type UT = number[][][][][] | null
          let res: string = ""
          function foo(p: int): int {
              res += p
              return p
          }
      use: |-
          res = ""
          let v: UT = null
          let expectedError = (e: Error): boolean => {
              return (e instanceof NegativeArraySizeError)
          }
          arktest.expectThrow(() => {v = new number[foo(1)][foo(2)][foo(3)][foo(-4)][foo(5)]}, expectedError)
          arktest.assertEQ(res, "123-45")
          arktest.assertEQ(v, null)

    - defs: |-
          type UT = number[][][][][] | null
          let res: string = ""
          function foo(p: int): int {
              res += p
              return p
          }
      use: |-
          res = ""
          let v: UT = null
          let expectedError = (e: Error): boolean => {
              return (e instanceof NegativeArraySizeError)
          }
          arktest.expectThrow(() => {v = new number[foo(-1)][foo(-2)][foo(-3)][foo(4)][foo(-5)]}, expectedError)
          arktest.assertEQ(res, "-1-2-34-5")
          arktest.assertEQ(v, null)

    - defs: |-
          type UT = number[][][][][] | null
          let res: string = ""
          function foo(p: int): int {
              res += p
              if (p == 3) {
                  throw new Error()
              }
              return p
          }
      use: |-
          res = ""
          let v: UT = null
          let expectedError = (e: Error): boolean => {
              return (e instanceof Error)
          }
          arktest.expectThrow(() => {v = new number[foo(-1)][foo(-2)][foo(3)][foo(4)][foo(-5)]}, expectedError)
          arktest.assertEQ(res, "-1-23")
          arktest.assertEQ(v, null)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int
              public constructor() {
                  this.fld = cntr++
              }
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[] = new A[foo(100)]
          arktest.assertEQ(res, "100")
          arktest.assertEQ(cntr, 100)
          arktest.assertTrue(v[99] instanceof A)
          arktest.assertEQ(v[99].fld, 99)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int
              public constructor() {
                  this.fld = cntr++
              }
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[][] = new A[foo(10)][foo(10)]
          arktest.assertEQ(res, "1010")
          arktest.assertEQ(cntr, 100)
          arktest.assertTrue(v[9][9] instanceof A)
          arktest.assertEQ(v[9][9].fld, 99)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int = cntr++
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[] = new A[foo(42)]
          arktest.assertEQ(res, "42")
          arktest.assertEQ(cntr, 42)
          arktest.assertTrue(v[41] instanceof A)
          arktest.assertEQ(v[41].fld, 41)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int = cntr
              constructor() {
                  this.fld = cntr++
              }
              constructor(p: int) {
                  this.fld = p
              }
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[] = new A[foo(42)]
          arktest.assertEQ(res, "42")
          arktest.assertEQ(cntr, 42)
          arktest.assertTrue(v[41] instanceof A)
          arktest.assertEQ(v[41].fld, 41)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int = 0
              constructor(p?: int) {
                  if (p == undefined) {
                      this.fld = cntr++
                  }
              }
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[] = new A[foo(42)]
          arktest.assertEQ(res, "42")
          arktest.assertEQ(cntr, 42)
          arktest.assertTrue(v[41] instanceof A)
          arktest.assertEQ(v[41].fld, 41)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int = 0
              constructor(p: int = 1) {
                  this.fld = cntr
                  cntr += p
              }
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[] = new A[foo(42)]
          arktest.assertEQ(res, "42")
          arktest.assertEQ(cntr, 42)
          arktest.assertTrue(v[41] instanceof A)
          arktest.assertEQ(v[41].fld, 41)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int = 0
              constructor(p1?: int, p2?: int) {
                  if ((p1 == undefined) && (p2 == undefined)) {
                      this.fld = cntr++
                  }
              }
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[] = new A[foo(42)]
          arktest.assertEQ(res, "42")
          arktest.assertEQ(cntr, 42)
          arktest.assertTrue(v[41] instanceof A)
          arktest.assertEQ(v[41].fld, 41)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int = 0
              constructor(p1: int = 1, p2?: int) {
                  if (p2 == undefined) {
                      this.fld = cntr
                      cntr += p1
                  }
              }
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[] = new A[foo(42)]
          arktest.assertEQ(res, "42")
          arktest.assertEQ(cntr, 42)
          arktest.assertTrue(v[41] instanceof A)
          arktest.assertEQ(v[41].fld, 41)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int = 0
              constructor(p1?: int, p2: int = 1) {
                  if (p1 == undefined) {
                      this.fld = cntr
                      cntr += p2
                  }
              }
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[] = new A[foo(42)]
          arktest.assertEQ(res, "42")
          arktest.assertEQ(cntr, 42)
          arktest.assertTrue(v[41] instanceof A)
          arktest.assertEQ(v[41].fld, 41)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int = 0
              constructor(...args: Any[]) {
                  if (args.length == 0) {
                      this.fld = cntr++
                  }
              }
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[] = new A[foo(42)]
          arktest.assertEQ(res, "42")
          arktest.assertEQ(cntr, 42)
          arktest.assertTrue(v[41] instanceof A)
          arktest.assertEQ(v[41].fld, 41)

    - use: |-
          let v: int[] = new int[33]  // initialized with 0
          for (let i = 0; i < 33; i++) {
              arktest.assertEQ(v[i], 0)
          }

    - use: |-
          let v: number[] = new number[33]  // initialized with 0.0
          for (let i = 0; i < 33; i++) {
              arktest.assertEQ(v[i], 0.0)
          }

    - use: |-
          let v: char[] = new char[33]  // initialized with c'\u0000'
          for (let i = 0; i < 33; i++) {
              arktest.assertEQ(v[i], c'\u0000')
          }

    - use: |-
          let v: boolean[] = new boolean[33]  // initialized with false
          for (let i = 0; i < 33; i++) {
              arktest.assertEQ(v[i], false)
          }

    - defs: |-
          type EN = Error|undefined
      use: |-
          let v: EN[] = new EN[33]  // initialized with undefined
          for (let i = 0; i < 33; i++) {
              arktest.assertEQ(v[i], undefined)
          }

    - defs: |-
          type EU = Error|undefined
      use: |-
          let v: EU[] = new EU[33]  // initialized with undefined
          for (let i = 0; i < 33; i++) {
              arktest.assertEQ(v[i], undefined)
          }
