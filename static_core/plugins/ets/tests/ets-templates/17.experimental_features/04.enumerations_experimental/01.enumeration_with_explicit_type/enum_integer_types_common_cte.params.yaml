# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

check_types:
  - "int"
  - "long"
  - "byte"
  - "short"

cases:
  - desc: |-
      Same enum name
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Color: [check_type] { Red, Green, Blue }
        enum Color: [check_type] { Red, Green, Blue }
      - |-
        const enum Color: [check_type] { Red, Green, Blue }
        const enum Color: [check_type] { Red, Green, Blue }
      - |-
        enum Color: [check_type] { Red, Green, Blue }
        const enum Color: [check_type] { Red, Green, Blue }
      - |-
        const enum Color: [check_type] { Red, Green, Blue }
        enum Color: [check_type] { Red, Green, Blue }

  - desc: |-
      Not a constant expression
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        const a: [check_type] = 123
        const b: [check_type] = 124
        let c: [check_type] = 125
        enum Enum: [check_type] { first = a, second = b, third = c }
      - |-
        const a: [check_type] = 123
        const b: [check_type] = 124
        let c: [check_type] = 125
        const enum Enum: [check_type] { first = a, second = b, third = c }
      - |-
        enum Enum1: [check_type] { first = 42, second }
        enum Enum2: [check_type] { first = Enum1.first.valueOf(),
          second }
      - |-
        const enum Enum1: [check_type] { first = 42, second }
        const enum Enum2: [check_type] { first = Enum1.first.valueOf(),
          second }

  - desc: |-
      Wrong init type
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first = 1.2 }
      - |-
        const enum Enum: [check_type] { first = 1.2 }
      - |-
        enum Enum: [check_type] { first = 1.2f }
      - |-
        const enum Enum: [check_type] { first = 1.2f }
      - |-
        enum Enum: [check_type] { first = "abc" }
      - |-
        const enum Enum: [check_type] { first = "abc" }
      - |-
        enum Enum: [check_type] { first = false }
      - |-
        const enum Enum: [check_type] { first = false }

  - desc: |-
      Wrong type
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum1: [check_type] { first = 42, second }
        enum Enum2: [check_type] { first = 42, second }
      - |-
        const enum Enum1: [check_type] { first = 42, second }
        const enum Enum2: [check_type] { first = 42, second }
    logic: |-
      let v: Enum2 = Enum1.first

  - desc: |-
      Not allowed conversion
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum1: [check_type] { first = -1, second,
          third = -42 }
        enum Enum2: [check_type] { first = -1, second,
          third = -42 }
      - |-
        const enum Enum1: [check_type] { first = -1, second,
          third = -42 }
        const enum Enum2: [check_type] { first = -1, second,
          third = -42 }
    logic: |-
      let v: Enum1 = Enum1.first
      let q: Enum2 = v as Enum2

  - desc: |-
      Not allowed conversion
    check_variants:
      - {check_type: "int", enum1_type: "long", enum1_value: "2147483648"}
      - {check_type: "short", enum1_type: "int", enum1_value: "32768"}
      - {check_type: "byte", enum1_type: "short", enum1_value: "128"}
    decl_variants:
      - |-
        enum Enum1: [enum1_type] { first = [enum1_value], second,
          third }
        enum Enum2: [check_type] { first = Enum1.first, second,
          third }
      - |-
        const enum Enum1: [enum1_type] { first = [enum1_value], second,
          third }
        const enum Enum2: [check_type] { first = Enum1.first, second,
          third }

  - desc: |-
      Not allowed conversion
    check_variants:
      - {check_type: "int", c_type: "long", c_value: "2147483648"}
      - {check_type: "short", c_type: "int", c_value: "32768"}
      - {check_type: "byte", c_type: "short", c_value: "128"}
    decl_variants:
      - |-
        const c: [c_type] = [c_value]
        enum Enum: [check_type] { first, second, third = c }
      - |-
        const c: [c_type] = [c_value]
        const enum Enum: [check_type] { first, second, third = c }

  - desc: |-
      Checking integer type overflow on max value
    check_variants:
      - {check_type: "long", max_value: "9223372036854775807"}
      - {check_type: "int", max_value: "2147483647"}
      - {check_type: "short", max_value: "32767"}
      - {check_type: "byte", max_value: "127"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first = [max_value] - 1, second,
          third }
      - |-
        const enum Enum: [check_type] { first = [max_value] - 1, second,
          third }

  - desc: |-
      Checking integer type overflow on max value
    check_variants:
      - {check_type: "long", max_value: "9223372036854775807"}
      - {check_type: "int", max_value: "2147483647"}
      - {check_type: "short", max_value: "32767"}
      - {check_type: "byte", max_value: "127"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first = [max_value] - 10, second,
          third = first + 110 }
      - |-
        const enum Enum: [check_type] { first = [max_value] - 10, second,
          third = first + 110 }

  - desc: |-
      Checking integer type overflow on min value
    check_variants:
      - {check_type: "long", min_value: "-9223372036854775808"}
      - {check_type: "int", min_value: "-2147483648"}
      - {check_type: "short", min_value: "-32768"}
      - {check_type: "byte", min_value: "-128"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first, second = [min_value],
          third = second - 1 }
      - |-
        const enum Enum: [check_type] { first, second = [min_value],
          third = second - 1 }

  - desc: |-
      Checking integer type overflow on min value
    check_variants:
      - {check_type: "long", min_value: "-9223372036854775808"}
      - {check_type: "int", min_value: "-2147483648"}
      - {check_type: "short", min_value: "-32768"}
      - {check_type: "byte", min_value: "-128"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first = [min_value] + 10, second,
          third = first - 110}
      - |-
        const enum Enum: [check_type] { first = [min_value] + 10, second,
          third = first - 110}
