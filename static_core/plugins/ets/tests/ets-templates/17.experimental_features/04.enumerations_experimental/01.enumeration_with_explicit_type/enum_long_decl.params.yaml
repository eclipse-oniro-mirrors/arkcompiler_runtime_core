# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
        Checking int overflow on Int.MIN_VALUE in enum
    decl_variants:
      - |-
        enum Enum: long { first, second = -2147483648, third = second - 1}
      - |-
        const enum Enum: long { first, second = -2147483648, third = second - 1}
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), 0)
        arktest.assertEQ(Enum.second.valueOf(), -2147483648)
        arktest.assertEQ(Enum.third.valueOf(), -2147483649)

  - desc: |-
      Checking int overflow on Int.MIN_VALUE in enum
    decl_variants:
      - |-
        enum Enum: long { first, second = -2147483649, third}
      - |-
        const enum Enum: long { first, second = -2147483649, third}
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), 0)
        arktest.assertEQ(Enum.second.valueOf(), -2147483649)
        arktest.assertEQ(Enum.third.valueOf(), -2147483648)

  - desc: |-
      Checking int overflow on Int.MAX_VALUE in enum
    decl_variants:
      - |-
        enum Enum: long { first = 0x7fffffff - 1, second, third }
      - |-
        const enum Enum: long { first = 0x7fffffff - 1, second, third }
      - |-
        const a: long = 0x7fffffff - 1
        enum Enum: long { first = a, second, third }
      - |-
        const a: long = 0x7fffffff - 1
        const enum Enum: long { first = a, second, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), 0x7ffffffe)
        arktest.assertEQ(Enum.second.valueOf(), 0x7fffffff)
        arktest.assertEQ(Enum.third.valueOf(), 2147483648)

  - desc: |-
      Checking int overflow on Int.MAX_VALUE in enum
    decl_variants:
      - |-
        const a: long = 0x7fffffff - 10
        const b: long = 1010
        const v: long = a + b
        enum Enum: long { first = a, second = b, third = first + second }
      - |-
        const a: long = 0x7fffffff - 10
        const b: long = 1010
        const v: long = a + b
        enum Enum: long { first = 0x7fffffff - 10, second = 1010, third = first + second }
      - |-
        const a: long = 0x7fffffff - 10
        const b: long = 1010
        const v: long = a + b
        const enum Enum: long { first = a, second = b, third = first + second }
      - |-
        const a: long = 0x7fffffff - 10
        const b: long = 1010
        const v: long = a + b
        const enum Enum: long { first = 0x7fffffff - 10, second = 1010, third = first + second }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), a)
        arktest.assertEQ(Enum.second.valueOf(), b)
        arktest.assertEQ(Enum.third.valueOf(), v)

  - desc: |-
      Checking int overflow on Int.MAX_VALUE in enum
    decl_variants:
      - |-
        const a: long = 0x7fffffff - 10
        const b: long = 1010
        const v: long = a + b
        enum Enum: long { first = a, second = b, third = a + b }
      - |-
        const a: long = 0x7fffffff - 10
        const b: long = 1010
        const v: long = a + b
        const enum Enum: long { first = a, second = b, third = a + b }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof long)
        arktest.assertTrue(Enum.second.valueOf() instanceof long)
        arktest.assertTrue(Enum.third.valueOf() instanceof long)
        arktest.assertEQ(Enum.first.valueOf(), a)
        arktest.assertEQ(Enum.second.valueOf(), b)
        arktest.assertEQ(Enum.third.valueOf(), v)

  - desc: |-
      Checking int overflow on Int.MAX_VALUE in enum
    decl_variants:
      - |-
        const a: long = 5
        enum Enum: long { A = a << 32 }
      - |-
        const a: long = 5
        const enum Enum: long { A = a << 32 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.A instanceof Enum)
        arktest.assertTrue(Enum.A.valueOf() instanceof long)
        arktest.assertEQ(Enum.A, 0x5_0000_0000)
