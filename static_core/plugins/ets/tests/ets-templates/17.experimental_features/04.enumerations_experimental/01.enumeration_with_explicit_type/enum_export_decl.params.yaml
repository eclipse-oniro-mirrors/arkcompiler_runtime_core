# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        If enumeration type is exported, then all enumeration constants
        are exported along with the mandatory qualification
    module_file: |-
      ./enum_export_module_int.ets
    check_variants:
      - enum_name: ColorsInt
      - enum_name: ConstColorsInt
    decl_variants:
      - |-
        import { [enum_name] } from "./enum_export_module_int.ets"
    sub_cases_logic:
      - |-
        let r: [enum_name] = [enum_name].Red
        let g: [enum_name] = [enum_name].Green
        let b: [enum_name] = [enum_name].Blue
        let r2 = [enum_name].Red
        let g2 = [enum_name].Green
        let b2 = [enum_name].Blue
        arktest.assertTrue(r instanceof [enum_name])
        arktest.assertTrue(g instanceof [enum_name])
        arktest.assertTrue(b instanceof [enum_name])
        arktest.assertEQ(r, 1)
        arktest.assertEQ(g, 2)
        arktest.assertEQ(b, 4)
        arktest.assertTrue(r2 instanceof [enum_name])
        arktest.assertTrue(g2 instanceof [enum_name])
        arktest.assertTrue(b2 instanceof [enum_name])
        arktest.assertEQ(r2, 1)
        arktest.assertEQ(g2, 2)
        arktest.assertEQ(b2, 4)
        arktest.assertTrue([enum_name].Red instanceof [enum_name])
        arktest.assertTrue([enum_name].Green instanceof [enum_name])
        arktest.assertTrue([enum_name].Blue instanceof [enum_name])
        arktest.assertTrue([enum_name].Red.valueOf() instanceof int)
        arktest.assertTrue([enum_name].Green.valueOf() instanceof int)
        arktest.assertTrue([enum_name].Blue.valueOf() instanceof int)
        arktest.assertEQ([enum_name].Red, 1)
        arktest.assertEQ([enum_name].Green, 2)
        arktest.assertEQ([enum_name].Blue, 4)

  - desc: |-
      >-
        If enumeration type is exported, then all enumeration constants
        are exported along with the mandatory qualification
    module_file: |-
      ./enum_export_module_long.ets
    check_variants:
      - enum_name: ColorsLong
      - enum_name: ConstColorsLong
    decl_variants:
      - |-
        import { [enum_name] } from "./enum_export_module_long.ets"
    sub_cases_logic:
      - |-
        let r: [enum_name] = [enum_name].Red
        let g: [enum_name] = [enum_name].Green
        let b: [enum_name] = [enum_name].Blue
        let r2 = [enum_name].Red
        let g2 = [enum_name].Green
        let b2 = [enum_name].Blue
        arktest.assertTrue(r instanceof [enum_name])
        arktest.assertTrue(g instanceof [enum_name])
        arktest.assertTrue(b instanceof [enum_name])
        arktest.assertEQ(r, 0x7FFF_FFFF_1)
        arktest.assertEQ(g, 0x7FFF_FFFF_2)
        arktest.assertEQ(b, 0x7FFF_FFFF_4)
        arktest.assertTrue(r2 instanceof [enum_name])
        arktest.assertTrue(g2 instanceof [enum_name])
        arktest.assertTrue(b2 instanceof [enum_name])
        arktest.assertEQ(r2, 0x7FFF_FFFF_1)
        arktest.assertEQ(g2, 0x7FFF_FFFF_2)
        arktest.assertEQ(b2, 0x7FFF_FFFF_4)
        arktest.assertTrue([enum_name].Red instanceof [enum_name])
        arktest.assertTrue([enum_name].Green instanceof [enum_name])
        arktest.assertTrue([enum_name].Blue instanceof [enum_name])
        arktest.assertTrue([enum_name].Red.valueOf() instanceof long)
        arktest.assertTrue([enum_name].Green.valueOf() instanceof long)
        arktest.assertTrue([enum_name].Blue.valueOf() instanceof long)
        arktest.assertEQ([enum_name].Red, 0x7FFF_FFFF_1)
        arktest.assertEQ([enum_name].Green, 0x7FFF_FFFF_2)
        arktest.assertEQ([enum_name].Blue, 0x7FFF_FFFF_4)

  - desc: |-
      >-
        If enumeration type is exported, then all enumeration constants
        are exported along with the mandatory qualification
    module_file: |-
      ./enum_export_module_string.ets
    check_variants:
      - enum_name: ColorsStr
      - enum_name: ConstColorsStr
    decl_variants:
      - |-
        import { [enum_name] } from "./enum_export_module_string.ets"
    sub_cases_logic:
      - |-
        let r: [enum_name] = [enum_name].Red
        let g: [enum_name] = [enum_name].Green
        let b: [enum_name] = [enum_name].Blue
        let r2 = [enum_name].Red
        let g2 = [enum_name].Green
        let b2 = [enum_name].Blue
        arktest.assertTrue(r instanceof [enum_name])
        arktest.assertTrue(g instanceof [enum_name])
        arktest.assertTrue(b instanceof [enum_name])
        arktest.assertEQ(r, "One")
        arktest.assertEQ(g, "Two")
        arktest.assertEQ(b, "Three")
        arktest.assertTrue(r2 instanceof [enum_name])
        arktest.assertTrue(g2 instanceof [enum_name])
        arktest.assertTrue(b2 instanceof [enum_name])
        arktest.assertEQ(r2, "One")
        arktest.assertEQ(g2, "Two")
        arktest.assertEQ(b2, "Three")
        arktest.assertTrue([enum_name].Red instanceof [enum_name])
        arktest.assertTrue([enum_name].Green instanceof [enum_name])
        arktest.assertTrue([enum_name].Blue instanceof [enum_name])
        arktest.assertTrue([enum_name].Red.valueOf() instanceof string)
        arktest.assertTrue([enum_name].Green.valueOf() instanceof string)
        arktest.assertTrue([enum_name].Blue.valueOf() instanceof string)
        arktest.assertEQ([enum_name].Red, "One")
        arktest.assertEQ([enum_name].Green, "Two")
        arktest.assertEQ([enum_name].Blue, "Three")

  - desc: |-
      >-
        If enumeration type is exported, then all enumeration constants
        are exported along with the mandatory qualification
    module_file: |-
      ./enum_export_module_byte.ets
    check_variants:
      - enum_name: ColorsByte
      - enum_name: ConstColorsByte
    decl_variants:
      - |-
        import { [enum_name] } from "./enum_export_module_byte.ets"
    sub_cases_logic:
      - |-
        let r: [enum_name] = [enum_name].Red
        let g: [enum_name] = [enum_name].Green
        let b: [enum_name] = [enum_name].Blue
        let r2 = [enum_name].Red
        let g2 = [enum_name].Green
        let b2 = [enum_name].Blue
        arktest.assertTrue(r instanceof [enum_name])
        arktest.assertTrue(g instanceof [enum_name])
        arktest.assertTrue(b instanceof [enum_name])
        arktest.assertEQ(r, 1)
        arktest.assertEQ(g, 2)
        arktest.assertEQ(b, 4)
        arktest.assertTrue(r2 instanceof [enum_name])
        arktest.assertTrue(g2 instanceof [enum_name])
        arktest.assertTrue(b2 instanceof [enum_name])
        arktest.assertEQ(r2, 1)
        arktest.assertEQ(g2, 2)
        arktest.assertEQ(b2, 4)
        arktest.assertTrue([enum_name].Red instanceof [enum_name])
        arktest.assertTrue([enum_name].Green instanceof [enum_name])
        arktest.assertTrue([enum_name].Blue instanceof [enum_name])
        arktest.assertTrue([enum_name].Red.valueOf() instanceof byte)
        arktest.assertTrue([enum_name].Green.valueOf() instanceof byte)
        arktest.assertTrue([enum_name].Blue.valueOf() instanceof byte)
        arktest.assertEQ([enum_name].Red, 1)
        arktest.assertEQ([enum_name].Green, 2)
        arktest.assertEQ([enum_name].Blue, 4)

  - desc: |-
      >-
        If enumeration type is exported, then all enumeration constants
        are exported along with the mandatory qualification
    module_file: |-
      ./enum_export_module_short.ets
    check_variants:
      - enum_name: ColorsShort
      - enum_name: ConstColorsShort
    decl_variants:
      - |-
        import { [enum_name] } from "./enum_export_module_short.ets"
    sub_cases_logic:
      - |-
        let r: [enum_name] = [enum_name].Red
        let g: [enum_name] = [enum_name].Green
        let b: [enum_name] = [enum_name].Blue
        let r2 = [enum_name].Red
        let g2 = [enum_name].Green
        let b2 = [enum_name].Blue
        arktest.assertTrue(r instanceof [enum_name])
        arktest.assertTrue(g instanceof [enum_name])
        arktest.assertTrue(b instanceof [enum_name])
        arktest.assertEQ(r, 1)
        arktest.assertEQ(g, 2)
        arktest.assertEQ(b, 4)
        arktest.assertTrue(r2 instanceof [enum_name])
        arktest.assertTrue(g2 instanceof [enum_name])
        arktest.assertTrue(b2 instanceof [enum_name])
        arktest.assertEQ(r2, 1)
        arktest.assertEQ(g2, 2)
        arktest.assertEQ(b2, 4)
        arktest.assertTrue([enum_name].Red instanceof [enum_name])
        arktest.assertTrue([enum_name].Green instanceof [enum_name])
        arktest.assertTrue([enum_name].Blue instanceof [enum_name])
        arktest.assertTrue([enum_name].Red.valueOf() instanceof short)
        arktest.assertTrue([enum_name].Green.valueOf() instanceof short)
        arktest.assertTrue([enum_name].Blue.valueOf() instanceof short)
        arktest.assertEQ([enum_name].Red, 1)
        arktest.assertEQ([enum_name].Green, 2)
        arktest.assertEQ([enum_name].Blue, 4)

  - desc: |-
      >-
        If enumeration type is exported, then all enumeration constants
        are exported along with the mandatory qualification
    module_file: |-
      ./enum_export_module_float.ets
    check_variants:
      - enum_name: ColorsFloat
      - enum_name: ConstColorsFloat
    decl_variants:
      - |-
        import { [enum_name] } from "./enum_export_module_float.ets"
    sub_cases_logic:
      - |-
        let r: [enum_name] = [enum_name].Red
        let g: [enum_name] = [enum_name].Green
        let b: [enum_name] = [enum_name].Blue
        let r2 = [enum_name].Red
        let g2 = [enum_name].Green
        let b2 = [enum_name].Blue
        arktest.assertTrue(r instanceof [enum_name])
        arktest.assertTrue(g instanceof [enum_name])
        arktest.assertTrue(b instanceof [enum_name])
        arktest.assertEQ(r, -1.5f)
        arktest.assertEQ(g, -6.8f)
        arktest.assertEQ(b, 42.43f)
        arktest.assertTrue(r2 instanceof [enum_name])
        arktest.assertTrue(g2 instanceof [enum_name])
        arktest.assertTrue(b2 instanceof [enum_name])
        arktest.assertEQ(r2, -1.5f)
        arktest.assertEQ(g2, -6.8f)
        arktest.assertEQ(b2, 42.43f)
        arktest.assertTrue([enum_name].Red instanceof [enum_name])
        arktest.assertTrue([enum_name].Green instanceof [enum_name])
        arktest.assertTrue([enum_name].Blue instanceof [enum_name])
        arktest.assertTrue([enum_name].Red.valueOf() instanceof float)
        arktest.assertTrue([enum_name].Green.valueOf() instanceof float)
        arktest.assertTrue([enum_name].Blue.valueOf() instanceof float)
        arktest.assertEQ([enum_name].Red, -1.5f)
        arktest.assertEQ([enum_name].Green, -6.8f)
        arktest.assertEQ([enum_name].Blue, 42.43f)

  - desc: |-
      >-
        If enumeration type is exported, then all enumeration constants
        are exported along with the mandatory qualification
    module_file: |-
      ./enum_export_module_double.ets
    check_variants:
      - enum_name: ColorsDouble
      - enum_name: ConstColorsDouble
    decl_variants:
      - |-
        import { [enum_name] } from "./enum_export_module_double.ets"
    sub_cases_logic:
      - |-
        let r: [enum_name] = [enum_name].Red
        let g: [enum_name] = [enum_name].Green
        let b: [enum_name] = [enum_name].Blue
        let r2 = [enum_name].Red
        let g2 = [enum_name].Green
        let b2 = [enum_name].Blue
        arktest.assertTrue(r instanceof [enum_name])
        arktest.assertTrue(g instanceof [enum_name])
        arktest.assertTrue(b instanceof [enum_name])
        arktest.assertEQ(r, -1.5)
        arktest.assertEQ(g, -6.8)
        arktest.assertEQ(b, 42.43)
        arktest.assertTrue(r2 instanceof [enum_name])
        arktest.assertTrue(g2 instanceof [enum_name])
        arktest.assertTrue(b2 instanceof [enum_name])
        arktest.assertEQ(r2, -1.5)
        arktest.assertEQ(g2, -6.8)
        arktest.assertEQ(b2, 42.43)
        arktest.assertTrue([enum_name].Red instanceof [enum_name])
        arktest.assertTrue([enum_name].Green instanceof [enum_name])
        arktest.assertTrue([enum_name].Blue instanceof [enum_name])
        arktest.assertTrue([enum_name].Red.valueOf() instanceof double)
        arktest.assertTrue([enum_name].Green.valueOf() instanceof double)
        arktest.assertTrue([enum_name].Blue.valueOf() instanceof double)
        arktest.assertEQ([enum_name].Red, -1.5)
        arktest.assertEQ([enum_name].Green, -6.8)
        arktest.assertEQ([enum_name].Blue, 42.43)
