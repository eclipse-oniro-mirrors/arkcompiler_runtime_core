# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

check_types:
  - "int"
  - "long"
  - "byte"
  - "short"

cases:
  - desc: |-
      >-
        If explicit type is an integer type then omitted values
        for constants allowed, the same rules applied as for enum with
        non-explicit type (see Enumeration Integer Values).
        The constant which is first and has no explicit value
        gets zero value.
        A constant that is not the first and has no explicit value
        takes the value of the immediately preceding constant
        plus one.
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Color: [check_type] { Red, Green, Blue }
        enum Color2: [check_type] { Red, Green, Blue }
      - |-
        enum Color: [check_type] { Red, Green, Blue, }
        enum Color2: [check_type] { Red, Green, Blue, }
      - |-
        const enum Color: [check_type] { Red, Green, Blue }
        const enum Color2: [check_type] { Red, Green, Blue }
      - |-
        const enum Color: [check_type] { Red, Green, Blue, }
        const enum Color2: [check_type] { Red, Green, Blue, }
    sub_cases_logic:
      - |-
        let r: Color = Color.Red
        let g: Color = Color.Green
        let b: Color = Color.Blue
        arktest.assertTrue(r instanceof Color)
        arktest.assertTrue(g instanceof Color)
        arktest.assertTrue(b instanceof Color)
        arktest.assertFalse(r instanceof Color2)
        arktest.assertFalse(g instanceof Color2)
        arktest.assertFalse(b instanceof Color2)
        arktest.assertTrue(r.valueOf() instanceof [check_type])
        arktest.assertTrue(g.valueOf() instanceof [check_type])
        arktest.assertTrue(b.valueOf() instanceof [check_type])
        arktest.assertEQ(r, 0)
        arktest.assertEQ(g, 1)
        arktest.assertEQ(b, 2)
      - |-
        let r = Color.Red
        let g = Color.Green
        let b = Color.Blue
        arktest.assertTrue(r instanceof Color)
        arktest.assertTrue(g instanceof Color)
        arktest.assertTrue(b instanceof Color)
        arktest.assertFalse(r instanceof Color2)
        arktest.assertFalse(g instanceof Color2)
        arktest.assertFalse(b instanceof Color2)
        arktest.assertTrue(r.valueOf() instanceof [check_type])
        arktest.assertTrue(g.valueOf() instanceof [check_type])
        arktest.assertTrue(b.valueOf() instanceof [check_type])
        arktest.assertEQ(r, 0)
        arktest.assertEQ(g, 1)
        arktest.assertEQ(b, 2)
      - |-
        arktest.assertTrue(Color.Red instanceof Color)
        arktest.assertTrue(Color.Green instanceof Color)
        arktest.assertTrue(Color.Blue instanceof Color)
        arktest.assertFalse(Color.Red instanceof Color2)
        arktest.assertFalse(Color.Green instanceof Color2)
        arktest.assertFalse(Color.Blue instanceof Color2)
        arktest.assertTrue(Color.Red.valueOf() instanceof [check_type])
        arktest.assertTrue(Color.Green.valueOf() instanceof [check_type])
        arktest.assertTrue(Color.Blue.valueOf() instanceof [check_type])
        arktest.assertEQ(Color.Red, 0)
        arktest.assertEQ(Color.Green, 1)
        arktest.assertEQ(Color.Blue, 2)

  - desc: |-
      Modifying enum variable by other named constant
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Color: [check_type] { Red, Green, Blue }
      - |-
        const enum Color: [check_type] { Red, Green, Blue }
    sub_cases_logic:
      - |-
        let r: Color = Color.Red
        r = Color.Blue
        arktest.assertTrue(Color.Red instanceof Color)
        arktest.assertTrue(Color.Green instanceof Color)
        arktest.assertTrue(Color.Blue instanceof Color)
        arktest.assertTrue(r instanceof Color)
        arktest.assertTrue(Color.Red.valueOf() instanceof [check_type])
        arktest.assertTrue(Color.Green.valueOf() instanceof [check_type])
        arktest.assertTrue(Color.Blue.valueOf() instanceof [check_type])
        arktest.assertTrue(r.valueOf() instanceof [check_type])
        arktest.assertEQ(Color.Red, 0)
        arktest.assertEQ(Color.Green, 1)
        arktest.assertEQ(Color.Blue, 2)
        arktest.assertEQ(r, 2)
      - |-
        let g: Color = Color.Green
        g = Color.Blue
        arktest.assertTrue(Color.Red instanceof Color)
        arktest.assertTrue(Color.Green instanceof Color)
        arktest.assertTrue(Color.Blue instanceof Color)
        arktest.assertTrue(g instanceof Color)
        arktest.assertTrue(Color.Red.valueOf() instanceof [check_type])
        arktest.assertTrue(Color.Green.valueOf() instanceof [check_type])
        arktest.assertTrue(Color.Blue.valueOf() instanceof [check_type])
        arktest.assertTrue(g.valueOf() instanceof [check_type])
        arktest.assertEQ(Color.Red, 0)
        arktest.assertEQ(Color.Green, 1)
        arktest.assertEQ(Color.Blue, 2)
        arktest.assertEQ(g, 2)
      - |-
        let b: Color = Color.Blue
        b = Color.Red
        arktest.assertTrue(Color.Red instanceof Color)
        arktest.assertTrue(Color.Green instanceof Color)
        arktest.assertTrue(Color.Blue instanceof Color)
        arktest.assertTrue(b instanceof Color)
        arktest.assertTrue(Color.Red.valueOf() instanceof [check_type])
        arktest.assertTrue(Color.Green.valueOf() instanceof [check_type])
        arktest.assertTrue(Color.Blue.valueOf() instanceof [check_type])
        arktest.assertTrue(b.valueOf() instanceof [check_type])
        arktest.assertEQ(Color.Red, 0)
        arktest.assertEQ(Color.Green, 1)
        arktest.assertEQ(Color.Blue, 2)
        arktest.assertEQ(b, 0)

  - desc: |-
      >-
        Qualification by type is mandatory to access the enumeration
        constant, except enumeration constant initialization expressions
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum: [check_type] { A, B, C, D = B | C, E, F,
          G = D | F }
      - |-
        const enum Enum: [check_type] { A, B, C, D = B | C, E, F,
          G = D | F }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.A instanceof Enum)
        arktest.assertTrue(Enum.B instanceof Enum)
        arktest.assertTrue(Enum.C instanceof Enum)
        arktest.assertTrue(Enum.D instanceof Enum)
        arktest.assertTrue(Enum.E instanceof Enum)
        arktest.assertTrue(Enum.F instanceof Enum)
        arktest.assertTrue(Enum.G instanceof Enum)
        arktest.assertTrue(Enum.A.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.B.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.C.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.D.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.E.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.F.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.G.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.A, 0)
        arktest.assertEQ(Enum.B, 1)
        arktest.assertEQ(Enum.C, 2)
        arktest.assertEQ(Enum.D, 3)
        arktest.assertEQ(Enum.E, 4)
        arktest.assertEQ(Enum.F, 5)
        arktest.assertEQ(Enum.G, 7)

  - desc: |-
      >-
        The value of an enum constant can be set as follows:
        * Explicitly to a numeric constant expression or to
        a constant expression of type string; or
        * Implicitly by omitting the constant expression.
        A constant that is not the first and has no explicit value
        takes the value of the immediately preceding constant
        plus one.
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum: [check_type] { A = 2, B, C }
      - |-
        const enum Enum: [check_type] { A = 2, B, C }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.A instanceof Enum)
        arktest.assertTrue(Enum.B instanceof Enum)
        arktest.assertTrue(Enum.C instanceof Enum)
        arktest.assertTrue(Enum.A.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.B.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.C.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.A, 2)
        arktest.assertEQ(Enum.B, 3)
        arktest.assertEQ(Enum.C, 4)

  - desc: |-
      >-
        The value of an enum constant can be set as follows:
        * Explicitly to a numeric constant expression or to
        a constant expression of type string; or
        * Implicitly by omitting the constant expression.
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum: [check_type] { A = 0, B = 1 << 1, C = 1 << 2,
          D = (B | C), E = (B | C) << 1 }
      - |-
        const enum Enum: [check_type] { A = 0, B = 1 << 1, C = 1 << 2,
          D = (B | C), E = (B | C) << 1 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.A instanceof Enum)
        arktest.assertTrue(Enum.B instanceof Enum)
        arktest.assertTrue(Enum.C instanceof Enum)
        arktest.assertTrue(Enum.D instanceof Enum)
        arktest.assertTrue(Enum.E instanceof Enum)
        arktest.assertTrue(Enum.A.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.B.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.C.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.D.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.E.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.A, 0)
        arktest.assertEQ(Enum.B, 2)
        arktest.assertEQ(Enum.C, 4)
        arktest.assertEQ(Enum.D, 6)
        arktest.assertEQ(Enum.E, 12)

  - desc: |-
      >-
        The value of an enum constant can be set as follows:
        * Explicitly to a numeric constant expression or to
        a constant expression of type string; or
        * Implicitly by omitting the constant expression.
        Qualification by type is mandatory to access the enumeration
        constant, except enumeration constant initialization expressions.
    check_variants:
      - {check_type: "long", shift_value: "32"}
      - {check_type: "int", shift_value: "16"}
      - {check_type: "short", shift_value: "8"}
      - {check_type: "byte", shift_value: "1"}
    decl_variants:
      - |-
        enum Enum: [check_type] { A = 5, B = (1 << 1) * 2,
          C = (1 << 3) * 3, D = (B | C), E = ((B | C) << [shift_value]) * 2,
          F = A % 4, G = (A + F) / 3, H = (G | (F & A)), I = F ^ A,
          J = ~A, K = -B, L = E >> 2, M = E >>> 2 }
      - |-
        const enum Enum: [check_type] { A = 5, B = (1 << 1) * 2,
          C = (1 << 3) * 3, D = (B | C), E = ((B | C) << [shift_value]) * 2,
          F = A % 4, G = (A + F) / 3, H = (G | (F & A)), I = F ^ A,
          J = ~A, K = -B, L = E >> 2, M = E >>> 2 }
    sub_cases_logic:
      - |-
        const a: [check_type] = 5
        const b: [check_type] = (1 << 1) * 2
        const c: [check_type] = (1 << 3) * 3
        const d: [check_type] = (b | c)
        const e: [check_type] = ((b | c) << [shift_value]) * 2
        const f: [check_type] = a % 4
        const g: [check_type] = (a + f) / 3
        const h: [check_type] = (g | (f & a))
        const i: [check_type] = f ^ a
        const j: [check_type] = ~a
        const k: [check_type] = -b
        const l: [check_type] = e >> 2
        const m: [check_type] = e >>> 2
        arktest.assertTrue(Enum.A instanceof Enum)
        arktest.assertTrue(Enum.B instanceof Enum)
        arktest.assertTrue(Enum.C instanceof Enum)
        arktest.assertTrue(Enum.D instanceof Enum)
        arktest.assertTrue(Enum.E instanceof Enum)
        arktest.assertTrue(Enum.F instanceof Enum)
        arktest.assertTrue(Enum.G instanceof Enum)
        arktest.assertTrue(Enum.H instanceof Enum)
        arktest.assertTrue(Enum.I instanceof Enum)
        arktest.assertTrue(Enum.J instanceof Enum)
        arktest.assertTrue(Enum.K instanceof Enum)
        arktest.assertTrue(Enum.L instanceof Enum)
        arktest.assertTrue(Enum.M instanceof Enum)
        arktest.assertTrue(Enum.A.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.B.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.C.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.D.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.E.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.F.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.G.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.H.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.I.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.J.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.K.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.L.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.M.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.A, a)
        arktest.assertEQ(Enum.B, b)
        arktest.assertEQ(Enum.C, c)
        arktest.assertEQ(Enum.D, d)
        arktest.assertEQ(Enum.E, e)
        arktest.assertEQ(Enum.F, f)
        arktest.assertEQ(Enum.G, g)
        arktest.assertEQ(Enum.H, h)
        arktest.assertEQ(Enum.I, i)
        arktest.assertEQ(Enum.J, j)
        arktest.assertEQ(Enum.K, k)
        arktest.assertEQ(Enum.L, l)
        arktest.assertEQ(Enum.L, m)

  - desc: |-
      >-
        The value of an enum constant can be set as follows:
        * Explicitly to a numeric constant expression or to
        a constant expression of type string; or
        * Implicitly by omitting the constant expression.
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum1: [check_type] { first = 123, second,
          third }
        enum Enum2: [check_type] { first = Enum1.first, second,
          third }
      - |-
        const enum Enum1: [check_type] { first = 123, second,
          third }
        const enum Enum2: [check_type] { first = Enum1.first, second,
          third }
      - |-
        enum Enum1: [check_type] { first = 123, second,
          third }
        const enum Enum2: [check_type] { first = Enum1.first, second,
          third }
      - |-
        const enum Enum1: [check_type] { first = 123, second, third }
        enum Enum2: [check_type] { first = Enum1.first, second, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum1.first instanceof Enum1)
        arktest.assertTrue(Enum1.second instanceof Enum1)
        arktest.assertTrue(Enum1.third instanceof Enum1)
        arktest.assertTrue(Enum1.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum1.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum1.third.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum1.first.valueOf(), 123)
        arktest.assertEQ(Enum1.second.valueOf(), 124)
        arktest.assertEQ(Enum1.third.valueOf(), 125)
        arktest.assertTrue(Enum2.first instanceof Enum2)
        arktest.assertTrue(Enum2.second instanceof Enum2)
        arktest.assertTrue(Enum2.third instanceof Enum2)
        arktest.assertTrue(Enum2.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum2.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum2.third.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum2.first.valueOf(), 123)
        arktest.assertEQ(Enum2.second.valueOf(), 124)
        arktest.assertEQ(Enum2.third.valueOf(), 125)

  - desc: |-
      >-
        The value of an enum constant can be set as follows:
        * Explicitly to a numeric constant expression or to
        a constant expression of type string; or
        * Implicitly by omitting the constant expression.
    check_variants:
      - {check_type: "long", check_value: "2147483648"}
      - {check_type: "int", check_value: "2147483647"}
      - {check_type: "short", check_value: "32767"}
      - {check_type: "byte", check_value: "127"}
    decl_variants:
      - |-
        const a: [check_type] = [check_value]
        enum Enum: [check_type] { first = a, second = a - 1,
          third = a - 2 }
      - |-
        const a: [check_type] = [check_value]
        const enum Enum: [check_type] { first = a, second = a - 1,
          third = a - 2 }
    sub_cases_logic:
      - |-
        const v1: [check_type] = [check_value]
        const v2: [check_type] = [check_value] - 1
        const v3: [check_type] = [check_value] - 2
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.first.valueOf(), v1)
        arktest.assertEQ(Enum.second.valueOf(), v2)
        arktest.assertEQ(Enum.third.valueOf(), v3)

  - desc: |-
      Values can be the same
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum: [check_type] { A = 5, B = 5 }
      - |-
        const enum Enum: [check_type] { A = 5, B = 5 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.A instanceof Enum)
        arktest.assertTrue(Enum.B instanceof Enum)
        arktest.assertTrue(Enum.A.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.B.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.A, 5)
        arktest.assertEQ(Enum.B, 5)
        arktest.assertEQ(Enum.A, Enum.B)

  - desc: |-
      Values can be the same
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum: [check_type] { A = -12, B, C = -12 }
      - |-
        const enum Enum: [check_type] { A = -12, B, C = -12 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.A instanceof Enum)
        arktest.assertTrue(Enum.B instanceof Enum)
        arktest.assertTrue(Enum.C instanceof Enum)
        arktest.assertTrue(Enum.A.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.B.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.C.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.A, -12)
        arktest.assertEQ(Enum.B, -11)
        arktest.assertEQ(Enum.C, -12)
        arktest.assertEQ(Enum.A, Enum.C)

  - desc: |-
      Values can be the same
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first, second = -1, third }
      - |-
        const enum Enum: [check_type] { first, second = -1, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.first, 0)
        arktest.assertEQ(Enum.second, -1)
        arktest.assertEQ(Enum.third, 0)
        arktest.assertEQ(Enum.third, Enum.first)

  - desc: |-
      Values can be the same
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum: [check_type] { A, B = -123, C, D = B, E }
      - |-
        const enum Enum: [check_type] { A, B = -123, C, D = B, E }
    logic: |-
      arktest.assertTrue(Enum.A instanceof Enum)
      arktest.assertTrue(Enum.B instanceof Enum)
      arktest.assertTrue(Enum.C instanceof Enum)
      arktest.assertTrue(Enum.D instanceof Enum)
      arktest.assertTrue(Enum.E instanceof Enum)
      arktest.assertTrue(Enum.A.valueOf() instanceof [check_type])
      arktest.assertTrue(Enum.B.valueOf() instanceof [check_type])
      arktest.assertTrue(Enum.C.valueOf() instanceof [check_type])
      arktest.assertTrue(Enum.D.valueOf() instanceof [check_type])
      arktest.assertTrue(Enum.E.valueOf() instanceof [check_type])
      arktest.assertEQ(Enum.A.valueOf(), 0)
      arktest.assertEQ(Enum.B.valueOf(), -123)
      arktest.assertEQ(Enum.C.valueOf(), -122)
      arktest.assertEQ(Enum.D.valueOf(), -123)
      arktest.assertEQ(Enum.E.valueOf(), -122)

  - desc: |-
      >-
        Values can be the same.
        If constant expression is omitted, then the value of the enum
        constant is set implicitly to an integer value.
        The constant which is first and has no explicit value
        gets zero value.
        A constant that is not the first and has no explicit value
        takes the value of the immediately preceding constant
        plus one.
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum: [check_type] { A, B, C, D, E = B | C }
      - |-
        const enum Enum: [check_type] { A, B, C, D, E = B | C }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.A instanceof Enum)
        arktest.assertTrue(Enum.B instanceof Enum)
        arktest.assertTrue(Enum.C instanceof Enum)
        arktest.assertTrue(Enum.D instanceof Enum)
        arktest.assertTrue(Enum.E instanceof Enum)
        arktest.assertTrue(Enum.A.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.B.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.C.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.D.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.E.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.A, 0)
        arktest.assertEQ(Enum.B, 1)
        arktest.assertEQ(Enum.C, 2)
        arktest.assertEQ(Enum.D, 3)
        arktest.assertEQ(Enum.E, 3)

  - desc: |-
      >-
        Empty enum is supported as a corner case for compatibility
        with TypeScript.
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Empty: [check_type] {}
      - |-
        const enum Empty: [check_type] {}

  - desc: |-
      Checking for min value in enum
    check_variants:
      - {check_type: "long", min_value: "-9223372036854775808"}
      - {check_type: "int", min_value: "-2147483648"}
      - {check_type: "short", min_value: "-32768"}
      - {check_type: "byte", min_value: "-128"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first, second = [min_value],
          third}
      - |-
        const enum Enum: [check_type] { first, second = [min_value],
          third}
    sub_cases_logic:
      - |-
        const v1: [check_type] = 0
        const v2: [check_type] = [min_value]
        const v3: [check_type] = [min_value] + 1
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.first.valueOf(), v1)
        arktest.assertEQ(Enum.second.valueOf(), v2)
        arktest.assertEQ(Enum.third.valueOf(), v3)

  - desc: |-
      Checking for max value in enum
    check_variants:
      - {check_type: "long", max_value: "9223372036854775807"}
      - {check_type: "int", max_value: "2147483647"}
      - {check_type: "short", max_value: "32767"}
      - {check_type: "byte", max_value: "127"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first = [max_value] - 2, second,
          third }
      - |-
        const enum Enum: [check_type] { first = [max_value] - 2, second,
          third }
    sub_cases_logic:
      - |-
        const v1: [check_type] = [max_value] - 2
        const v2: [check_type] = [max_value] - 1
        const v3: [check_type] = [max_value]
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.first.valueOf(), v1)
        arktest.assertEQ(Enum.second.valueOf(), v2)
        arktest.assertEQ(Enum.third.valueOf(), v3)

  - desc: |-
      Using different integer literals
    check_variants:
      - {check_type: "long", bin_lit: "0b0011", oct_lit: "0o731",
         hex_lit: "0xCAFE_BAD3_7FFF", dec_lit: "9_372_036_854_775_805"}
      - {check_type: "int", bin_lit: "0b0011", oct_lit: "0o731",
         hex_lit: "0x7AFE_CAFE", dec_lit: "1_123_456"}
      - { check_type: "short", bin_lit: "0b0011", oct_lit: "0o731",
         hex_lit: "0x7AFE", dec_lit: "32_757"}
      - { check_type: "byte", bin_lit: "0b0011", oct_lit: "0o177",
         hex_lit: "0x7F", dec_lit: "123"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first = [bin_lit], second = [oct_lit],
          third = [hex_lit], fourth = [dec_lit] }
      - |-
        const enum Enum: [check_type] { first = [bin_lit], second = [oct_lit],
          third = [hex_lit], fourth = [dec_lit] }
    sub_cases_logic:
      - |-
        const v1: [check_type] = [bin_lit]
        const v2: [check_type] = [oct_lit]
        const v3: [check_type] = [hex_lit]
        const v4: [check_type] = [dec_lit]
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.fourth instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.fourth.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.first.valueOf(), v1)
        arktest.assertEQ(Enum.second.valueOf(), v2)
        arktest.assertEQ(Enum.third.valueOf(), v3)
        arktest.assertEQ(Enum.fourth.valueOf(), v4)

  - desc: |-
      Using in string operator contexts
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first = -42, second, third = 17 }
      - |-
        const enum Enum: [check_type] { first = -42, second, third = 17 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertEQ("_" + Enum.first, "_-42")
        arktest.assertEQ("_" + Enum.second, "_-41")
        arktest.assertEQ("_" + Enum.third, "_17")
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.first + "_", "-42_")
        arktest.assertEQ(Enum.second + "_", "-41_")
        arktest.assertEQ(Enum.third + "_", "17_")

  - desc: |-
      Using in numeric operator contexts
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first = -1, second, third = -42 }
      - |-
        const enum Enum: [check_type] { first = -1, second, third = -42 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.first, -1)
        arktest.assertEQ(Enum.second, 0)
        arktest.assertEQ(Enum.third, -42)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.first + 1, 0)
        arktest.assertEQ(Enum.second + 1, 1)
        arktest.assertEQ(Enum.third + 1, -41)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertEQ(1 + Enum.first, 0)
        arktest.assertEQ(1 + Enum.second, 1)
        arktest.assertEQ(1 + Enum.third, -41)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.first == -1)
        arktest.assertTrue(Enum.second == 0)
        arktest.assertTrue(Enum.third == -42)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.first === -1)
        arktest.assertTrue(Enum.second === 0)
        arktest.assertTrue(Enum.third === -42)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.first + Enum.second + Enum.third, -43)

  - desc: |-
      Checking in switch statement
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Color: [check_type] { Red = 5, Green = 7, Blue = -53 }
      - |-
        const enum Color: [check_type] { Red = 5, Green = 7, Blue = -53 }
    sub_cases_logic:
      - |-
        let v: Color = Color.Green
        switch (v) {
          case Color.Green:
            arktest.assertTrue(v instanceof Color)
            arktest.assertTrue(v.valueOf() instanceof [check_type])
            arktest.assertEQ(v.valueOf(), 7)
            break
          default:
            arktest.assertTrue(false)
        }

  - desc: |-
      Checking enumeration methods
    check_variants:
      - {check_type: "long"}
      - {check_type: "int"}
      - {check_type: "short"}
      - {check_type: "byte"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first = -1, second = 27, third }
      - |-
        const enum Enum: [check_type] { first = -1, second = 27, third }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.first.valueOf(), -1)
        arktest.assertEQ(Enum.second.valueOf(), 27)
        arktest.assertEQ(Enum.third.valueOf(), 28)
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.second.valueOf() instanceof [check_type])
        arktest.assertTrue(Enum.third.valueOf() instanceof [check_type])
        arktest.assertEQ(Enum.first.toString(), "-1")
        arktest.assertEQ(Enum.second.toString(), "27")
        arktest.assertEQ(Enum.third.toString(), "28")

  - desc: |-
      Checking integer type overflow on max value (Don't throw CTE at all)
    check_variants:
      - {check_type: "long", max_value: "9223372036854775807"}
      - {check_type: "int", max_value: "2147483647"}
      - {check_type: "short", max_value: "32767"}
      - {check_type: "byte", max_value: "127"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first = [max_value] - 1, second,
          third }
      - |-
        const enum Enum: [check_type] { first = [max_value] - 1, second,
          third }
    sub_cases_logic:
      - |-
        arktest.assertEQ(Enum.first.valueOf(), [max_value] - 1);
        arktest.assertEQ(Enum.second.valueOf(), [max_value]);
        arktest.assertEQ(Enum.third.valueOf(), [max_value] + 1);
      - |-
        arktest.assertEQ(Enum.first.valueOf(), [max_value] - 1);
        arktest.assertEQ(Enum.second.valueOf(), [max_value]);
        arktest.assertEQ(Enum.third.valueOf(), [max_value] + 1);

  - desc: |-
      Checking integer type overflow on max value (Don't throw CTE at all)
    check_variants:
      - {check_type: "long", max_value: "9223372036854775807"}
      - {check_type: "int", max_value: "2147483647"}
      - {check_type: "short", max_value: "32767"}
      - {check_type: "byte", max_value: "127"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first = [max_value] - 10, second,
          third = first + 110 }
      - |-
        const enum Enum: [check_type] { first = [max_value] - 10, second,
          third = first + 110 }
    sub_cases_logic:
      - |-
        arktest.assertEQ(Enum.first.valueOf(), [max_value] - 10);
        arktest.assertEQ(Enum.second.valueOf(), [max_value] - 9);
        arktest.assertEQ(Enum.third.valueOf(), [max_value] + 100);
      - |-
        arktest.assertEQ(Enum.first.valueOf(), [max_value] - 10);
        arktest.assertEQ(Enum.second.valueOf(), [max_value] - 9);
        arktest.assertEQ(Enum.third.valueOf(), [max_value] + 100);

  - desc: |-
      Checking integer type overflow on min value (Don't throw CTE at all)
    check_variants:
      - {check_type: "long", min_value: "-9223372036854775808"}
      - {check_type: "int", min_value: "-2147483648"}
      - {check_type: "short", min_value: "-32768"}
      - {check_type: "byte", min_value: "-128"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first, second = [min_value],
          third = second - 1 }
      - |-
        const enum Enum: [check_type] { first, second = [min_value],
          third = second - 1 }
    sub_cases_logic:
      - |-
        arktest.assertEQ(Enum.first.valueOf(), 0);
        arktest.assertEQ(Enum.second.valueOf(), [min_value]);
        arktest.assertEQ(Enum.third.valueOf(), [min_value] - 1);
      - |-
        arktest.assertEQ(Enum.first.valueOf(), 0);
        arktest.assertEQ(Enum.second.valueOf(), [min_value]);
        arktest.assertEQ(Enum.third.valueOf(), [min_value] - 1);

  - desc: |-
      Checking integer type overflow on min value (Don't throw CTE at all)
    check_variants:
      - {check_type: "long", min_value: "-9223372036854775808"}
      - {check_type: "int", min_value: "-2147483648"}
      - {check_type: "short", min_value: "-32768"}
      - {check_type: "byte", min_value: "-128"}
    decl_variants:
      - |-
        enum Enum: [check_type] { first = [min_value] + 10, second,
          third = first - 110}
      - |-
        const enum Enum: [check_type] { first = [min_value] + 10, second,
          third = first - 110}
    sub_cases_logic:
      - |-
        arktest.assertEQ(Enum.first.valueOf(), [min_value] + 10);
        arktest.assertEQ(Enum.second.valueOf(), [min_value] + 11);
        arktest.assertEQ(Enum.third.valueOf(), [min_value] - 100);
      - |-
        arktest.assertEQ(Enum.first.valueOf(), [min_value] + 10);
        arktest.assertEQ(Enum.second.valueOf(), [min_value] + 11);
        arktest.assertEQ(Enum.third.valueOf(), [min_value] - 100);
