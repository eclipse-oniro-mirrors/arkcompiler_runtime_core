# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      A float value for enumeration constants must be set explicitly
    decl_variants:
      - |-
        enum Enum: float { first = 1.1f, second = 1.2f,
          third = 1.3f }
      - |-
        const enum Enum: float { first = 1.1f, second = 1.2f,
          third = 1.3f }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof float)
        arktest.assertTrue(Enum.second.valueOf() instanceof float)
        arktest.assertTrue(Enum.third.valueOf() instanceof float)
        arktest.assertEQ(Enum.first.valueOf(), 1.1f)
        arktest.assertEQ(Enum.second.valueOf(), 1.2f)
        arktest.assertEQ(Enum.third.valueOf(), 1.3f)

  - desc: |-
      A float value for enumeration constants must be set explicitly
    decl_variants:
      - |-
        enum Enum: float { first = 10e1f, second = 1.2f,
          third = 1.1f }
      - |-
        const enum Enum: float { first = 10e1f, second = 1.2f,
          third = 1.1f }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof float)
        arktest.assertTrue(Enum.second.valueOf() instanceof float)
        arktest.assertTrue(Enum.third.valueOf() instanceof float)
        arktest.assertEQ(Enum.first.valueOf(), 100f)
        arktest.assertEQ(Enum.second.valueOf(), 1.2f)
        arktest.assertEQ(Enum.third.valueOf(), 1.1f)

  - desc: |-
      A float value for enumeration constants must be set explicitly
    decl_variants:
      - |-
        enum Enum: float { first = 3.4018235e+38f,
          second = 3.4028235e+38f }
      - |-
        const enum Enum: float { first = 3.4018235e+38f,
          second = 3.4028235e+38f }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof float)
        arktest.assertTrue(Enum.second.valueOf() instanceof float)
        arktest.assertEQ(Enum.first.valueOf(), 3.4018235e+38f)
        arktest.assertEQ(Enum.second.valueOf(), 3.4028235e+38f)

  - desc: |-
      A float value for enumeration constants must be set explicitly
    decl_variants:
      - |-
        const a: float = 1.23f
        const b: float = 1.234f
        enum Enum: float { first = a, second = b, third = b - 1.1f }
      - |-
        const a: float = 1.23f
        const b: float = 1.234f
        const enum Enum: float { first = a, second = b, third = b - 1.1f }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof float)
        arktest.assertTrue(Enum.second.valueOf() instanceof float)
        arktest.assertTrue(Enum.third.valueOf() instanceof float)
        arktest.assertEQ(Enum.first.valueOf(), a)
        arktest.assertEQ(Enum.second.valueOf(), b)
        arktest.assertEQ(Enum.third.valueOf(), b - 1.1f)

  - desc: |-
      Using in string operator contexts
    decl_variants:
      - |-
        enum Enum: float { first = -1.1f, second = -1.2f, third = -42.43f }
      - |-
        const enum Enum: float { first = -1.1f, second = -1.2f, third = -42.43f }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof float)
        arktest.assertTrue(Enum.second.valueOf() instanceof float)
        arktest.assertTrue(Enum.third.valueOf() instanceof float)
        arktest.assertEQ("_" + Enum.first, "_-1.1")
        arktest.assertEQ("_" + Enum.second, "_-1.2")
        arktest.assertEQ("_" + Enum.third, "_-42.43")
      - |-
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof float)
        arktest.assertTrue(Enum.second.valueOf() instanceof float)
        arktest.assertTrue(Enum.third.valueOf() instanceof float)
        arktest.assertEQ(Enum.first + "_", "-1.1_")
        arktest.assertEQ(Enum.second + "_", "-1.2_")
        arktest.assertEQ(Enum.third + "_", "-42.43_")

  - desc: |-
      >-
        A value of enumeration type with an explicitly declared
        type of constants is converted to the declared type.
        This conversion never causes a runtime error.
    decl_variants:
      - |-
        enum Enum: float { first = -1.1f, second = -1.2f,
          third = -42.43f }
      - |-
        const enum Enum: float { first = -1.1f, second = -1.2f,
          third = -42.43f }
    sub_cases_logic:
      - |-
        let v1: float = Enum.first
        let v2: float = Enum.second
        let v3: float = Enum.third
        arktest.assertTrue(Enum.first instanceof Enum)
        arktest.assertTrue(Enum.second instanceof Enum)
        arktest.assertTrue(Enum.third instanceof Enum)
        arktest.assertTrue(Enum.first.valueOf() instanceof float)
        arktest.assertTrue(Enum.second.valueOf() instanceof float)
        arktest.assertTrue(Enum.third.valueOf() instanceof float)
        arktest.assertEQ(Enum.first.valueOf(), -1.1f)
        arktest.assertEQ(Enum.second.valueOf(), -1.2f)
        arktest.assertEQ(Enum.third.valueOf(), -42.43f)
        arktest.assertEQ(v1, -1.1f)
        arktest.assertEQ(v2, -1.2f)
        arktest.assertEQ(v3, -42.43f)
