# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Checking for enum with implicit int type constant
        for getName method support.
    decl_variants:
      - |-
        enum Enum { Red, Green = 10, Blue,
          First = -2147483648, Second = 12345, Third = 2147483647,
          One = 1, one = 1, oNe = 1 }
      - |-
        const enum Enum { Red, Green = 10, Blue,
          First = -2147483648, Second = 12345, Third = 2147483647,
          One = 1, one = 1, oNe = 1 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.Red.valueOf() instanceof int)
        arktest.assertTrue(Enum.Red.getName() instanceof string)
        arktest.assertEQ(Enum.Red.getName(), "Red")
        arktest.assertTrue(Enum.Green.valueOf() instanceof int)
        arktest.assertTrue(Enum.Green.getName() instanceof string)
        arktest.assertEQ(Enum.Green.getName(), "Green")
        arktest.assertTrue(Enum.Blue.valueOf() instanceof int)
        arktest.assertTrue(Enum.Blue.getName() instanceof string)
        arktest.assertEQ(Enum.Blue.getName(), "Blue")
        arktest.assertTrue(Enum.First.valueOf() instanceof int)
        arktest.assertTrue(Enum.First.getName() instanceof string)
        arktest.assertEQ(Enum.First.getName(), "First")
        arktest.assertTrue(Enum.Second.valueOf() instanceof int)
        arktest.assertTrue(Enum.Second.getName() instanceof string)
        arktest.assertEQ(Enum.Second.getName(), "Second")
        arktest.assertTrue(Enum.Third.valueOf() instanceof int)
        arktest.assertTrue(Enum.Third.getName() instanceof string)
        arktest.assertEQ(Enum.Third.getName(), "Third")
        arktest.assertTrue(Enum.One.valueOf() instanceof int)
        arktest.assertTrue(Enum.One.getName() instanceof string)
        arktest.assertEQ(Enum.One.getName(), "One")
        arktest.assertTrue(Enum.one.valueOf() instanceof int)
        arktest.assertTrue(Enum.one.getName() instanceof string)
        arktest.assertEQ(Enum.one.getName(), "one")
        arktest.assertTrue(Enum.oNe.valueOf() instanceof int)
        arktest.assertTrue(Enum.oNe.getName() instanceof string)
        arktest.assertEQ(Enum.oNe.getName(), "oNe")
      - |-
        let c: Enum = Enum.Red
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Red")
        c = Enum.Green
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Green")
        c = Enum.Blue
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Blue")
        c = Enum.First
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "First")
        c = Enum.Second
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Second")
        c = Enum.Third
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Third")
        c = Enum.One
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "One")
        c = Enum.one
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "one")
        c = Enum.oNe
        arktest.assertTrue(c.valueOf() instanceof int)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "oNe")

  - desc: |-
      >-
        Checking for enum with implicit long type constant
        for getName method support.
    decl_variants:
      - |-
        enum Enum { Red, Green = 10, Blue,
          First = -9223372036854775808, Second = 12345,
          Third = 9223372036854775807,
          One = 1, one = 1, oNe = 1 }
      - |-
        const enum Enum { Red, Green = 10, Blue,
          First = -9223372036854775808, Second = 12345,
          Third = 9223372036854775807,
          One = 1, one = 1, oNe = 1 }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.Red.valueOf() instanceof long)
        arktest.assertTrue(Enum.Red.getName() instanceof string)
        arktest.assertEQ(Enum.Red.getName(), "Red")
        arktest.assertTrue(Enum.Green.valueOf() instanceof long)
        arktest.assertTrue(Enum.Green.getName() instanceof string)
        arktest.assertEQ(Enum.Green.getName(), "Green")
        arktest.assertTrue(Enum.Blue.valueOf() instanceof long)
        arktest.assertTrue(Enum.Blue.getName() instanceof string)
        arktest.assertEQ(Enum.Blue.getName(), "Blue")
        arktest.assertTrue(Enum.First.valueOf() instanceof long)
        arktest.assertTrue(Enum.First.getName() instanceof string)
        arktest.assertEQ(Enum.First.getName(), "First")
        arktest.assertTrue(Enum.Second.valueOf() instanceof long)
        arktest.assertTrue(Enum.Second.getName() instanceof string)
        arktest.assertEQ(Enum.Second.getName(), "Second")
        arktest.assertTrue(Enum.Third.valueOf() instanceof long)
        arktest.assertTrue(Enum.Third.getName() instanceof string)
        arktest.assertEQ(Enum.Third.getName(), "Third")
        arktest.assertTrue(Enum.One.valueOf() instanceof long)
        arktest.assertTrue(Enum.One.getName() instanceof string)
        arktest.assertEQ(Enum.One.getName(), "One")
        arktest.assertTrue(Enum.one.valueOf() instanceof long)
        arktest.assertTrue(Enum.one.getName() instanceof string)
        arktest.assertEQ(Enum.one.getName(), "one")
        arktest.assertTrue(Enum.oNe.valueOf() instanceof long)
        arktest.assertTrue(Enum.oNe.getName() instanceof string)
        arktest.assertEQ(Enum.oNe.getName(), "oNe")
      - |-
        let c: Enum = Enum.Red
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Red")
        c = Enum.Green
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Green")
        c = Enum.Blue
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Blue")
        c = Enum.First
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "First")
        c = Enum.Second
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Second")
        c = Enum.Third
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Third")
        c = Enum.One
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "One")
        c = Enum.one
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "one")
        c = Enum.oNe
        arktest.assertTrue(c.valueOf() instanceof long)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "oNe")

  - desc: |-
      >-
        Checking for enum with implicit string type constant
        for getName method support.
    decl_variants:
      - |-
        enum Enum { Red = "reD", Green = "grEen", Blue = "Blue",
          Complex =
            "\x17\x2b\xef\u1f48\u2331\u2b03\u2eec \n \u{CAFE}\n\uBABF生日快乐!С Днём рождения!",
          One = "one", one = "one", oNe = "one" }
      - |-
        const enum Enum { Red = "reD", Green = "grEen", Blue = "Blue",
          Complex =
            "\x17\x2b\xef\u1f48\u2331\u2b03\u2eec \n \u{CAFE}\n\uBABF生日快乐!С Днём рождения!",
          One = "one", one = "one", oNe = "one" }
    sub_cases_logic:
      - |-
        arktest.assertTrue(Enum.Red.valueOf() instanceof string)
        arktest.assertTrue(Enum.Red.getName() instanceof string)
        arktest.assertEQ(Enum.Red.getName(), "Red")
        arktest.assertTrue(Enum.Green.valueOf() instanceof string)
        arktest.assertTrue(Enum.Green.getName() instanceof string)
        arktest.assertEQ(Enum.Green.getName(), "Green")
        arktest.assertTrue(Enum.Blue.valueOf() instanceof string)
        arktest.assertTrue(Enum.Blue.getName() instanceof string)
        arktest.assertEQ(Enum.Blue.getName(), "Blue")
        arktest.assertTrue(Enum.Complex.valueOf() instanceof string)
        arktest.assertTrue(Enum.Complex.getName() instanceof string)
        arktest.assertEQ(Enum.Complex.getName(), "Complex")
        arktest.assertTrue(Enum.One.valueOf() instanceof string)
        arktest.assertTrue(Enum.One.getName() instanceof string)
        arktest.assertEQ(Enum.One.getName(), "One")
        arktest.assertTrue(Enum.one.valueOf() instanceof string)
        arktest.assertTrue(Enum.one.getName() instanceof string)
        arktest.assertEQ(Enum.one.getName(), "one")
        arktest.assertTrue(Enum.oNe.valueOf() instanceof string)
        arktest.assertTrue(Enum.oNe.getName() instanceof string)
        arktest.assertEQ(Enum.oNe.getName(), "oNe")
      - |-
        let c: Enum = Enum.Red
        arktest.assertTrue(c.valueOf() instanceof string)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Red")
        c = Enum.Green
        arktest.assertTrue(c.valueOf() instanceof string)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Green")
        c = Enum.Blue
        arktest.assertTrue(c.valueOf() instanceof string)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Blue")
        c = Enum.Complex
        arktest.assertTrue(c.valueOf() instanceof string)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "Complex")
        c = Enum.One
        arktest.assertTrue(c.valueOf() instanceof string)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "One")
        c = Enum.one
        arktest.assertTrue(c.valueOf() instanceof string)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "one")
        c = Enum.oNe
        arktest.assertTrue(c.valueOf() instanceof string)
        arktest.assertTrue(c.getName() instanceof string)
        arktest.assertEQ(c.getName(), "oNe")
