# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Checking for enum with implicit int type constant
        for getValueOf method support which should throws an error
        if no constant with requested name exists.
    decl_variants:
      - |-
        enum Enum { Red, Green = 10, Blue,
          First = -2147483648, Second = 12345, Third = 2147483647,
          One = 1, one = 1, oNe = 1 }
      - |-
        const enum Enum { Red, Green = 10, Blue,
          First = -2147483648, Second = 12345, Third = 2147483647,
          One = 1, one = 1, oNe = 1 }
    sub_cases_logic:
      - |-
        let expectedError = (e: Error): boolean => {
          return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          Enum.getValueOf("Two")
        }, expectedError)
        arktest.expectThrow(() => {
          Enum.getValueOf("ReD")
        }, expectedError)

  - desc: |-
      >-
        Checking for enum with implicit long type constant
        for getValueOf method support which should throws an error
        if no constant with requested name exists.
    decl_variants:
      - |-
        enum Enum { Red, Green = 10, Blue,
          First = -9223372036854775808, Second = 12345,
          Third = 9223372036854775807,
          One = 1, one = 1, oNe = 1 }
      - |-
        const enum Enum { Red, Green = 10, Blue,
          First = -9223372036854775808, Second = 12345,
          Third = 9223372036854775807,
          One = 1, one = 1, oNe = 1 }
    sub_cases_logic:
      - |-
        let expectedError = (e: Error): boolean => {
          return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          Enum.getValueOf("Two")
        }, expectedError)
        arktest.expectThrow(() => {
          Enum.getValueOf("ReD")
        }, expectedError)

  - desc: |-
      >-
        Checking for enum with implicit string type constant
        for getValueOf method support which should throws an error
        if no constant with requested name exists.
    decl_variants:
      - |-
        enum Enum { Red = "reD", Green = "grEen", Blue = "Blue",
          Complex =
            "\x17\x2b\xef\u1f48\u2331\u2b03\u2eec \n \u{CAFE}\n\uBABF生日快乐!С Днём рождения!",
          One = "one", one = "one", oNe = "one" }
      - |-
        const enum Enum { Red = "reD", Green = "grEen", Blue = "Blue",
          Complex =
            "\x17\x2b\xef\u1f48\u2331\u2b03\u2eec \n \u{CAFE}\n\uBABF生日快乐!С Днём рождения!",
          One = "one", one = "one", oNe = "one" }
    sub_cases_logic:
      - |-
        let expectedError = (e: Error): boolean => {
          return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          Enum.getValueOf("Two")
        }, expectedError)
        arktest.expectThrow(() => {
          Enum.getValueOf("ReD")
        }, expectedError)
