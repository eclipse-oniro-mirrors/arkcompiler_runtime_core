# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - decl: |
      class A {}
      let f = (this: A): void => {}
    use: |
      let a: A = new A()
      f(a)
  - decl: |
      class A {}
      let f = (this: A): void => {}
    use: |
      let a: A = new A()
      a.f()
  - decl: |
      interface I {}
      let f = (this: I): void => {}
    use: |
      let i: I = {}
      f(i)
  - decl: |
      interface I {}
      let f = (this: I): void => {}
    use: |
      let i: I = {}
      i.f()
  - decl: |
      let f = (this: number[]): void => {}
    use: |
      let n: number[] = [0, 1]
      n.f()
  - decl: |
      let f = (this: number[]): void => {}
    use: |
      let n: number[] = [0, 1]
      f(n)
  - decl: |
      class A {
        f(): string { return "A" }
      }
      class B {
        a:A
        constructor(a:A){
           this.a = a
        }
        f = (this: A): string => { return this.f() }
      }
    use: |
      let a: A = new A()
      let b: B = new B(a)
      arktest.assertEQ(b.a.f(), "A")
  - decl: |
      class A {
        f(): string { return "A" }
      }
      class B {
        f = (this: B, a: A): string => { return a.f() }
      }
    use: |
      let a: A = new A()
      let b: B = new B()
      arktest.assertEQ(b.f(b, a), "A")
  - decl: |
      class A {
        f(): string { return "A" }
      }
      class B {
        f = (this: A): string => { return this.f() }
      }
    use: |
      let a: A = new A()
      let b: B = new B()
      arktest.assertEQ(b.f(a), "A")
      arktest.assertEQ(a.f(), "A")
  - decl: |
      class A {
        f(): string { return "A" }
      }
      interface I {
        f: (this: A) => string
      }
    use: |
      let a: A = new A()
      let i: I = {f: (this: A): string => { return this.f() }}
      arktest.assertEQ(i.f(a), "A")
  - decl: |
      let f = (this: Number): void => {}
    use: |
      let n: Number = 1
      f(n)
  - decl: |
      let f = (this: Number): void => {}
    use: |
      let n: Number = 1
      n.f()
  - decl: |
      interface I {}
      let f = (this: I): void => {}
    use: |
      let i: I = {}
      f(i)
  - decl: |
      interface I {}
      let f = (this: I): void => {}
    use: |
      let i: I = {}
      i.f()
  - decl: |
      let f = (this: number): void => {}
    use: |
      let n: number = 1
      f(n)
  - decl: |
      let f = (this: number): void => {}
    use: |
      let n: number = 1
      n.f()
  - decl: |
      let f = (this: byte): void => {}
    use: |
      let n: byte = 1
      f(n)
  - decl: |
      let f = (this: byte): void => {}
    use: |
      let n: byte = 1
      n.f()
  - decl: |
      let f = (this: short): void => {}
    use: |
      let n: short = 1
      f(n)
  - decl: |
      let f = (this: short): void => {}
    use: |
      let n: short = 1
      n.f()
  - decl: |
      let f = (this: int): void => {}
    use: |
      let n: int = 1
      f(n)
  - decl: |
      let f = (this: int): void => {}
    use: |
      let n: int = 1
      n.f()
  - decl: |
      let f = (this: long): void => {}
    use: |
      let n: long = 1
      f(n)
  - decl: |
      let f = (this: long): void => {}
    use: |
      let n: long = 1
      n.f()
  - decl: |
      let f = (this: bigint): void => {}
    use: |
      let n: bigint = 1n
      f(n)
  - decl: |
      let f = (this: bigint): void => {}
    use: |
      let n: bigint = 1n
      n.f()
  - decl: |
      let f = (this: float): void => {}
    use: |
      let n: float = 1.0f
      f(n)
  - decl: |
      let f = (this: float): void => {}
    use: |
      let n: float = 1.0f
      n.f()
  - decl: |
      let f = (this: double): void => {}
    use: |
      let n: double = 1.0
      f(n)
  - decl: |
      let f = (this: double): void => {}
    use: |
      let n: double = 1.0
      n.f()
  - decl: |
      let f = (this: boolean): void => {}
    use: |
      let n: boolean = true
      f(n)
  - decl: |
      let f = (this: boolean): void => {}
    use: |
      let n: boolean = true
      n.f()
  - decl: |
      let f = (this: string): void => {}
    use: |
      let n: string = "abc"
      f(n)
  - decl: |
      let f = (this: string): void => {}
    use: |
      let n: string = "abc"
      n.f()
  - decl: |
      let f = (this: char): void => {}
    use: |
      let n: char = c'a'
      f(n)
  - decl: |
      let f = (this: char): void => {}
    use: |
      let n: char = c'a'
      n.f()
  - decl: |
      let f = (this: Function): void => {}
    use: |
      let n: Function = (): void => {}
      f(n)
  - decl: |
      let f = (this: Function): void => {}
    use: |
      let n: Function = (): void => {}
      n.f()
