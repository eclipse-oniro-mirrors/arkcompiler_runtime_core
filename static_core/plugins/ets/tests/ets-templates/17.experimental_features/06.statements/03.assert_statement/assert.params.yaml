# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
cases:
    # literal values
    - use: |-
          assert false
      tags: [negative]

    - use: |-
          assert false: "Some string"
      tags: [negative]

    - use: |-
          assert true
      tags: []

    - use: |-
          assert true: ""
      tags: []

    # expressions
    - decl: |-
          let a = 12
          let b = 11
      use: |-
          assert a > b ? b < a : a < b : `Some string`
      tags: []

    - decl: |-
          let a = 11
          let b = 12
      use: |-
          assert a > b ? b < a : a == b : "Some string"
      tags: [negative]

    - decl: |-
          let a = 12
          let b = 11
      use: |-
          try {
              assert a + b == b ? b < a : a < b : "Some" + " " + "string" + a + ", " + b
              return 1
          } catch (e: Error) {
              if (e.message != "Some string12, 11") {
                  return 1
              }
          }
      tags: []

    - decl: |-
          let a = 12
          let b = 11
          let res = ""
          function foo(): string {
              res += "X"
              return "String message"
          }
      use: |-
          res = ""
          // foo should not be called
          assert a > b ? b != a : a < b : foo()
          if (res != "") return 1
      tags: []

    - decl: |-
          let a = 12
          let b = 11
          let res = ""
          function foo(): string {
              res += "X"
              return "String message"
          }
      use: |-
          res = ""
          try {
              // foo must be called
              assert a > b ? b == a : a < b : foo()
          } catch (e) {
              // expected
          }
          if (res == "") return 1
      tags: []

    - decl: |-
          let a = 12
          let b = 11
          let res = ""
          function foo(): number {
              res += "X"
              return a
          }
      use: |-
          res = ""
          try {
              // foo must be called
              assert a < b : `value = ${foo()}`
              return 1
          } catch (e) {
              // expected
          }
          if (res == "") return 1
      tags: []

    # wrong first expression type
    - use: |-
          assert new Boolean()
      tags: [negative, compile-only]

    - use: |-
          assert new Boolean(): "Some string"
      tags: [negative, compile-only]

    - use: |-
          assert new Boolean(true)
      tags: [negative, compile-only]

    - use: |-
          assert new Boolean(true): "Some string"
      tags: [negative, compile-only]

    - use: |-
          assert 0
      tags: [negative, compile-only]

    - use: |-
          assert 42.0 : "Some string"
      tags: [negative, compile-only]

    - use: |-
          assert "true"
      tags: [negative, compile-only]

    # wrong second expression type
    - decl: |-
          let f = 41.0
      use: |-
          assert f == 41.0 : f
      tags: [negative, compile-only]

    - decl: |-
          let f = 41.0
      use: |-
          let obj = new Object()
          assert f == 41.0 : obj
      tags: [negative, compile-only]

    - decl: |-
          let f = 41.0
      use: |-
          assert f == 41.0 : f != 41.0
      tags: [negative, compile-only]

    - decl: |-
          let f = 41
      use: |-
          // missing second expression
          assert f == 41 :
      tags: [negative, compile-only]

    - decl: |-
          let f: string|null = ""
      use: |-
          assert f == "" : f
      tags: [negative, compile-only]

    - decl: |-
          let f: string|null = null
      use: |-
          assert f == "" : f
      tags: [negative, compile-only]

    - decl: |-
          let f: string|undefined = "abc"
      use: |-
          assert f == "abc" : f
      tags: [negative, compile-only]

    - decl: |-
          let f: string|undefined = undefined
      use: |-
          assert f == "abc" : f
      tags: [negative, compile-only]

    - decl: |-
          let f: string|null = ""
      use: |-
          assert f! == "" : f!
      tags: []

    - decl: |-
          let f: string|undefined = "abc"
      use: |-
          assert f! == "abc" : f!
      tags: []
