# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - { type: byte, val: (-1) as byte, res: 1 }
  - { type: short, val: (-1) as short, res: 2 }
  - { type: char, val: "c' '", res: 3 }
  - { type: int, val: -1, res: 4 }
  - { type: long, val: -1 as long, res: 5 }
  - { type: float, val: (-1.0) as float, res: 6 }
  - { type: double, val: -1.0, res: 7 }
  - { type: boolean, val: 'false', res: 8 }
  - { type: bigint, val: -1n, res: 9 }
  - { type: Byte, val: (-1) as byte, res: 1 }
  - { type: Short, val: (-1) as short, res: 2 }
  - { type: Char, val: "c' '", res: 3 }
  - { type: Int, val: -1, res: 4 }
  - { type: Long, val: -1 as long, res: 5 }
  - { type: Float, val: (-1.0) as float, res: 6 }
  - { type: Double, val: -1.0, res: 7 }
  - { type: Boolean, val: 'false', res: 8 }
  - { type: BigInt, val: new BigInt(-1), res: 9 }
  - { type: string, val: '""', res: 10 }
  - { type: Object, val: '""', res: 11 }
  - { type: 'FixedArray<byte>', val: '[0 as byte]', res: 101 }
  - { type: 'FixedArray<short>', val: '[0 as short]', res: 102 }
  - { type: 'FixedArray<char>', val: '[]', res: 103 }
  - { type: 'FixedArray<int>', val: '[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]', res: 104 }
  - { type: 'FixedArray<long>', val: '[1 as long, 2 as long, 3 as long]', res: 105}
  - { type: 'FixedArray<float>', val: '[1.0f as float, 2.0f as float, 3.0f as float]', res: 106 }
  - { type: 'FixedArray<boolean>', val: '[true, true, false]', res: 108 }
  - { type: 'FixedArray<Byte>', val: '[new Byte()]', res: 101 }
  - { type: 'FixedArray<Char>', val: "new Char[1]", res: 103 }
  - { type: 'FixedArray<Int>', val: 'new Int[200]', res: 104 }
  - { type: 'FixedArray<Short>', val: 'new Short[200]', res: 102 }
  - { type: 'FixedArray<FixedArray<FixedArray<Object>>>', val: 'new String[1][1][1]', res: 109 }
  - {
      type: 'FixedArray<Boolean>',
      val: '[new Boolean(), new Boolean(), new Boolean()]',
      res: 108
    }
  - { type: 'FixedArray<Object>', val: '[new Int(1), new Boolean()]', res: 109 }
  - { type: StringBuilder, val: new StringBuilder(), res: 11 }
  - { type: 'Comparable<Int>[]', val: '[new Int(0)]', res: 32 }