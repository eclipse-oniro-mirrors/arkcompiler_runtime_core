# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          // override-equivalent signatures
          class Ex extends Error {}
          class A {
              constructor(p: number) { if (p < 0) throw new Ex() }
              constructor(v: double) {}
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          // override-equivalent signatures
          class Ex extends Error {}
          class A {
              constructor(p: Number) { if (p < 0) throw new Ex() }
              constructor(v: Double) {}
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          // override-equivalent signatures
          class Ex extends Error {}
          class A {
              constructor(p: string) { if (p < 0) throw new Ex() }
              constructor(v: String) {}
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          type B = A
          // override-equivalent signatures
          class Ex extends Error {}
          class A {
              constructor(p: A) { if (p instanceof Error) throw new Ex() }
              constructor(v: B) {}
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          type B = A
          // override-equivalent signatures
          class Ex extends Error {}
          class A {
              constructor(p: A|string) { if (p instanceof A) throw new Ex() }
              constructor(v: string|B) {}
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          // primitives and boxed
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor(p: Object) { this.t = "should never be called" }
              constructor(p: Byte) { this.t = "Byte" }
              constructor(p: short) { this.t = "short" }
              constructor(p: Int) { this.t = "Int" }
              constructor(p: long) { this.t = "long" }
              constructor(p: Char) { this.t = "Char" }
              constructor(p: boolean) { this.t = "boolean" }
              constructor(p: Float) { this.t = "Float" }
              constructor(p: double) { this.t = "double" }
          }
      use: |-
          arktest.assertTrue(new A(new Byte(-1 as byte)).getType() == "Byte")
          arktest.assertTrue(new A(new Int(-1 as int)).getType() == "Int")
          arktest.assertTrue(new A(new Char(c'A')).getType() == "Char")
          arktest.assertTrue(new A(new Float(3.14f)).getType() == "Float")
          arktest.assertTrue(new A(-1 as long).getType() == "long")
          arktest.assertTrue(new A(-1 as short).getType() == "short")
          arktest.assertTrue(new A(false).getType() == "boolean")
          arktest.assertTrue(new A(3.14).getType() == "double")

    - decl: |-
          // enums
          enum Color { Red, Green=82, Blue }
          enum Size { S="small", M="medium", L="large" }
          enum Status { ready, set, go }
          class Ex extends Error {}
          let ex: Ex = new Ex()
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor(p: Object) { this.t = "should never be called" }
              constructor(p: Color) { if (p.valueOf() == 1) throw ex; else this.t = "Color" }
              constructor(p: Size) { this.t = "Size" }
              constructor(p: Status) { if (p.valueOf() == 1) throw ex; else this.t = "Status" }
          }
      use: |-
          try {
              arktest.assertTrue(new A(Color.Red).getType() == "Color")
              arktest.assertTrue(new A(Size.L).getType() == "Size")
              arktest.assertTrue(new A(Status.go).getType() == "Status")
          } catch (e) {
              arktest.assertTrue(false)
          }

    - decl: |-
          // arrays
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor() {}
              constructor(p: Object) { this.t = "should never be called" }
              constructor(p: FixedArray<A>) { this.t = "A" }
              constructor(p: FixedArray<char>) { this.t = "char" }
              constructor(p: FixedArray<byte>) { this.t = "byte" }
              constructor(p: FixedArray<int>) { this.t = "int" }
              constructor(p: FixedArray<boolean>) { this.t = "boolean" }
              constructor(p: FixedArray<Double>) { this.t = "Double" }
          }
      use: |-
          arktest.assertTrue(new A([-1 as byte]).getType() == "byte")
          arktest.assertTrue(new A([-1 as int]).getType() == "int")
          arktest.assertTrue(new A([c'A']).getType() == "char")
          arktest.assertTrue(new A([false]).getType() == "boolean")
          arktest.assertTrue(new A([new Double(3.14)]).getType() == "Double")
          arktest.assertTrue(new A(new A[1]).getType() == "A")

    - decl: |-
          // tuples
          type T = [number, string]
          type R = [number, boolean]
          class Ex extends Error {}
          let ex: Ex = new Ex()
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor() { throw ex }
              constructor(p: Object) { this.t = "should never be called" }
              constructor(p: T) { if (p[0] == 0) throw ex; else this.t = "T" }
              constructor(p: R) { this.t = "R" }
          }
      use: |-
          try {
              let t: T = [3.14, ""]
              arktest.assertTrue(new A(t).getType() == "T")
              let r: R = [3.14, false]
              arktest.assertTrue(new A(r).getType() == "R")
              t = [42.0, "xyz"]
              arktest.assertTrue(new A(t).getType() == "T")
          } catch (e) {
              arktest.assertTrue(false)
          }

    - decl: |-
          // unions, different throw clauses
          type USN = string | number
          type USB = string | Boolean
          class Ex extends Error {}
          let ex: Ex = new Ex()
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor() { throw ex }
              constructor(p: Object) { this.t = "should never be called" }
              constructor(p: USN) { if (p instanceof Error) throw ex; else this.t = "USN" }
              constructor(p: USB) { this.t = "USB" }
          }
      use: |-
          try {
              let usn: USN = "abc"
              arktest.assertTrue(new A(usn).getType() == "USN")
              usn = 42.0
              arktest.assertTrue(new A(usn).getType() == "USN")
              let usb: USB = new Boolean(true)
              arktest.assertTrue(new A(usb).getType() == "USB")
              usb = "xyz"
              arktest.assertTrue(new A(usb).getType() == "USB")
          } catch (e) {
              arktest.assertTrue(false)
          }

    - decl: |-
          // function types, different throw clauses
          type FF=(p: number) => string
          type EE=(p: string) => number
          class Ex extends Error {}
          let ex: Ex = new Ex()
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor() { throw ex }
              constructor(p: Object) { this.t = "should never be called" }
              constructor(p: FF) { if (p == this.t) throw ex; else this.t = "FF" }
              constructor(p: EE) { this.t = "EE" }
          }
          function fff(v: number): string {
              return " " + v + " "
          }
          function eee(v: string): number {
              return v == "" ? 0.0 : 1.0
          }
      use: |-
          try {
              let f: FF = fff
              arktest.assertTrue(new A(f).getType() == "FF")
              arktest.assertTrue(new A(eee).getType() == "EE")
          } catch (e) {
              arktest.assertTrue(false)
          }

    - decl: |-
          // nullish types
          type S=string
          type SN=string|null
          type SU=string|undefined
          type SNU=string|null|undefined
          class Ex extends Error {}
          let ex: Ex = new Ex()
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor() { throw ex }
              constructor(p: Object|null|undefined) { this.t = "should never be called" }
              constructor(p: SN) { if (this == ex) throw ex; else this.t = "SN" }
              constructor(p: SU) { this.t = "SU" }
              constructor(p: SNU) { if (this == ex) throw ex; this.t = "SNU" }
              constructor(p: S) { this.t = "S" }
          }
      use: |-
          try {
              let s: S = "ABC"
              arktest.assertTrue(new A(s).getType() == "S")
              let sn: SN = "ABC"
              arktest.assertTrue(new A(sn).getType() == "SN")
              let su: SU = "ABC"
              arktest.assertTrue(new A(su).getType() == "SU")
              let snu: SNU = "ABC"
              arktest.assertTrue(new A(snu).getType() == "SNU")
              sn = null
              arktest.assertTrue(new A(sn).getType() == "SN")
              su = undefined
              arktest.assertTrue(new A(su).getType() == "SU")
              snu = undefined
              arktest.assertTrue(new A(snu).getType() == "SNU")
          } catch (e) {
              arktest.assertTrue(false)
          }
