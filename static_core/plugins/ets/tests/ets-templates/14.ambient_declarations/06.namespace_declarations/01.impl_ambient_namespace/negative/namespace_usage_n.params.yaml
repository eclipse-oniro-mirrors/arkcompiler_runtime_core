# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  # classes
  - import: |-
      Ambient as A
    use: |-
      A.a 
  - import: |-
      Ambient as A
    use: |-
      A.x
      A.y
      A.z
  - import: |-
      Ambient as A
    use: |-
      A.z[0]
      A.x
      A.y
  - import: |-
      Ambient as A
    use: |-
      A.foo()
  - import: |-
      Ambient
    use: |-
      const a: Ambient.A = new Ambient.A()
      a.a
  - import: |-
      Ambient
    use: |-
      const a: Ambient.A = { a: 'a'}
      a.a
  - import: |-
      Ambient
    use: |-
      Ambient.NestedAmbient.foo('a')
  - import: |-
      Ambient as A
    use: |-
      const a: A.ColorExp = A.ColorExp.Red
      const i: int = a
  - import: |-
      Ambient as A
    use: |-
      const a: A.SeasonExp = A.SeasonExp.Winter
      const s: string = a
  - import: |-
      Ambient as A
    use: |-
      A.m[0][0]
  - import: |-
      Ambient as A
    use: |-
      A.NestedAmbientExp.x
      A.NestedAmbientExp.y
      A.NestedAmbientExp.foo()
      const a: A.NestedAmbientExp.A = new A.NestedAmbientExp.A 
      a.a
      const b: A.NestedAmbientExp.I = { a: 'a'}
      let l: string = b.a
      const s: A.NestedAmbientExp.Color = A.NestedAmbientExp.Color.Blue
      let i: int = s
      const w: A.NestedAmbientExp.Season = A.NestedAmbientExp.Season.Winter
      let z: string = w
      const m: A.NestedAmbientExp.Matrix = [[1,2],[1,2]]
  # accessability - not only top-level
  - import: |-
      Ambient as A
    decl: |-
      function foo(): int {
        return A.a
      }
    use: |-
      foo()
  - import: |-
      Ambient as A
    decl: |-
      class C {
        foo(): number {
          return A.foo()
        }
      }
    use: |-
      const c: C = new C()
      c.foo()
  - import: |-
      Ambient
    use: |-
      Ambient.NestedAmbient.foo('a')
