# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

declarations:
  # namespaces
  - >
    export namespace Ambient { 
      export const a: int = 1
    }
  - >
    export namespace Ambient {
      export let x: int = 1
      export let y: double = 2.0
      export let z: string = "z"
    }
  - >
    export namespace Ambient {
      export const x: Object = "object"
      export const y: float = 1.0
      export const z: Byte[] = [0x48, 0x65, 0x6C, 0x6C, 0x6F]
    }
  - >
    export namespace Ambient {
      export function foo(): number {
        return 1
      }
    }
  - >
    export namespace Ambient {
      export class A { a: string = 'a'}
    }
  - >
    export namespace Ambient {
      export interface A { a: string }
    }
  - >
    export namespace Ambient {
      export namespace NestedAmbient {
        export function foo(f: string): string {
          return f
        }
      }
    }
  - >
    export namespace Ambient {
      enum Color {White, Blue, Red}
      export enum ColorExp {White = 1, Blue, Red}
    }
  - >
    export namespace Ambient {
      const enum Season {Winter, Spring, Summer, Autumn}
      export const enum SeasonExp {Winter = 'w', Spring = 'sp', Summer = 'su', Autumn = 'a'}
    }
  - >
    export namespace Ambient {
      type Matrix = number[][]
      export type MatrixExp = number[][]
    }
  - >
    export namespace Ambient {
      namespace NestedAmbient {
        let x: int = 1
        const y: float = 1.0
        function foo(): void {}
        class A {}
        interface I {}
        enum Color {White, Blue, Red}
        const enum Season {Winter, Spring, Summer, Autumn}
        type Matrix = number[][]
      } 
      export namespace NestedAmbientExp {
        export let x: int = 2
        export const y: float = 2.0
        export function foo(): int { return 3 }
        export class A { a: string = 'a' }
        export interface I {        
          a: string
        }
        export enum Color {White = 3, Blue, Red}
        export const enum Season {Winter = 'w', Spring = 'sp', Summer = 'su', Autumn = 'a'}
        export type Matrix = number[][]
      }
    }
  - >
    export namespace Ambient { 
      export const a: int = 1
    }
  - >
    export namespace Ambient {
      export function foo(): number {
        return 1
      }
    }
