# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  # interfaces
  - import: |-
      A
    decl: |-
      class B implements A {
        a: string = 'b'
      }
    use: |-
      const b: A  = new B
      arktest.assertEQ(b.a, 'b')
  - import: |-
      B
    decl: |-
      class C implements B {
        a: int = 1
        b: float = 1.0f
        c: Byte[] = [0]
      }
    use: |-
      const c: B  = new C
      arktest.assertEQ(c.a, 1)
      arktest.assertEQ(c.b, 1.0)
      arktest.assertEQ(c.c[0], 0)
  - import: |-
      C
    decl: |-
      class D implements C {
        foo(x: number, y: string, z: double[]): string {
          return x.toString() + y + z.toString();
        }
      }
    use: |-
      const d: C  = new D
      arktest.assertEQ(d.foo(1, '1', [1]), '111')
  - import: |-
      D
    decl: |-
      class E implements D<string, number> {
        a: string = 'a'
        b: number = 1
      }
    use: |-
      const e: D<string, number> = new E
      arktest.assertEQ(e.a, 'a')
      arktest.assertEQ(e.b, 1)
  - import: |-
      E
    decl: |-
      class F implements E<number,number,string> {
        foo(x: number, y: number): string {
          return (x + y).toString()
        }
      }
    use: |-
      const f: E<number,number,string> = new F
      arktest.assertEQ(f.foo(1,1), '2')
  - import: |-
      M,F
    decl: |-
      class C implements M {
        a: string = 'a'
      }
    use: |-
      const c: F = new C
      arktest.assertEQ(c.a, 'a')
  - import: |-
      K
    decl: |-
      class B implements K {
        a: int = 1
        get foo(): int {return this.a}
        set foo(v: int) { this.a = v}
      }
    use: |-
      const b: K = new B
      arktest.assertEQ(b.a, 1)
      b.a = 2
      arktest.assertEQ(b.a, 2)
  - import: |-
      J
    decl: |-
      class I implements J {}
    use: |-
      const i: J = new I
      arktest.assertEQ(i.foo(1), '1')
