# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

declarations:
  # classes with no body
  - >
    declare class A
  - >
    declare final class B
  - >
    declare abstract class C
  - >
    class A {}

    declare class B extends A
  - >
    interface A {}

    declare class B implements A
  - >
    declare class A<T1, T2>

  # classes fields with initializers
  - >
    declare class A {
      a: number = 1;
    }
  - >
    declare final class B {
      b: number = 1;
    }
  - >
    declare abstract class C {
      c: number = 1;
    }
  - >
    class A {}

    declare class B extends A {
      b: number = 1;
    }
  - >
    interface A {}

    declare class B implements A {
      b: number = 1;
    }
  - >
    declare class A<T1, T2>

  # constructor, method and accessor declarations with bodies
  - >
    declare class A {
      a: number;
      constructor(a: number) {
        this.a = a;
      }
    }
  - >
    declare final class B {
      foo(b: number): number { return b }
    }
  - >
    declare abstract class C {
      foo(): void { console.log('c') }
    }
  - >
    class A {}

    declare class B extends A {
      f: int
      get foo(): int { return 1 }
      set foo(f: int) { this.f = f }
    }
  # private modifier
  - >
    declare class WithPrivateField {
      private x: int
    }
  - >
    declare class WithPrivateMethod {
      private foo(): int
    }
  - >
    declare class WithPrivateConstructor {
      private constructor()
    } 
