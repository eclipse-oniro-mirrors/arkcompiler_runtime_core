# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

implementations:
  - >
    export class A {}
  - >
    export final class B {}
  - >
    export abstract class C {}
    export class CC extends C {}
  - >
    export class B {}
  - >
    export class B {}
  - >
    export class A<T1,T2> {}
  - >
    export class A {
      s: string = 'a';
    }
  - >
    export class A {
      readonly v: int = 1;
    }
  - >
    export class A {
      static x: double = 1.0;
    }
  - >
    export class A<T> {
      v: T
    }
  - >
    export class A<U,V> {
      readonly v1: U;
      readonly v2: V;
      constructor(u: U,v: V) {
        this.v1 = u;
        this.v2 = v;
      }
    }
  - >
    export class A {}
  - >
    export class A {
      constructor(x: int) {}
    }
  - >
    export class A {
      constructor(x: short, y: double, z: string[]) {}
    }
  - >
    export class A<U,V> {
      constructor(u: U, v: V) { console.log('new A')}
    }
  - >
    export class A {
      foo(): void {}
    }
  - >
    export class A {}
    export class B extends A {
      foo(): void {}
    }
  - >
    export class A {
      static foo(): void {}
    }
  - >
    export class A {
      final foo(): void {}
    }
  - >
    export class A {
      foo(): void {}
    }
    export class B extends A {
      override foo(): void {}
    }
  - >
    export class A {
      native foo(): void
    }
  - >
    export class A {
      foo(x: int, y: int): string {
        return (x + y).toString()
      }
    }
  - >
    export class B<U,V> {
      u: U;
      v: V;
      constructor(u: U, v: V) {
        this.u = u;
        this.v = v;
      }
    }
    export class A<U, V, R> {
      foo(u: U, v: V): R {
        return new B<U,V>(u,v) as R;
      }
    }
  - >
    export class A {
      get foo(): int { return 1}
      set foo(x: int) {}
    }
  - >
    export abstract class A {
      abstract get foo(): int
      abstract set foo(x: int)
    }
    export class B extends A {
      get foo(): int { return 1}
      set foo(x: int) {}
    }
  - >
    export class A {
      final get foo(): int { return 1}
      final set foo(x: int) {}
    }
  - >
    export class A {
      static get foo(): int { return 1}
      static set foo(x: int) {}
    }
  - >
    export class A {
      private x: int
      get foo() { return this.x }
      set foo(x: int) { this.x = x }
    }
    export class B extends A {
      override get foo(): int { return 1}
      override set foo(x: int) {}
    }
