# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # List of shift operator negative test cases
cases:
  - {
      desc: "Left shift operator on bigint and int operands",
      lo_type: "bigint",
      lo_value: "12n",
      shift_op: "<<", 
      ro_type: "int",
      ro_value: "1"
    }
  - {
      desc: "Signed right shift operator on bigint and int operands",
      lo_type: "bigint",
      lo_value: "124n",
      shift_op: ">>", 
      ro_type: "int",
      ro_value: "2"
    }
  - {
      desc: "Unsigned right shift operator on bigint and int operands",
      lo_type: "bigint",
      lo_value: "14n",
      shift_op: ">>>", 
      ro_type: "int",
      ro_value: "3"
    }
  - {
      desc: "Left shift operator on int and bigint operands",
      lo_type: "int",
      lo_value: "129804",
      shift_op: "<<", 
      ro_type: "bigint",
      ro_value: "1"
    }
  - {
      desc: "Signed right shift operator on int and bigint operands",
      lo_type: "int",
      lo_value: "24",
      shift_op: ">>", 
      ro_type: "bigint",
      ro_value: "2"
    }
  - {
      desc: "Unsigned right shift operator on int and bigint operands",
      lo_type: "int",
      lo_value: "1",
      shift_op: ">>>", 
      ro_type: "bigint",
      ro_value: "3"
    }
  - {
      desc: "Left shift operator on bigint and long operands",
      lo_type: "bigint",
      lo_value: "12n",
      shift_op: "<<", 
      ro_type: "long",
      ro_value: "1"
    }
  - {
      desc: "Signed right shift operator on bigint and byte operands",
      lo_type: "bigint",
      lo_value: "124n",
      shift_op: ">>", 
      ro_type: "byte",
      ro_value: "2"
    }
  - {
      desc: "Unsigned right shift operator on bigint and short operands",
      lo_type: "bigint",
      lo_value: "14n",
      shift_op: ">>>", 
      ro_type: "short",
      ro_value: "3"
    }
  - {
      desc: "Unsigned right shift operator on bigint and bigint operands",
      lo_type: "bigint",
      lo_value: "14n",
      shift_op: ">>>", 
      ro_type: "bigint",
      ro_value: "3n"
    }
  - {
      desc: "Unsigned right shift operator on string and int operands",
      lo_type: "string",
      lo_value: "'10'",
      shift_op: ">>>", 
      ro_type: "int",
      ro_value: "1"
    }
  - {
      desc: "Left shift operator on int and char operands",
      lo_type: "int",
      lo_value: "12",
      shift_op: "<<", 
      ro_type: "char",
      ro_value: "c'a'"
    }
  - {
      desc: "Signed right shift operator on char and int operands",
      lo_type: "char",
      lo_value: "c'a'",
      shift_op: ">>", 
      ro_type: "int",
      ro_value: "1"
    }
