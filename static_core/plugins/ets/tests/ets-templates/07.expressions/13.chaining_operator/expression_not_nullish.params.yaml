# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
       class A {
           fldA: string = "abc"
           metA(p: string): string {
               return p
           }
       }
        
       class B {
           fldB: A = new A()
           metB(p: string): A  {
                     return new A()
          }
       }
      
       function boo(p: string): B {
           return new B()
       }
      use: |-
          arktest.assertTrue(boo("not null")?.fldB?.fldA === "abc")
          arktest.assertTrue(boo("not null")?.fldB?.metA("xyz") === "xyz")
          arktest.assertTrue(boo("not null")?.metB("not null")?.fldA === "abc")
          arktest.assertTrue(boo("not null")?.metB("not null")?.metA("xyz") === "xyz")

    - decl: |-
        let users: string[] = ["John", "Jane"];

      use: |-
        arktest.assertEQ(users?.[1], "Jane");

    - decl: |-
        class Person {
            name: string;
            getGreeting: () => string;
        
            constructor(name: string) {
                this.name = name;
                this.getGreeting = () => `Hello, ${this.name}`;
            }
        }
      use: |-
        const bob = new Person("Bob");
        arktest.assertEQ(bob.getGreeting?.(), "Hello, Bob");

    - decl: |-
        class Person {
            name: string;
            scores: int[];
        
            constructor(name: string) {
                this.name = name;
                this.scores = [90, 85, 95];
            }
        }
      use: |-
        const bob = new Person("Bob");
        arktest.assertEQ(bob.scores?.[0], 90);

    - decl: |-
        function greet(name?: string): string {
          return `Hello, ${name}`;
        }
      use: |-
        let name: string = "Alice";
        arktest.assertEQ(greet(name?.toUpperCase()), "Hello, ALICE");

    - decl: |-
        class A {
            b: B = new B();
        }
          
        class B {
            c: C = new C();
        }
          
        class C {
          value = "test";
        }
      use: |-
        const a1 = new A();
        arktest.assertEQ(a1?.b?.c?.value, "test");
