# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
cases:
  # Equality (==)
  - { desc: "bigint == function() (true)", b: '1n', op: '==', operand_val: '1', expected_bool: 'true' }
  - { desc: "bigint == function() (false)", b: '1n', op: '==', operand_val: '2', expected_bool: 'false' }
  - { desc: "bigint == function() (negative, true)", b: '-1n', op: '==', operand_val: '-1', expected_bool: 'true' }
  - { desc: "bigint == function() (negative, false)", b: '-1n', op: '==', operand_val: '1', expected_bool: 'false' }
  - { desc: "bigint == function() (float, true)", b: '1n', op: '==', operand_val: '1.0', expected_bool: 'true' }
  - { desc: "bigint == function() (float, false)", b: '1n', op: '==', operand_val: '2.0', expected_bool: 'false' }
  - { desc: "bigint == function() (zero)", b: '0n', op: '==', operand_val: '0', expected_bool: 'true' }

  # Inequality (!=)
  - { desc: "bigint != function() (true)", b: '1n', op: '!=', operand_val: '2', expected_bool: 'true' }
  - { desc: "bigint != function() (false)", b: '1n', op: '!=', operand_val: '1', expected_bool: 'false' }
  - { desc: "bigint != function() (negative, true)", b: '-1n', op: '!=', operand_val: '1', expected_bool: 'true' }
  - { desc: "bigint != function() (negative, false)", b: '-1n', op: '!=', operand_val: '-1', expected_bool: 'false' }
  - { desc: "bigint != function() (float, true)", b: '1n', op: '!=', operand_val: '2.0', expected_bool: 'true' }
  - { desc: "bigint != function() (float, false)", b: '1n', op: '!=', operand_val: '1.0', expected_bool: 'false' }
  - { desc: "bigint != function() (zero)", b: '0n', op: '!=', operand_val: '1', expected_bool: 'true' }

  # With BigInt constructor
  - { desc: "new BigInt == function() (true)", b: 'new BigInt(10)', op: '==', operand_val: '10', expected_bool: 'true' }
  - { desc: "new BigInt == function() (false)", b: 'new BigInt(10)', op: '==', operand_val: '20', expected_bool: 'false' }
  - { desc: "new BigInt != function() (true)", b: 'new BigInt(10)', op: '!=', operand_val: '20', expected_bool: 'true' }
  - { desc: "new BigInt != function() (false)", b: 'new BigInt(10)', op: '!=', operand_val: '10', expected_bool: 'false' }
