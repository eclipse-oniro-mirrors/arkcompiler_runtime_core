# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # assignment context
    - decl: |-
          let a: Array<boolean> = [true, true, true, true, true, true]
      use: |-
          // assignment context, array of primitives
          a = [!true, true, false]
          arktest.assertEQ(a[0], false)
          arktest.assertEQ(a[1], true)
          arktest.assertEQ(a[2], false)
          arktest.assertEQ(a.length, 3)

    - decl: |-
          let a: Array<long> = []
      use: |-
          // assignment context, array of primitives
          a = [1, 2, 3, -9223372036854775807 - 1]
          arktest.assertEQ(a[3], -9223372036854775808)
          arktest.assertEQ(a.length, 4)

    - decl: |-
          let a: Array<Array<int>> = []
      use: |-
          // assignment context, array of array of primitives
          a = [[-2147483647, 2, ], [3, ], [2 + 2, 5, 2147483646 + 1, ], [], ]
          arktest.assertEQ(a.length, 4)
          arktest.assertEQ(a[0][0], -2147483647)
          arktest.assertEQ(a[2][2], 2147483647)

    - decl: |-
          let a: Array<number> = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,]
      use: |-
          // assignment context, array of primitives
          a = [Number.NaN, 0, 3.14, 1.7976931348623157e+308, ]
          arktest.assertTrue(Number.isNaN(a[0]))
          arktest.assertEQ(a[3], 1.7976931348623157e+308)
          arktest.assertEQ(a.length, 4)

    - decl: |-
          let a: Array<Boolean> = []
      use: |-
          // assignment context, array of boxed
          a = [false, true, true]
          arktest.assertEQ(a[0].unboxed(), false)
          arktest.assertEQ(a[1].unboxed(), true)
          arktest.assertEQ(a[2].unboxed(), true)
          arktest.assertEQ(a.length, 3)

    - decl: |-
          let a: Array<Long> = []
      use: |-
          // assignment context, array of boxed
          a = [1, 2, 3, -9223372036854775808,]
          arktest.assertEQ(a[3].unboxed(), -9223372036854775808)
          arktest.assertEQ(a.length, 4)

    - decl: |-
          let a: Array<Number> = []
      use: |-
          // assignment context, array of boxed
          a = [Number.NaN, 0, 3.14, 1.7976931348623157e+308, ]
          arktest.assertTrue(Number.isNaN(a[0].unboxed()))
          arktest.assertEQ(a[3].unboxed(), 1.7976931348623157e+308)
          arktest.assertEQ(a.length, 4)

    - decl: |-
          let a: Array<Array<Number>> = []
      use: |-
          // assignment context, array of array of boxed
          a = [[1.7976931348623157e+308, 2, ], [3, ], [4, 5, 6, ], [], ]
          arktest.assertEQ(a.length, 4)
          arktest.assertEQ(a[0][0].unboxed(), 1.7976931348623157e+308)
          arktest.assertEQ(a[2][2].unboxed(), 6.0)

    - decl: |-
          let a: Array<string> = []
      use: |-
          // assignment context, array of strings
          a = ['1', '2', '', '-9223372036854775808', ]
          arktest.assertEQ(a[3], '-9223372036854775808')
          arktest.assertEQ(a.length, 4)

    - decl: |-
          let a: Array<string> = ['','','','','','','','','','','','','','','',]
      use: |-
          // assignment context, array of strings
          a = ['x', 'x' + '1', 'x' + '2', 'x' + '3', ]
          arktest.assertEQ(a[0], 'x')
          arktest.assertEQ(a[1], 'x1')
          arktest.assertEQ(a[2], 'x2')
          arktest.assertEQ(a[3], 'x3')
          arktest.assertEQ(a.length, 4)

    - decl: |-
          function bar(i: Int): Char {
              let v: Int = i + 1
              return v.toChar()
          }
          let a: Array<Char> = []
      use: |-
          // assignment context, array of chars
          a = [bar(42), bar(43), bar(44), ]
          arktest.assertEQ(a[0], c'+')
          arktest.assertEQ(a[1], c',')
          arktest.assertEQ(a[2], c'-')
          arktest.assertEQ(a.length, 3)

    - decl: |-
          let a: Array<Array<String>> = []
      use: |-
          // assignment context, array of array of strings
          let s = '1'
          a = [[s, s + s,], ['', '-9223372036854775808',], ]
          arktest.assertEQ(a[0][0], '1')
          arktest.assertEQ(a[0][1], '11')
          arktest.assertEQ(a[1][0], '')
          arktest.assertEQ(a[1][1], '-9223372036854775808')
          arktest.assertEQ(a.length, 2)

    - decl: |-
          let a: Array<bigint> = []
      use: |-
          // assignment context, array of bigint
          a = [1n, 2n, 33333333333333333333333333333333333333333333333333n]
          arktest.assertEQ(a[1], 2n)
          arktest.assertEQ(a[2], 33333333333333333333333333333333333333333333333333n)
          arktest.assertEQ(a.length, 3)

    - decl: |-
          let a: Array<Array<bigint>> = []
      use: |-
          // assignment context, array of array of bigint
          a = [[11111111111111111111111111111111111111111111111n], [2n], [33333333333333333333333333333333333333333333333333n]]
          arktest.assertEQ(a[0][0], 11111111111111111111111111111111111111111111111n)
          arktest.assertEQ(a[2][0], 33333333333333333333333333333333333333333333333333n)
          arktest.assertEQ(a.length, 3)

    - decl: |-
          class A {}
          let a: Array<A> = []
      use: |-
          // assignment context, array of A
          a = [{}]
          arktest.assertTrue(a[0] instanceof A)
          arktest.assertEQ(a.length, 1)

    - decl: |-
          class A<T> {}
          let v = new A<Number>
          let q = new A<Number>
          let a: Array<A<Number>> = []
      use: |-
          // assignment context, array of A<T>
          a = [v, q]
          arktest.assertEQ(a[0], v)
          arktest.assertEQ(a[1], q)
          arktest.assertEQ(a.length, 2)

    - decl: |-
          let a: Array<Array<Object>> = []
      use: |-
          // assignment context, array of array
          a = [["a", 1, true, 2n]]
          arktest.assertEQ(a[0][0] as string,  "a")
          arktest.assertEQ(a[0][1] as int,  1)
          arktest.assertEQ(a[0][2] as boolean,  true)
          arktest.assertEQ(a[0][3] as bigint,  2n)
          arktest.assertEQ(a.length, 1)

    - decl: |-
          enum Color { Red, Green, Blue }
          let a: Array<Color> = []
      use: |-
          // assignment context, array of enums
          a = [Color.Red, Color.Blue]
          arktest.assertEQ(a[0], Color.Red)
          arktest.assertEQ(a[1], Color.Blue)
          arktest.assertEQ(a.length, 2)

    - decl: |-
          enum Color { Red, Green, Blue }
          let a: Array<Array<Color>> = []
      use: |-
          // assignment context, array of array of enums
          a = [[Color.Red, Color.Blue]]
          arktest.assertEQ(a[0][0], Color.Red)
          arktest.assertEQ(a[0][1], Color.Blue)
          arktest.assertEQ(a.length, 1)

    - decl: |-
          enum Color { Red, Green, Blue }
          type F = (p: Color) => int
          let a: Array<F> = []
      use: |-
          // assignment context, array of functions
          a = [(p: Color): int => p.valueOf(), (p: Color): int => p.valueOf() + 1, (p: Color): int => p.valueOf() + 2]
          arktest.assertEQ(a[0](Color.Red), 0)
          arktest.assertEQ(a[1](Color.Red), 1)
          arktest.assertEQ(a[2](Color.Blue), 4)
          arktest.assertEQ(a.length, 3)

    - decl: |-
          enum Color { Red, Green, Blue }
          type F = (p: Color) => int
          let a: Array<Array<F>> = []
      use: |-
          // assignment context, array of array of functions
          a = [[(p: Color): int => p.valueOf()], [(p: Color): int => p.valueOf() + 1], [(p: Color): int => p.valueOf() + 2]]
          arktest.assertEQ(a[0][0](Color.Red), 0)
          arktest.assertEQ(a[1][0](Color.Red), 1)
          arktest.assertEQ(a[2][0](Color.Blue), 4)
          arktest.assertEQ(a.length, 3)

    - decl: |-
          let u: undefined = undefined
          let n: null = null
          let o: Object = {}
          let a: Array<null|undefined|Object> = []
      use: |-
          // assignment context, array of unions
          a = [n, o, o, u]
          arktest.assertEQ(a[0], null)
          arktest.assertEQ(a[1] as Object, o)
          arktest.assertEQ(a[2] as Object, o)
          arktest.assertEQ(a[3], undefined)
          arktest.assertEQ(a.length, 4)

    - decl: |-
          function sum(p: Array<Number>): number {
              let s: number = 0
              for (let v of p)
                  s += v
              return s
          }
          let a: Array<number> = [0]
      use: |-
          // assignment context
          a = [1, 2, 3, ]
          arktest.assertTrue( a.length == 3 && sum(a) == 6.0 )
          a = [1.1, 2.2, 3.3, 4.4]
          arktest.assertTrue( a.length == 4 && sum(a) == 11.0 )
          a = [0, 0, ]
          arktest.assertTrue( a.length == 2 && sum(a) == 0.0 )

    - decl: |-
          let a: Array<boolean|int|string|null> = []
      use: |-
          // assignment context, array of unions
          a = [true, 1, 'a', null]
          arktest.assertEQ(a[0], true)
          arktest.assertEQ(a[1], 1)
          arktest.assertEQ(a[2], 'a')
          arktest.assertEQ(a[3], null)
          arktest.assertEQ(a.length, 4)

    - decl: |-
          let a: Array<Array<boolean|int|string|null>> = []
      use: |-
          // assignment context, array of array of unions
          a = [[true, 1, 'a', null]]
          arktest.assertEQ(a[0][0], true)
          arktest.assertEQ(a[0][1], 1)
          arktest.assertEQ(a[0][2], 'a')
          arktest.assertEQ(a[0][3], null)
          arktest.assertEQ(a.length, 1)

    - decl: |-
          let e = new Error
          let a: Array<Number|Error|((p: string)=>string)|Boolean> = []
      use: |-
          // assignment context, array of union with boxed
          a = [e, false, (p: string): string => p + p, 42]
          arktest.assertEQ(a[0] as Error, e)
          arktest.assertEQ(a[1] as Boolean, false)
          arktest.assertEQ((a[2] as ((p: string) => string))('a'), 'aa')
          arktest.assertEQ(a[3] as Number, 42)
          arktest.assertEQ(a.length, 4)

    - decl: |-
          let e = new Error
          let a: Array<Array<Number|Error|((p: string)=>string)|Boolean>> = []
      use: |-
          // assignment context, array of array of union with boxed
          a = [[e], [false], [(p: string): string => p + p], [42]]
          arktest.assertEQ(a[0][0] as Error, e)
          arktest.assertEQ(a[1][0] as Boolean, false)
          arktest.assertEQ((a[2][0] as ((p: string) => string))('a'), 'aa')
          arktest.assertEQ(a[3][0] as Number, 42)
          arktest.assertEQ(a.length, 4)

    - decl: |-
          let a: Array<Number>|Array<String>|Array<Boolean>|null
      use: |-
          // assignment context, union of arrays
          a = [false, true, false]
          arktest.assertEQ((a as Array<Boolean>)[0], false)
          arktest.assertEQ((a as Array<Boolean>)[1], true)
          arktest.assertEQ((a as Array<Boolean>)[2], false)
          arktest.assertEQ((a as Array<Boolean>).length, 3)

    - decl: |-
          let a: Array<Number>|Array<String>|Array<Boolean>|null
      use: |-
          // assignment context, union of arrays
          a = [1, 2, 43]
          arktest.assertEQ((a as Array<Number>)[0], 1)
          arktest.assertEQ((a as Array<Number>)[1], 2)
          arktest.assertEQ((a as Array<Number>)[2], 43)
          arktest.assertEQ((a as Array<Number>).length, 3)

    - decl: |-
          let a: Array<Number>|Array<String>|Array<Boolean>|null
          let s = '4'
      use: |-
          // assignment context, union of arrays
          a = ['1', '2', s + '3']
          arktest.assertEQ((a as Array<String>)[0], '1')
          arktest.assertEQ((a as Array<String>)[1], '2')
          arktest.assertEQ((a as Array<String>)[2], '43')
          arktest.assertEQ((a as Array<String>).length, 3)

    - decl: |-
          enum Color { Red, Green, Blue }
          enum Size { S, M, L, XL }
          let a: Array<Color|Size> = []
      use: |-
          // assignment context, array of union of enums
          a = [Color.Red, Color.Green, Size.XL]
          arktest.assertEQ(a[0] as Color, Color.Red)
          arktest.assertEQ(a[1] as Color, Color.Green)
          arktest.assertEQ(a[2] as Size, Size.XL)
          arktest.assertEQ(a.length, 3)
