# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # call context
    - decl: |-
          function foo(a: [byte, int, long]) {
              arktest.assertEQ(a[0], 3)
              arktest.assertEQ(a[1], 42)
              arktest.assertEQ(a[2], -9223372036854775808)
          }
      use: |-
          // call context, tuple of primitives
          foo([0b11, 42, -9223372036854775808])

    - decl: |-
          function foo(a: [float, short, double, number]) {
              arktest.assertEQ(a[0], 111e11f)
              arktest.assertEQ(a[1], 33)
              arktest.assertTrue(Number.isNaN(a[2]))
              arktest.assertEQ(a[3], 1.7976931348623157e+308)
          }
      use: |-
          // call context, tuple of primitives
          foo([111e11f, 33, Number.NaN, 1.7976931348623157e+308, ])

    - decl: |-
          function foo(a: [Byte, Short, Int, Long]) {
              arktest.assertEQ(a[0], 1)
              arktest.assertEQ(a[1], 2)
              arktest.assertEQ(a[2], 3)
              arktest.assertEQ(a[3], -9223372036854775808)
          }
      use: |-
          // call context, tuple of boxed
          foo([1, 2, 3, -9223372036854775808,])

    - decl: |-
          function foo(a: [Number, Float, Int]) {
              arktest.assertTrue(Number.isNaN(a[0]))
              arktest.assertEQ(a[1], 0f)
              arktest.assertEQ(a[2], -2147483647)
          }
      use: |-
          // call context, tuple of boxed
          foo([Number.NaN, 0f, -2147483647])

    - decl: |-
          function foo(a: [[string, string], string, string]) {
              arktest.assertEQ(a[0][0], '1')
              arktest.assertEQ(a[0][1], '2')
              arktest.assertEQ(a[1], '')
              arktest.assertEQ(a[2], '-9223372036854775808')
          }
      use: |-
          // call context, tuple of strings
          foo([['1', '2',], '', '-9223372036854775808', ])

    - decl: |-
          class A {}
          function foo(a: [A, Object, A]) {
              arktest.assertTrue(a[0] instanceof A)
              arktest.assertTrue(a[1] instanceof Object)
              arktest.assertTrue(a[2] instanceof A)
          }
      use: |-
          // call context, tuple of class objects
          foo([{}, {}, new A])

    - decl: |-
          function foo(a: [[string, number], [[number], [int, boolean]]]) {
              arktest.assertEQ(a[0][0], '1')
              arktest.assertEQ(a[0][1], 1)
              arktest.assertEQ(a[1][0][0], 42)
              arktest.assertEQ(a[1][1][0], 33)
              arktest.assertEQ(a[1][1][1], true)
          }
      use: |-
          // call context, tuple of tuples
          foo([['1', 1], [[42], [33, true]]])

    - decl: |-
          function foo(a: [[byte, number], [number, byte]]) {
              arktest.assertEQ(a[0][0], 3)
              arktest.assertEQ(a[0][1], 222e22)
              arktest.assertEQ(a[1][0], 333e33)
              arktest.assertEQ(a[1][1], 2)
          }
      use: |-
          // call context, tuple of tuple of primitives
          foo([[0x03, 222e22], [333e33, 0x02]])

    - decl: |-
          function foo(a: [[Float, Float], [Long, Long], [Short]]) {
              arktest.assertEQ(a[0][0], -16777215f)
              arktest.assertEQ(a[0][1], 16777215f)
              arktest.assertEQ(a[1][0], -9223372036854775808)
              arktest.assertEQ(a[1][1], 9223372036854775807)
              arktest.assertEQ(a[2][0], 32767)
          }
      use: |-
          // call context, tuple of tuple of boxed
          foo([[-16777215, 16777215], [-9223372036854775808, 9223372036854775807], [32767]])

    - decl: |-
          function sum(p: [number, number, number]): number {
              return p[0] + p[1] + p[2]
          }
      use: |-
          // call context
          arktest.assertEQ( sum([1, 2, 3]), 6.0 )
          arktest.assertEQ( sum([1.1, 2.2, 3.3, ]), 6.6 )
          arktest.assertEQ( sum([0, 0, -1]), -1.0 )

    - decl: |-
          enum Color { Red, Green, Blue }
          enum Size { S, L, M, XL }
          function foo(a: [Color, Size, string]) {
              arktest.assertEQ(a[0], Color.Green)
              arktest.assertEQ(a[1], Size.XL)
              arktest.assertEQ(a[2], 'a')
          }
      use: |-
          // call context, tuple of enums
          foo([Color.Green, Size.XL, 'a'])

    - decl: |-
          type S = (p: string) => string
          type N = (p: number) => number
          function foo(a: [S, N, boolean]) {
              arktest.assertEQ(a[0]('a'), 'aa')
              arktest.assertEQ(a[1](42), 84)
              arktest.assertEQ(a[2], true)
          }
      use: |-
          // call context, tuple of functions
          foo([(p: string): string => p + p, (p: number): number => p + p, true])

    - decl: |-
          function foo(a: [byte[], long[], string[]]) {
              arktest.assertEQ(a[0][0], 0)
              arktest.assertEQ(a[0][1], 15)
              arktest.assertEQ(a[0][2], 127)
              arktest.assertEQ(a[1][0], -9223372036854775808)
              arktest.assertEQ(a[1][1], 9223372036854775807)
              arktest.assertEQ(a[2][0], 'a')
              arktest.assertEQ(a[2][1], 'b')
              arktest.assertEQ(a[2][2], 'c')
          }
      use: |-
          // call context, tuple of arrays
          foo([[0x00, 0x0f, 0x7f], [-9223372036854775808, 9223372036854775807], ['a', 'b', 'c']])

    - decl: |-
          function foo(a: [Array<byte>, Array<long>, Array<string>]) {
              arktest.assertEQ(a[0][0], 0)
              arktest.assertEQ(a[0][1], 15)
              arktest.assertEQ(a[0][2], 127)
              arktest.assertEQ(a[1][0], -9223372036854775808)
              arktest.assertEQ(a[1][1], 9223372036854775807)
              arktest.assertEQ(a[2][0], 'a')
              arktest.assertEQ(a[2][1], 'b')
              arktest.assertEQ(a[2][2], 'c')
          }
      use: |-
          // declaration context, tuple of arrays
          foo([[0x00, 0x0f, 0x7f], [-9223372036854775808, 9223372036854775807], ['a', 'b', 'c']])

    - decl: |-
          function foo(a: [FixedArray<byte>, FixedArray<long>, FixedArray<string>]) {
              arktest.assertEQ(a[0][0], 0)
              arktest.assertEQ(a[0][1], 15)
              arktest.assertEQ(a[0][2], 127)
              arktest.assertEQ(a[1][0], -9223372036854775808)
              arktest.assertEQ(a[1][1], 9223372036854775807)
              arktest.assertEQ(a[2][0], 'a')
              arktest.assertEQ(a[2][1], 'b')
              arktest.assertEQ(a[2][2], 'c')
          }
      use: |-
          // declaration context, tuple of arrays
          foo([[0x00, 0x0f, 0x7f], [-9223372036854775808, 9223372036854775807], ['a', 'b', 'c']])
