# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - use: |-
          let a = [new Object, new Boolean]
          arktest.assertTrue( a instanceof Object[] )

    - use: |-
          let b = ["a", "b" + "c"]
          arktest.assertTrue( b instanceof string[] )

    - use: |-
          let c = [1, 2, 3]
          arktest.assertTrue( c instanceof number[] )

    - use: |-
          let d = ["a", 1, 3.14]
          arktest.assertTrue( d instanceof (string|number)[] )

    - use: |-
          let d = ["a" + "", 1, 3.14]
          arktest.assertTrue( d instanceof (String|Number)[] )

    - decl: |-
          class A {}
      use: |-
          let e = [(): void => {}, new A]
          arktest.assertTrue( e instanceof ((() => void) | A)[] )

    - use: |-
          let x = [new Long(), new Number(), new Short()]
          arktest.assertTrue( x instanceof Numeric[] )

    - use: |-
          let x = [new Long(), new Number(), null, new Short(), undefined]
          arktest.assertTrue( x instanceof (number|null|undefined)[] )

    - decl: |-
          let cnt: number
          type F = () => number
          function foo(): number {
              return cnt++
          }
          function bar(): number {
              return ++cnt
          }
          function baz(): number {
              return cnt--
          }
      use: |-
          arktest.assertTrue( [bar, null, baz, foo] instanceof (F|null)[] )

    - use: |-
          arktest.assertTrue( [false, 1, 14, 33.98] instanceof (Number|Boolean)[] )

    - use: |-
          arktest.assertTrue( [0 as long, "0", 0 as short, 0x1 as int] instanceof (number|string)[] )

    - use: |-
          arktest.assertTrue( [new Object(), null, new Error(), null] instanceof (Object|null)[] )

    - use: |-
          arktest.assertTrue( [new Boolean(true), "aaa", new Long()] instanceof (Boolean|string|long)[] )

    - use: |-
          arktest.assertTrue( ["aa", "bb", null, "cc", null] instanceof (string|null)[] )

    - use: |-
          arktest.assertTrue( [0, 1, 2, "aaa", 3, "bbb"] instanceof (string|int)[] )

    - use: |-
          arktest.assertTrue( [null, null, null, ] instanceof (null)[] )

    - use: |-
          arktest.assertTrue( [undefined, undefined] instanceof (undefined)[] )

    - use: |-
          arktest.assertTrue( [null, undefined] instanceof (null|undefined)[] )

    - use: |-
          arktest.assertTrue( [(p: string): number => { return p.length }] instanceof ((p: string) => number)[] )

    - decl: |-
          let a = [true, "a", 42.0]
      use: |-
          arktest.assertTrue( a instanceof (Boolean|string|Number)[] )

    - decl: |-
          class A {}
          class B {}
          class C {}
          let a = [{} as A, {} as B, {} as C, {} as A, {} as B, {} as C]
      use: |-
          arktest.assertTrue( a instanceof (A|B|C)[] )

    - decl: |-
          class A {}
          class B extends A {}
          class C extends B {}
          let a = [{} as A, {} as B, {} as C, {} as A, {} as B, {} as C]
      use: |-
          arktest.assertTrue( a instanceof A[] )

    - decl: |-
          let a = ["a", "b", "c", "s", ]
      use: |-
          arktest.assertTrue( a instanceof string[] )

    - decl: |-
          let s: string = "s"
          let a = ["a", "b", "c", s, ]
      use: |-
          arktest.assertTrue( a instanceof string[] )

    - decl: |-
          interface I {}
          interface J {}
          class A implements I {}
          class B implements J {}
          let a: I = new A
          let b: J = new B
      use: |-
          let x = [a, b, "a", "b", a, b, "a", "b"]
          arktest.assertTrue( x instanceof (I|J|string)[] )

    - decl: |-
          let a = c'1'
      use: |-
          let x = [a, c'2', '1', '2',]
          arktest.assertTrue( x instanceof (string|Char)[])

    - decl: |-
          let b: bigint|double = 0n
          let c: double|string = "0"
          let d: [number, Error] = [1.0, new Error]
      use: |-
          let x = [b, c, d, "1"]
          arktest.assertTrue(x instanceof (string|[number, Error]|Double|BigInt)[])
