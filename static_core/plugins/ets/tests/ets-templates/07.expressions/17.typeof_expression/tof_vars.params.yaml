# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - res: 'number'
      vals:
          - { type: number, expr: Number.MIN_VALUE }
          - { type: number, expr: Number.MAX_VALUE }

    - res: 'number'
      vals:
          - { type: double, expr: Double.MIN_VALUE }
          - { type: double, expr: Double.MAX_VALUE }

    - res: 'string'
      decl: |-
          let a = 42
      vals:
          - { type: string, expr: '"ABC"' }
          - { type: string, expr: "'' + '' + 'CDE'" }
          - { type: string, expr: '`a = ${a}` + '''' + "CDE"' }
          - { type: Comparable<String>, expr: '"X"' }

    - res: 'boolean'
      vals:
          - { type: boolean, expr: 'true' }
          - { type: boolean, expr: 'false' }
          - { type: Comparable<Boolean>, expr: 'new Boolean()' }

    - res: 'bigint'
      vals:
          - { type: bigint, expr: '123456789012345678901234567890n' }
          - { type: bigint, expr: '999999999999999999999999999999n' }

    - res: 'object'
      decl: |-
          interface I {}
          class A implements I {}
      vals:
          - { type: A, expr: '{}' }
          - { type: I, expr: 'new A()' }

    - res: 'number'
      vals:
          - { type: 'Numeric', expr: '3.14' }

    - res: 'object'
      vals:
          - { type: 'number[]', expr: '[Number.MIN_VALUE]' }
          - { type: 'number[]', expr: '[Number.MAX_VALUE]' }

    - res: 'object'
      vals:
          - { type: 'byte[]', expr: '[Byte.MIN_VALUE]' }
          - { type: 'short[]', expr: '[Short.MIN_VALUE]' }
          - { type: 'int[]', expr: '[Int.MAX_VALUE]' }
          - { type: 'long[]', expr: '[Long.MIN_VALUE]' }
          - { type: 'float[]', expr: '[Float.MIN_VALUE]' }
          - { type: 'double[]', expr: '[Double.MIN_VALUE]' }
          - { type: 'char[]', expr: '[Char.MIN_VALUE as char]' }

    - res: 'object'
      decl: |-
          interface I {}
          class A implements I {}
      vals:
          - { type: 'A[]', expr: '[new A]' }
          - { type: 'I[]', expr: '[new A]' }
          - { type: 'Comparable<Float>[]', expr: '[3.14f]' }

    - res: 'object'
      vals:
          - { type: 'Floating[]', expr: '[3.14f]' }
          - { type: 'Integral[]', expr: '[42]' }
          - { type: 'Numeric[]', expr: '[3.14]' }

    - res: 'function'
      decl: |-
          type F = (p: int) => int
          function foo(p: int): int {
              return p + p
          }
          let f: F = (p: int): int => { return p * p }
      vals:
          - { type: F, expr: 'foo' }
          - { type: '((p: int) => int)', expr: 'foo' }
          - { type: F, expr: 'f' }
          - { type: '((p: int) => int)', expr: 'f' }
          - { type: '(() => void)', expr: '() => { console.log(1) }' }

    - res: 'undefined'
      vals:
          - { type: 'undefined', expr: 'undefined' }

    - res: 'object'
      vals:
          - { type: 'null', expr: 'null' }

    - res: 'object'
      decl: |-
          interface I {}
          class A implements I {}
      vals:
          - { type: 'A|null', expr: 'new A()' }
          - { type: 'A|null', expr: 'null' }
          - { type: 'I|null', expr: 'new A()' }
          - { type: 'I|null', expr: 'null' }
          - { type: 'A[]|null', expr: '[new A()]' }
          - { type: 'A[]|null', expr: 'null' }
          - { type: 'I[]|null', expr: '[new A()]' } # array type should be inferred from context
          - { type: 'I[]|null', expr: 'null' }

    - res: 'number'
      decl: |-
          enum Color { Red, Green, Blue }
          enum Size { S, M, L, XL }
      vals:
          - { type: Color, expr: Color.Red }
          - { type: Size, expr: Size.XL }

    - res: 'string'
      decl: |-
          enum Color { Red = "red", Green = "green", Blue = "blue" }
          enum Size { S = "small", M = "mid", L = "large", XL = "extra-large" }
      vals:
          - { type: Color, expr: Color.Blue }
          - { type: Size, expr: Size.L }

    - res: 'boolean'
      vals:
          - { type: 'number|string|boolean', expr: 'false' }
          - { type: 'number|boolean', expr: 'true' }
          - { type: 'boolean|never|long', expr: 'true' }

    - res: 'string'
      vals:
          - { type: 'number|string|boolean', expr: '"false"' }
          - { type: 'number|string', expr: '"3.14"' }
          - { type: 'boolean|never|long|string', expr: '"1234567890"' }

    - res: 'object'
      decl: |-
          class A {}
          class B {}
          class C {}
      vals:
          - { type: 'A|B|C', expr: 'new A()' }
          - { type: 'B|never|undefined|A', expr: 'new A()' }

    - res: 'object'
      decl: |-
          interface I {}
          class A implements I {}
          class B extends A {}
          class C<T> {
              fld: T
              constructor(p: T) {
                  this.fld = p
              }
          }
      vals:
          - { type: 'C<A>', expr: 'new C<A>(new A())' }
          - { type: 'C<B>', expr: 'new C<B>(new B())' }
          - { type: 'C<I>', expr: 'new C<I>(new B())' }

    - res: 'number'
      vals:
          - { type: 'Comparable<Double>', expr: 'new Double()' }

    - res: 'byte'
      vals:
          - { type: byte, expr: Byte.MIN_VALUE }
          - { type: byte, expr: Byte.MAX_VALUE }

    - res: 'short'
      vals:
          - { type: short, expr: Short.MIN_VALUE }
          - { type: short, expr: Short.MAX_VALUE }

    - res: 'int'
      vals:
          - { type: int, expr: Int.MIN_VALUE }
          - { type: int, expr: Int.MAX_VALUE }

    - res: 'long'
      vals:
          - { type: long, expr: Long.MIN_VALUE }
          - { type: long, expr: Long.MAX_VALUE }

    - res: 'float'
      vals:
          - { type: float, expr: Float.MIN_VALUE }
          - { type: float, expr: Float.MAX_VALUE }

    - res: 'char'
      vals:
          - { type: char, expr: Char.MIN_VALUE as char }
          - { type: char, expr: Char.MAX_VALUE as char }

    - res: 'float'
      vals:
          - { type: 'Comparable<Float>', expr: 'new Float()' }

    - res: 'byte'
      vals:
          - { type: 'Comparable<Byte>', expr: 'new Byte()' }

    - res: 'short'
      vals:
          - { type: 'Comparable<Short>', expr: 'new Short()' }

    - res: 'int'
      vals:
          - { type: 'Comparable<Int>', expr: 'new Int()' }

    - res: 'long'
      vals:
          - { type: 'Comparable<Long>', expr: 'new Long()' }

    - res: 'char'
      vals:
          - { type: 'Comparable<Char>', expr: 'new Char()' }

    - res: 'float'
      vals:
          - { type: 'Floating', expr: '3.14f' }

    - res: 'int'
      vals:
          - { type: 'Integral', expr: '42' }
