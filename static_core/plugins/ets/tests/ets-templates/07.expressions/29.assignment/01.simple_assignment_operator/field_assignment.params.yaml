# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - desc: 'Positive case for field assignment'
    compute_field: 'return ""'
    field: 'public fld: string = computeField()'
    class_constructor: ''
    value: 'return "abc"'
    main: |-
      let s: string = getObj().fld = getValue()
    assert_result: '"getObj computeField classConstructor getValue "'
    assert_s: '"abc"'

  - desc: 'Positive case for static field assignment. Only rhsExpression is evaluated'
    compute_field: 'return ""'
    field: 'public static fld: string = computeField()'
    class_constructor: ''
    value: 'return "abc"'
    main: |-
      A.fld = "";
      let s: string = ((A.fld)) = getValue()
    assert_result: '"computeField getValue "'
    assert_s: '"abc"'

  - desc: 'Negative case for field assignment. E evaluation completes abruptely'
    compute_field: 'return ""'
    field: 'public fld: string'
    class_constructor: 'throw new Error("Any error to break assignment")'
    value: 'return "abc"'
    main: |-
      let s: string = ""
      let expectedException = (e: Error): boolean => { return (e instanceof Error) }
      arktest.expectThrow(() => { s = (getObj().fld) = getValue() }, expectedException)
    assert_result: '"getObj classConstructor "'
    assert_s: '""'

  - desc: 'Negative case for field assignment. F evaluation completes abruptely'
    compute_field: |-
      throw new Error("Any error to break assignment")
      return ""
    field: 'public fld: string = computeField()'
    class_constructor: ''
    value: 'return "abc"'
    main: |-
      let s: string = ""
      let expectedException = (e: Error): boolean => { return (e instanceof Error) }
      arktest.expectThrow(() => { s = ((getObj().fld)) = getValue() }, expectedException)
    assert_result: '"getObj computeField "'
    assert_s: '""'

  - desc: 'Negative case for static field assignment. F evaluation completes abruptely'
    compute_field: |-
      throw new Error("Any error to break assignment")
      return ""
    field: 'public static fld: string = computeField()'
    class_constructor: ''
    value: 'return "abc"'
    main: |-
      let s: string = ""
      let expectedException = (e: Error): boolean => { return (e instanceof Error) }
      arktest.expectThrow(() => { s = ((A.fld)) = getValue() }, expectedException)
    assert_result: '"getValue computeField "'
    assert_s: '""'

  - desc: 'Negative case for field assignment. Rhs evaluation completes abruptely'
    compute_field: 'return ""'
    field: 'public fld: string = computeField()'
    class_constructor: ''
    value: |-
      throw new Error("Any error to break assignment")
      return "abc"
    main: |-
      let s: string = ""
      let expectedException = (e: Error): boolean => { return (e instanceof Error) }
      arktest.expectThrow(() => { s = (getObj().fld) = getValue() }, expectedException)
    assert_result: '"getObj computeField classConstructor getValue "'
    assert_s: '""'

  - desc: 'Negative case for static field assignment. Rhs evaluation completes abruptely'
    compute_field: 'return ""'
    field: 'public static fld: string = computeField()'
    class_constructor: ''
    value: |-
      throw new Error("Any error to break assignment")
      return "abc"
    main: |-
      let s: string = ""
      let expectedException = (e: Error): boolean => { return (e instanceof Error) }
      arktest.expectThrow(() => { s = ((A.fld)) = getValue() }, expectedException)
    assert_result: '"getValue "'
    assert_s: '""'