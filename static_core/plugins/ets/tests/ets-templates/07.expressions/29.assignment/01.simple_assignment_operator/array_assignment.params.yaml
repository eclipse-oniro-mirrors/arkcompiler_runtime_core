# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - desc: 'Positive case for array assignment'
    array: |-
      arr = ["abc", "def", "ghi"]
      return arr
    index: |-
      return i
    value: |-
      return "test"
    main: |-
      ((getArray()[getIndex(1)])) = getValue()
      let s: string = arr[1]
      let arr_expected: string[] = ["abc", "test", "ghi"]
      for (let j:int = 0; j < arr.length; j++) {
        arktest.assertEQ(arr[j], arr_expected[j])
      }
    assert_result: '"getArray getIndex getValue "'
    assert_s: '"test"'


  - desc: 'Negative case. Array reference completes abruptly'
    array: |-
      throw new Error("Any error to break assignment")
      return ["abc", "def", "ghi"]
    index: |-
      return i
    value: |-
      return "test"
    main: |-
      let s: string = ""
      let expectedException = (e: Error): boolean => { return (e instanceof Error) }
      arktest.expectThrow(() => { s = getArray()[getIndex(1)] = getValue() }, expectedException)
    assert_result: '"getArray "'
    assert_s: '""'

  - desc: 'Negative case. Array index completes abruptly'
    array: |-
      return ["abc", "def", "ghi"]
    index: |-
      throw new Error("Any error to break assignment")
      return i
    value: |-
      return "test"
    main: |-
      let s: string = ""
      let expectedException = (e: Error): boolean => { return (e instanceof Error) }
      arktest.expectThrow(() => { s = getArray()[getIndex(1)] = getValue() }, expectedException)
    assert_result: '"getArray getIndex "'
    assert_s: '""'

  - desc: 'Negative case. Rhs value completes abruptly'
    array: |-
      return ["abc", "def", "ghi"]
    index: |-
      return i
    value: |-
      throw new Error("Any error to break assignment")
      return "test"
    main: |-
      let s: string = ""
      let expectedException = (e: Error): boolean => { return (e instanceof Error) }
      arktest.expectThrow(() => { s = getArray()[getIndex(1)] = getValue() }, expectedException)
    assert_result: '"getArray getIndex getValue "'
    assert_s: '""'

  - desc: 'Negative case. Index value is less then zero'
    array: |-
      return ["abc", "def", "ghi"]
    index: |-
      return -1
    value: |-
      return "test"
    main: |-
      let s: string = ""
      let expectedException = (e: Error): boolean => { return (e instanceof RangeError) }
      arktest.expectThrow(() => { s = getArray()[getIndex(1)] = getValue() }, expectedException)
    assert_result: '"getArray getIndex getValue "'
    assert_s: '""'

  - desc: 'Negative case. Index value is greater then array size'
    array: |-
      return ["abc", "def", "ghi"]
    index: |-
      return 4
    value: |-
      return "test"
    main: |-
      let s: string = ""
      let expectedException = (e: Error): boolean => { return (e instanceof RangeError) }
      arktest.expectThrow(() => { s = getArray()[getIndex(1)] = getValue() }, expectedException)
    assert_result: '"getArray getIndex getValue "'
    assert_s: '""'

  - desc: 'Negative case. Index value is equal to array size'
    array: |-
      return []
    index: |-
      return 0
    value: |-
      return "test"
    main: |-
      let s: string = ""
      let expectedException = (e: Error): boolean => { return (e instanceof RangeError) }
      arktest.expectThrow(() => { s = getArray()[getIndex(1)] = getValue() }, expectedException)
    assert_result: '"getArray getIndex getValue "'
    assert_s: '""'