# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - import: |-
        import {A} from "./modules/declarations.sts"  // Base class
        import {RA} from "./modules/reexported_directives.sts"  // Base class
    call: |-
        let a: A = new A();
        let b: RA = new RA();
        assertTrue(a instanceof RA);
        assertTrue(b instanceof A);

  - import: |-
        import {A} from "./modules/declarations.sts"  // Base class
        import {B} from "./modules/declarations.sts"  // Derived class
        import {RA} from "./modules/reexported_directives.sts"  // Base class
        import {RB} from "./modules/reexported_directives.sts"  // Derived class
    call: |-
        let a: B = new B();
        let b: RB = new RB();
        assertTrue(a instanceof A);
        assertTrue(b instanceof RA);

  - import: |-
        import {AC} from "./modules/declarations.sts"  // Abstract class
        import {C} from "./modules/declarations.sts"  // Derived class
        import {RAC} from "./modules/reexported_directives.sts"  // Abstract class
        import {RC} from "./modules/reexported_directives.sts"  // Derived class
    call: |-
        let a: AC = new C();
        let b: RAC = new RC();
        assertTrue(a instanceof RAC);
        assertTrue(b instanceof AC);

  - import: |-
        import {I} from "./modules/declarations.sts"  // Base interface
        import {II} from "./modules/declarations.sts"  // Derived interface
        import {RI} from "./modules/reexported_directives.sts"  // Base interface
        import {RII} from "./modules/reexported_directives.sts"  // Derived interface
    decl: |-
        class A implements I {};
        class B implements II {};
        class RA implements RI {};
        class RB implements RII {};
    call: |-
        let a: I = new B();
        let b: RI = new RB();
        assertTrue(a instanceof RI);
        assertTrue(a instanceof RII);
        assertTrue(b instanceof I);
        assertTrue(b instanceof II);

        let c: A = new A();
        let d: RA = new RA();
        assertTrue(c instanceof RI);
        assertTrue(d instanceof I);

  - import: |-
        import {I} from "./modules/declarations.sts"  // Base interface
        import {II} from "./modules/declarations.sts"  // Derived interface
        import {D} from "./modules/declarations.sts"  // Derived class
        import {RI} from "./modules/reexported_directives.sts"  // Base interface
        import {RII} from "./modules/reexported_directives.sts"  // Derived interface
        import {RD} from "./modules/reexported_directives.sts"  // Derived class
    call: |-
        let a: I = new D();
        let b: RI = new RD();
        assertTrue(a instanceof RD);
        assertTrue(a instanceof RI);
        assertTrue(a instanceof RII);
        assertTrue(b instanceof D);
        assertTrue(b instanceof I);
        assertTrue(b instanceof II);

  - import: |-
        import {ENUM} from "./modules/declarations.sts"  // Enum
        import {RENUM} from "./modules/reexported_directives.sts"  // Enum
    call: |-
        assertTrue(ENUM.Red.valueOf() == RENUM.Red.valueOf());
        assertTrue(ENUM.Blue.valueOf() == RENUM.Blue.valueOf());

  - import: |-
        import {A} from "./modules/declarations.sts"  // Base class
        import {CLASS_A} from "./modules/declarations.sts"  // Type, class
        import {RA} from "./modules/reexported_directives.sts"  // Base class
        import {RCLASS_A} from "./modules/reexported_directives.sts"  // Type, class
    call: |-
        let a: CLASS_A = new CLASS_A();
        let b: RCLASS_A = new RCLASS_A();
        assertTrue(a instanceof RA);
        assertTrue(b instanceof A);

  - import: |-
        import {VAR_i} from "./modules/declarations.sts"  // variable of primitive type (int)
        import {RVAR_i} from "./modules/reexported_directives.sts"  // variable of primitive type (int)
    call: |-
        let a: VAR_i = 3;
        let b: RVAR_i = 3;
        assertTrue(a == b);

  - import: |-
        import {TPL} from "./modules/declarations.sts"  // Tuple type
        import {RTPL} from "./modules/reexported_directives.sts"  // Tuple type
    call: |-
        let a: TPL = [new Number(), new String()];
        let b: RTPL = [new Number(), new String()];
        assertTrue(a instanceof RTPL);
        assertTrue(b instanceof TPL);

  - import: |-
        import {NoArg} from "./modules/declarations.sts"  // Function without arguments
        import {res} from "./modules/declarations.sts"
        import {RNoArg} from "./modules/reexported_directives.sts"  // Function without arguments
    call: |-
        NoArg();
        assertTrue(res == 1);
        res = 0;
        RNoArg();
        assertTrue(res == 1);

  - import: |-
        import {OneArg} from "./modules/declarations.sts"  // Function, argument of Number type
        import {ROneArg} from "./modules/reexported_directives.sts"  // Function, argument of Number type
    call: |-
        assertTrue(OneArg(new Number()) == ROneArg(new Number()));

  - import: |-
        import {TwoArgs} from "./modules/declarations.sts"  // Function, arguments of char and byte types
        import {RTwoArgs} from "./modules/reexported_directives.sts"  // Function, arguments of char and byte types
    call: |-
        assertTrue(TwoArgs(c'A', 1 as byte) == RTwoArgs(c'B', 2 as byte));

  - import: |-
        import {Gen} from "./modules/declarations.sts"  // Function, generic argument
        import {RGen} from "./modules/reexported_directives.sts"  // Function, generic argument
    call: |-
        let s = "knock-knock";
        assertTrue(Gen(s) == RGen(s));
        assertTrue(Gen(new Number(1.45)) == RGen(new Number(1.45)));

  - import: |-
        import {ArgFun} from "./modules/declarations.sts"  // Function, argument is of function type
        import {RArgFun} from "./modules/reexported_directives.sts"  // Function, argument is of function type
    call: |-
        assertTrue(ArgFun( () => { return 3; } ) == RArgFun( () => { return 3; } ));
        assertTrue(RArgFun( () => { return 4; } ) == 4 );

  - import: |-
        import {ArgFun2} from "./modules/declarations.sts"  // Function, arguments - function type + primitive
        import {RArgFun2} from "./modules/reexported_directives.sts"  // Function, arguments - function type + primitive
    call: |-
        assertTrue(ArgFun2( (i) => { return i; }, 4) == RArgFun2( (i) => { return i; }, 4));
        assertTrue(RArgFun2( (i) => { return i; }, 5) == 5);

  - import: |-
        import {a} from "./modules/declarations.sts"  // Variable, primitive, implicit type
        import {ra} from "./modules/reexported_directives.sts"  // Variable, primitive, implicit type
    call: |-
        assertTrue(ra == 1);
        ra += 3;
        assertTrue(a == 4);
        assertTrue(ra == 4);
        a = 1;

  - import: |-
        import {i} from "./modules/declarations.sts"  // Variable, int
        import {ri} from "./modules/reexported_directives.sts"  // Variable, int
    call: |-
        assertTrue(ri == 2);
        i += 3;
        assertTrue(i == 5);
        assertTrue(ri == 5);
        i = 2;

  - import: |-
        import {n} from "./modules/declarations.sts"  // Variable, number
        import {rn} from "./modules/reexported_directives.sts"  // Variable, number
    call: |-
        assertTrue(rn == 3);
        rn += 0.2;
        assertTrue(n == 3.2);
        assertTrue(rn == 3.2);
        n = 3;

  - import: |-
        import {s} from "./modules/declarations.sts"  // Variable, String
        import {rs} from "./modules/reexported_directives.sts"  // Variable, String
    call: |-
        assertTrue(rs == "knock-knock");
        s += " who`s there";
        assertTrue(s == "knock-knock who`s there");
        assertTrue(rs == "knock-knock who`s there");
        s = "knock-knock";

  - import: |-
        import {c} from "./modules/declarations.sts"  // Variable, char
        import {rc} from "./modules/reexported_directives.sts"  // Variable, char
    call: |-
        assertTrue(rc == c'A');
        rc = c'b';
        assertTrue(c == c'b');
        assertTrue(rc == c'b');
        c = c'A';

  - import: |-
        import {u} from "./modules/declarations.sts"  // Variable, union
        import {ru} from "./modules/reexported_directives.sts"  // Variable, union
    call: |-
        assertTrue(ru == undefined);
        u = new Number(1.2);
        assertTrue(u == 1.2);
        assertTrue(ru == 1.2);
        ru = "str";
        assertTrue(u == "str");
        assertTrue(ru == "str");
        u = undefined;

  - import: |-
        import {arr} from "./modules/declarations.sts"  // Variable, bytes[3]
        import {rarr} from "./modules/reexported_directives.sts"  // Variable, bytes[3]
    call: |-
        assertTrue(rarr.length == 3);
        arr = new byte[2];
        assertTrue(arr.length == 2);
        assertTrue(rarr.length == 2);
        arr = new byte[3];

  - import: |-
        import {ca} from "./modules/declarations.sts"  // Const implicit int
        import {rca} from "./modules/reexported_directives.sts"  // Const implicit int
    call: |-
        assertTrue(rca == ca);

  - import: |-
        import {ca} from "./modules/declarations.sts"  // Const implicit int
        import {rca} from "./modules/reexported_directives.sts"  // Const implicit int
    call: |-
        rca = 21;
    tags: |-
        negative, compile-only

  - import: |-
        import {ci} from "./modules/declarations.sts"  // Const int
        import {rci} from "./modules/reexported_directives.sts"  // Const int
    call: |-
        assertTrue(rci == ci);

  - import: |-
        import {ci} from "./modules/declarations.sts"  // Const int
        import {rci} from "./modules/reexported_directives.sts"  // Const int
    call: |-
        rci = 22;
    tags: |-
        negative, compile-only

  - import: |-
        import {cs} from "./modules/declarations.sts"  // Const str
        import {rcs} from "./modules/reexported_directives.sts"  // Const str
    call: |-
        assertTrue(rcs == cs);

  - import: |-
        import {cs} from "./modules/declarations.sts"  // Const str
        import {rcs} from "./modules/reexported_directives.sts"  // Const str
    call: |-
        rcs = "updated";
    tags: |-
        negative, compile-only
