# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          type A = Awaited<Promise<string>>
      use: |-
          let value: A = await Promise.resolve("hello");
          arktest.assertEQ(value, "hello", "Awaited value is '" + value + "', but expected 'hello'");
          arktest.assertTrue(value instanceof string,
              "Awaited value has type '" + typeof value + "', but expected 'string'")

    - decl: |-
          type B = Awaited<Promise<Promise<number>>>
      use: |-
          let value: B = await Promise.resolve(5);
          arktest.assertEQ(value, 5, "Awaited value is " + value + ", but expected 5");        
          arktest.assertTrue(value instanceof number,
              "Awaited value has type '" + typeof value + "', but expected 'number'")

    - decl: |-
          type C = Awaited<boolean | Promise<number>>
      use: |-
          let value: C = await Promise.resolve(5);
          arktest.assertEQ(value, 5, "Awaited value is " + value + ", but expected 5");        
          arktest.assertTrue(value instanceof number,
              "Awaited value has type '" + typeof value + "', but expected 'number'")
          value = await Promise.resolve(false);
          arktest.assertFalse(value, "Awaited value is " + value + ", but expected false");        
          arktest.assertTrue(value instanceof boolean,
              "Awaited value has type '" + typeof value + "', but expected 'boolean'")

    - decl: |-
          type A = Awaited<string>
          type AA = Awaited<Awaited<string>>
      use: |-
          let value: AA = await Promise.resolve(Promise.resolve("hello"));
          arktest.assertEQ(value, "hello", "Awaited value is '" + value + "', but expected 'hello'");
          arktest.assertTrue(value instanceof string,
              "Awaited value has type '" + typeof value + "', but expected 'string'")

    - decl: |-
          type A = Awaited<string>
          type AA = Awaited<A>
      use: |-
          let value: AA = await Promise.resolve(Promise.resolve("hello"));
          arktest.assertEQ(value, "hello", "Awaited value is '" + value + "', but expected 'hello'");
          arktest.assertTrue(value instanceof string,
            "Awaited value has type '" + typeof value + "', but expected 'string'")

    - decl: |-
          type A = Awaited<string>
      use: |-
          let value: A = await Promise.resolve(Promise.resolve("hello"));
          arktest.assertEQ(value, "hello", "Awaited value is '" + value + "', but expected 'hello'");
          arktest.assertTrue(value instanceof string,
            "Awaited value has type '" + typeof value + "', but expected 'string'")

    - decl: |-
          type A = Awaited<string>
          type AA = Awaited<A>
      use: |-
          let value: AA = await Promise.resolve("hello");
          arktest.assertEQ(value, "hello", "Awaited value is '" + value + "', but expected 'hello'");
          arktest.assertTrue(value instanceof string,
            "Awaited value has type '" + typeof value + "', but expected 'string'")
