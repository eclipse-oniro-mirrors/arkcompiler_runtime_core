# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - decl: |-
      class A {
        s: string = ""
        s2?: string
      }

      type RA = Readonly<A>

      function foo(ra: RA): boolean {
        return ra.s === undefined
      }

      function bar(ra: RA): boolean {
        return ra.s2 === undefined
      }

    check: |-
      let ra: RA = new RA
      arktest.assertFalse(foo(ra))
      arktest.assertTrue(bar(ra))

  - decl: |-
      class A {
        s: string = "s"
      }

      type RA = Readonly<A>

      function foo(ra: RA): boolean {
        return ra.s == "s"
      }
    check: |-
      arktest.assertTrue(foo(new RA))
  
  - decl: |-
      class A {
        s: string = "s"
        foo() {
          this.s = "a"
        }
      }

      type RA = Readonly<A>

    check: |-
      let ra: RA = new RA
      ra.foo()
      arktest.assertEQ(ra.s, "s")
    tags: compile-only,negative
  
  - decl: |-
      abstract class A {
        s: string = ""
        s2?: string
      }

      class AC extends A {}
      type RAC = Readonly<AC>

      function foo(rac: RAC): boolean {
        return rac.s === undefined
      }

      function bar(rac: RAC): boolean {
        return rac.s2 === undefined
      }

    check: |-
      let rac: RAC = new RAC
      arktest.assertFalse(foo(rac))
  
  - decl: |-
      abstract class A {
        s: string = "s"
        foo() {
          this.s = "a"
        }
      }

      class AC extends A {}
      type RA = Readonly<A>

    check: |-
      let rac: RAC = new RAC
      rac.foo()
      arktest.assertEQ(rac.s, "s")
    tags: compile-only,negative
  
  - decl: |-
      abstract class A {
        s?: string
      }

      class AC extends A {}
      type RAC = Readonly<AC>

      function foo(rac: RAC): boolean {
        return rac.s === undefined
      }

    check: |-
      let rac: RAC = new RAC
      arktest.assertTrue(foo(rac))