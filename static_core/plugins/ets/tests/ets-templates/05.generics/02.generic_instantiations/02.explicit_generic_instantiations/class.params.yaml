# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # case 0
    - decl: |-
        class Cls<T, U> {
            a: T
            b: U
            constructor(a: T, b: U) {
                this.a = a
                this.b = b
            }
        }
      use: |-
        let cls = new Cls<number, string>(1, "abc")
        arktest.assertTrue(cls.a instanceof number)
        arktest.assertTrue(cls.b instanceof string)
    # case 1
    - decl: |-
        class Cls<T, U> {
            a: [T, U]
            constructor(a: T, b: U) {
                this.a = [a, b]
            }
        }
      use: |-
        let cls = new Cls<number, string>(1, "abc")
        arktest.assertTrue(cls.a instanceof object)
        arktest.assertTrue(cls.a[0] instanceof number)
        arktest.assertTrue(cls.a[1] instanceof string)
    # case 2
    - decl: |-
        class A<T>{
            a: T
            constructor(a: T) {
                this.a = a
            }
        }

        class B<T, U> extends A<T>{
            b: U
            constructor(a: T, b: U) {
                super (a)
                this.b = b
            }
        }
      use: |-
        let cls: B<number, string> = new B<number, string>(1, "abc")
        arktest.assertTrue(cls.a instanceof number)
        arktest.assertTrue(cls.b instanceof string)
    # case 3
    - decl: |-
        class A {}
        class B extends A {}

        class Cls<T extends U, U extends Object> {
            a: T
            b: U
            constructor(a: T, b: U) {
                this.a = a
                this.b = b
            }
        }
      use: |-
        let cls1: Cls<Object, Object> = new Cls<Object, Object>(new Object(), new Object())
    # case 4
    - decl: |-
        class A {}
        class B extends A {}

        class Cls<T extends U, U extends Object> {
            a: T
            b: U
            constructor(a: T, b: U) {
                this.a = a
                this.b = b
            }
        }
      use: |-
        let cls2: Cls<A, Object> = new Cls<A, Object>(new A(), new Object())
    # case 5
    - decl: |-
        class A {}
        class B extends A {}

        class Cls<T extends U, U extends Object> {
            a: T
            b: U
            constructor(a: T, b: U) {
                this.a = a
                this.b = b
            }
        }
      use: |-
        let cls3: Cls<B, Object> = new Cls<B, Object>(new B(), new Object())
    # case 6
    - decl: |-
        class A {}
        class B extends A {}

        class Cls<T extends U, U extends Object> {
            a: T
            b: U
            constructor(a: T, b: U) {
                this.a = a
                this.b = b
            }
        }
      use: |-
        let cls4: Cls<A, A> = new Cls<A, A>(new A(), new A())
    # case 7
    - decl: |-
        class A {}
        class B extends A {}

        class Cls<T extends U, U extends Object> {
            a: T
            b: U
            constructor(a: T, b: U) {
                this.a = a
                this.b = b
            }
        }
      use: |-
        let cls5: Cls<B, A> = new Cls<B, A>(new B(), new A())
    # case 8
    - decl: |-
        class A {}
        class B extends A {}

        class Cls<T extends U, U extends Object> {
            a: T
            b: U
            constructor(a: T, b: U) {
                this.a = a
                this.b = b
            }
        }
      use: |-
        let cls6: Cls<B, B> = new Cls<B, B>(new B(), new B())
  # specific cases: tuple types, FixedArray, Any, union types, bigint, literal types, function types,
  # undefined, null, Array<T> or T[], FixedArray<T>
    - decl: |-
        class Cls<T> {
            a: T
            constructor(a: T) {
                this.a = a
            }
        }
      use: |-
        let cls = new Cls<[number, string]>([1, "abc"])
        arktest.assertTrue(cls.a[0] instanceof number)
        arktest.assertTrue(cls.a[1] instanceof string)
    - decl: |-
        class Cls<T> {
            a: T
            constructor(a: T) {
                this.a = a
            }
        }
      use: |-
        let cls = new Cls<FixedArray<number>>([1])
        arktest.assertTrue(cls.a[0] instanceof number)
    - decl: |-
        class Cls<T> {
            a: T
            constructor(a: T) {
                this.a = a
            }
        }
      use: |-
        let cls = new Cls<Any>(null)
        arktest.assertTrue(cls.a instanceof Any)
    - decl: |-
        class Cls<T> {
            a: T
            constructor(a: T) {
                this.a = a
            }
        }
      use: |-
        let cls = new Cls<bigint>(123n)
        arktest.assertTrue(cls.a instanceof bigint)
    - decl: |-
        class Cls<T> {
            a: T
            constructor(a: T) {
                this.a = a
            }
        }
      use: |-
        let cls = new Cls<"aa" | "bb">("aa")
        arktest.assertTrue(cls.a instanceof string)
    - decl: |-
        function foo(): number { return 1 }
        class Cls<T> {
            a: T
            constructor(a: T) {
                this.a = a
            }
        }
      use: |-
        let cls = new Cls<() => number>(foo)
        arktest.assertTrue(cls.a() instanceof number)
    - decl: |-
        class Cls<T> {
            a: T
            constructor(a: T) {
                this.a = a
            }
        }
      use: |-
        let cls = new Cls<undefined>(undefined)
        arktest.assertTrue(cls.a instanceof undefined)
    - decl: |-
        class Cls<T> {
            a: T
            constructor(a: T) {
                this.a = a
            }
        }
      use: |-
        let cls = new Cls<Array<number>>([1])
        arktest.assertTrue(cls.a[0] instanceof number)
    - decl: |-
        class Cls<T> {
            a: T
            constructor(a: T) {
                this.a = a
            }
        }
      use: |-
        let cls = new Cls<number[]>([1])
        arktest.assertTrue(cls.a[0] instanceof number)
