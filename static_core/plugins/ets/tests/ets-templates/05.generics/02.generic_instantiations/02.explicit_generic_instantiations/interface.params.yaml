# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


---
cases:
    #case 0
    - decl: |-
        interface I<T, U> {
            a: T
            b: U
        }
      use: |-
        let i: I<number, string> = {a: 1, b: "abc"}
        arktest.assertTrue(i.a instanceof number)
        arktest.assertTrue(i.b instanceof string)
    #case 1
    - decl: |-
        interface I<T, U> {
            a: [T, U]
        }
      use: |-
        let i: I<number, string> = {a: [1, "abc"]}
        arktest.assertTrue(i.a instanceof object)
        arktest.assertTrue(i.a[0] instanceof number)
        arktest.assertTrue(i.a[1] instanceof string)
    #case 2
    - decl: |-
        interface A<T> {
            a: T
        }

        interface B<T, U> extends A<T>{
            b: U
        }
      use: |-
        let i: B<number, string> = {a: 1, b: "abc"}
        arktest.assertTrue(i.a instanceof number)
        arktest.assertTrue(i.b instanceof string)
  # specific cases: tuple types, FixedArray, Any, union types, bigint, literal types, function types,
  # undefined, null, Array<T> or T[], FixedArray<T>
    - decl: |-
        interface A<T> {
            a: T
        }
      use: |-
        let i: A<[number, string]> = {a: [1, "abc"]}
        arktest.assertTrue(i.a[0] instanceof number)
        arktest.assertTrue(i.a[1] instanceof string)
    - decl: |-
        interface A<T> {
            a: T
        }
      use: |-
        let i: A<FixedArray<number>> = {a: [1]}
        arktest.assertTrue(i.a[0] instanceof number)
    - decl: |-
        interface A<T> {
            a: T
        }
      use: |-
        let i: A<Any> = {a: null}
        arktest.assertTrue(i.a instanceof Any)
    - decl: |-
        interface A<T> {
            a: T
        }
      use: |-
        let i: A<bigint> = {a: 123n}
        arktest.assertTrue(i.a instanceof bigint)
    - decl: |-
        interface A<T> {
            a: T
        }
      use: |-
        let i: A<"aa" | "bb"> = {a: "aa"}
        arktest.assertTrue(i.a instanceof string)
    - decl: |-
        function foo(): number { return 1 }
        interface A<T> {
            a: T
        }
      use: |-
        let i: A<() => number> = {a: foo}
        arktest.assertTrue(i.a() instanceof number)
    - decl: |-
        interface A<T> {
            a: T
        }
      use: |-
        let i: A<undefined> = {a: undefined}
        arktest.assertTrue(i.a instanceof undefined)
    - decl: |-
        interface A<T> {
            a: T
        }
      use: |-
        let i: A<Array<number>> = {a: [1]}
        arktest.assertTrue(i.a[0] instanceof number)
    - decl: |-
        interface A<T> {
            a: T
        }
      use: |-
        let i: A<number[]> = {a: [1]}
        arktest.assertTrue(i.a[0] instanceof number)
