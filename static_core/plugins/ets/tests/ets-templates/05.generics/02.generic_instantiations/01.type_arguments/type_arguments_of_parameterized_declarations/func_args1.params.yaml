# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # type argument is class
  - use: |-
      let v = new X()
      arktest.assertEQ(foo <X> (v, new Y<X>()), v)

  - use: |-
      let v = new Y<X>()
      arktest.assertEQ(foo <X> (v, new X()), v)
    bound: ' extends X'

  - use: |-
      arktest.assertEQ(foo <X|null> (null, new X()), null)

  - use: |-
      arktest.assertEQ(foo <Y<X>|null> (null, new Y<X>()), null)
    bound: ' extends Object|null'

  # type argument is interface
  - use: |-
      let v: I = new X()
      arktest.assertEQ(foo <I> (v, v), v)

  - use: |-
      let v: I = new Y<X>()
      arktest.assertEQ(foo <I> (v, new Y<Long>()), v)
    bound: ' extends Object'

  # type argument is array of classes, interfaces, enums
  - use: |-
      let v = new X[0]
      arktest.assertEQ(foo <X[]> (v, new Y<X>[0]), v)
    tags: 'compile-only, negative'

  - use: |-
      let v: Color[] = [Color.Red]
      arktest.assertEQ(foo <Color[]> (v, [Color.Blue]), v)
    bound: ' extends Object'

  # type argument is alias
  - use: |-
      let v = new X()
      arktest.assertEQ(foo <B>(v, new Y<X>()), v)
    decl: |-
      type B = X

  - use: |-
      let v: B = null as B
      arktest.assertEQ(foo <B>(v, new Y<X>()), v)
    decl: |-
      type B = X|null
    bound: ' extends I|null'

  - use: |-
      let v: I = new X()
      arktest.assertEQ(foo <B>(v, v), v)
    decl: |-
      type B = I

  - use: |-
      let v = new X[0]
      arktest.assertEQ(foo <B>(v, new Y<X>[0]), v)
    decl: |-
      type B = X[]|null
    tags: 'compile-only, negative'

  # Autoboxing of primitives
  - use: |-
      let v = 1
      arktest.assertEQ(foo <int> (1, 2), 1)

  - use: |-
      let v: I|null = new X()
      arktest.assertEQ(foo <I> (v, new Y<Long>()), v)  // smart type of v is I!

  # not a reference type
  - use: |-
      let v: Color = Color.Red
      let q: Color = Color.Blue
      arktest.assertEQ(foo<Color>(v, q), v)
