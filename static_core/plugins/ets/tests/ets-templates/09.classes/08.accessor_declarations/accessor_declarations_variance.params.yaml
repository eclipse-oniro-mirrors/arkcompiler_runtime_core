# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # inheriting and overriding done right: covariance for the return type
  # and contravariance for parameters
  - decl: |-
      class Base {
          get field(): Base { return new Base }
          set field(a_field: Derived) {}
      }

      class Derived extends Base {
          override get field(): Derived { return new Derived }
          override set field(a_field: Base) {}
      }
    
      function foo (base: Base) {
          base.field = new Derived // setter is called
          let b: Base = base.field // getter is called
          arktest.assertTrue(base.field instanceof Derived)
          arktest.assertTrue(b instanceof Base)
      }
    use: 'foo (new Derived)'

  # broken covariance for the return type
  - decl: |-
      class Base {
          get field(): Derived { return new Derived }
          set field(a_field: Derived) {}
      }

      class Derived extends Base {
          override get field(): Base { return new Base }
          override set field(a_field: Base) {}
      }
    tags: 'compile-only, negative'

  # broken  contravariance for parameters
  - decl: |-
      class Base {
          get field(): Base { return new Base }
          set field(a_field: Base) {}
      }

      class Derived extends Base {
          override get field(): Derived { return new Derived }
          override set field(a_field: Derived) {}
      }
    tags: 'compile-only, negative'

  # broken both covariance for the return type and contravariance for parameters
  - decl: |-
      class Base {
          get field(): Derived { return new Derived }
          set field(a_field: Base) {}
      }

      class Derived extends Base {
          override get field(): Base { return new Base }
          override set field(a_field: Derived) {}
      }
    tags: 'compile-only, negative'
