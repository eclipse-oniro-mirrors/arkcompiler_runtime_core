# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # accessor marked with the modifier override does not override
  # an accessor from a superclass
  - decl: |-
      class A {
          _age: int = 0;
        
          set age(value: int) {
            this._age = value;
          }
        
          get age(): int {
            return this._age;
          }
      }
      
      class B extends A {
          override set age1(value: int) {
            this._age = value + 5;
          }
      }

  - decl: |-
      class A {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          get age(): int {
            return this._age;
          }
      }
      
      class B extends A {
          override get age1(): int {
            return this._age;
          }
      }

  - decl: |-
      class A {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          get age(): int {
            return this._age;
          }
      }
      
      class B extends A {
          override set age1(value: int) {
            this._age = value + 5;
          }
          override get age1(): int {
            return this._age;
          }
      }

  # getter returns void
  - decl: |-
      class A {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          get age(): void {
          }
      }

  # setter has no parameters
  - decl: |-
      class A {
          _age: int = 0;
      
          set age() {
            this._age = 1;
          }
      
          get age(): int {
            return this._age;
          }
      }

  # setter has more than one parameter
  - decl: |-
      class A {
          _age: int = 0;
      
          set age(value: int, value1: int) {
            this._age = value + value1;
          }
      
          get age(): int {
            return this._age;
          }
      }

  # setter has a parameter with optional (default) value
  - decl: |-
      class A {
          _age: int = 0;
      
          set age(value: int = 1) {
            this._age = value;
          }
      
          get age(): int {
            return this._age;
          }
      }

  # setter has a parameter with optional value
  - decl: |-
      class A {
          _age: int = 0;
      
          set age(value?: int) { }
      
          get age(): int {
            return this._age;
          }
      }

  # name of an accessor is the same as that of a non-static field of same class
  - decl: |-
      class A {
          age: int = 0; 
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      }

  - decl: |-
      class A {
          get age: int = 0;
          _age: int = 0;
      
          get age(): int {
            return this._age;
          }
      }

  - decl: |-
      class A {
          get age: int = 0;
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          get age(): int {
            return this._age;
          }
      }

  # name of an accessor is the same as that of a non-static field of parent class
  - decl: |-
      class Base {
          age: int = 0;
      }
      class A extends Base {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      }

  - decl: |-
      class Base {
          age: int = 0;
      }
      class A extends Base {
          _age: int = 0;
      
          get age(): int {
            return this._age;
          }
      }

  - decl: |-
      class Base {
          age: int = 0;
      }
      class A extends Base {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          get age(): int {
            return this._age;
          }
      }

  # name of an accessor is the same as that of a method of same class
  - decl: |-
      class A {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          get age(): int {
            return this._age;
          }
      
          age(value: int): void {
            this._age = value;
          }
      }

      class A {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          get age(): int {
            return this._age;
          }
      
          age(): int {
            return this._age;
          }
      }

  # name of an accessor is the same as that of a method of parent class
  - decl: |-
      class Base {
          age(value: int): void { }
      }
      class A extends Base {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          get age(): int {
            return this._age;
          }
      }

  - decl: |-
      class Base {
          age(): int {
            return 1;
          }
      }
      class A extends Base {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          get age(): int {
            return this._age;
          }
      }

  # name of an accessor is the same as that of a method of interface
  - decl: |-
      interface Base {
          age(value: int): void;
      }
      class A implements Base {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          get age(): int {
            return this._age;
          }
      }

  - decl: |-
      interface Base {
          age(): int;
      }
      class A implements Base {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          get age(): int {
            return this._age;
          }
      }

  # (static case) getter returns void
  - decl: |-
      class A {
          static _age: int = 0;
      
          static set age(value: int) {
            A._age = value;
          }
      
          static get age(): void {
          }
      }

  # (static case) setter has no parameters
  - decl: |-
      class A {
          static _age: int = 0;
      
          static set age() {
            A._age = 1;
          }
      
          static get age(): int {
            return A._age;
          }
      }

  # (static case) setter has more than one parameter
  - decl: |-
      class A {
          static _age: int = 0;
      
          static set age(value: int, value1: int) {
            A._age = value + value1;
          }
      
          static get age(): int {
            return A._age;
          }
      }

  # (static case) setter has a parameter with optional (default) value
  - decl: |-
      class A {
          static _age: int = 0;
      
          static set age(value: int = 1) {
            A._age = value;
          }
      
          static get age(): int {
            return A._age;
          }
      }

  # (static case) setter has a parameter with optional value
  - decl: |-
      class A {
          static _age: int = 0;
      
          static set age(value?: int) { }
      
          static get age(): int {
            return A._age;
          }
      }

  # (static case) name of an accessor is the same as that of a method of same class
  - decl: |-
      class A {
          static _age: int = 0;
      
          static set age(value: int) {
            A._age = value;
          }
      
          static get age(): int {
            return A._age;
          }
      
          static age(value: int): void {
            A._age = value;
          }
      }

      class A {
          static _age: int = 0;
      
          static set age(value: int) {
            A._age = value;
          }
      
          static get age(): int {
            return A._age;
          }
      
          static age(): int {
            return A._age;
          }
      }

  # accessor modifiers are different - abstract
  - decl: |-
      abstract class A {
          _age: int = 0;
      
          abstract set age(value: int);
      
          abstract get age(): int {
            return this._age;
          }
      }

      abstract class A {
          _age: int = 0;
      
          abstract set age(value: int) {
            this._age = value;
          }
      
          abstract get age();
      }

  # accessor modifiers are different - native
  - decl: |-
      class A {
          _age: int = 0;
      
          native set age(value: int);
      
          get age(): int {
            return this._age;
          }
      }

      class A {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          native get age(): int;
      }

  # accessor modifiers are different - final
  - decl: |-
      class A {
          _age: int = 0;
      
          final set age(value: int) {
            this._age = value;
          }
      
          get age(): int {
            return this._age;
          }
      }
  
      class A {
          _age: int = 0;
      
          set age(value: int) {
            this._age = value;
          }
      
          final get age(): int {
            return this._age;
          }
      }
