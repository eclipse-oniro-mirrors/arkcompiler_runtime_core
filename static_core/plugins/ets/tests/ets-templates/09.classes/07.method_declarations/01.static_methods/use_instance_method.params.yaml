# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - doc: Access protected method
      decl: |-
        class C {
          protected count(): number {
            return 1
          }
          static getCount(c: C): number {
            return c.count()
          }
        }
        function main() {
          let c: C = new C()
          arktest.assertEQ(C.getCount(c), 1)
        }

    - doc: Access inherited protected method
      decl: |-
        class B {
          protected count(): number {
            return 1
          }
        }
        class C extends B {
          static getCount(c: C): number {
            return c.count()
          }
        }
        function main() {
          let c: C = new C()
          arktest.assertEQ(C.getCount(c), 1)
        }

    - doc: Access derived protected method
      decl: |-
        class B {
          protected count(): number {
            return 1
          }
          static getCount(c: C): number {
            return c.count()
          }
        }
        class C extends B { }
        function main() {
          let c: C = new C()
          arktest.assertEQ(B.getCount(c), 1)
        }

    - doc: Access protected method from local variable
      decl: |-
        class C {
          protected count(): number {
            return 1
          }
          static getCount(i: number): number {
            let c: C = new C()
            return c.count() + i
          }
        }
        function main() {
          arktest.assertEQ(C.getCount(2), 3)
        }

    - doc: Access derived protected method from local variable
      decl: |-
        class B {
          protected count(): number {
            return 1
          }
          static getCount(i: number): number {
            let c: C = new C()
            return c.count() + i
          }
        }
        class C extends B { }
        function main() {
          arktest.assertEQ(C.getCount(2), 3)
        }

    - doc: Access private method
      decl: |-
        class C {
          private count(): number {
            return 1
          }
          static getCount(c: C): number {
            return c.count()
          }
        }
        function main() {
          let c: C = new C()
          arktest.assertEQ(C.getCount(c), 1)
        }

    - doc: Access inherited private method
      tags: compile-only, negative
      decl: |-
        class B {
          private count(): number {
            return 1
          }
        }
        class C extends B {
          static getCount(c: C): number {
            return c.count()
          }
        }

    - doc: Access private method by derived class instance
      decl: |-
        class B {
          private count(): number {
            return 1
          }
          static getCount(c: C): number {
            return c.count()
          }
        }
        class C extends B { }
        function main() {
          let c: C = new C()
          arktest.assertEQ(B.getCount(c), 1)
        }

    - doc: Access private method from local variable
      decl: |-
        class C {
          private count(): number {
            return 1
          }
          static getCount(i: number): number {
            let c: C = new C()
            return c.count() + i
          }
        }
        function main() {
          arktest.assertEQ(C.getCount(2), 3)
        }

    - doc: Access derived private method from local variable
      decl: |-
        class B {
          private count(): number {
            return 1
          }
          static getCount(i: number): number {
            let c: C = new C()
            return c.count() + i
          }
        }
        class C extends B { }
        function main() {
          arktest.assertEQ(C.getCount(2), 3)
        }
