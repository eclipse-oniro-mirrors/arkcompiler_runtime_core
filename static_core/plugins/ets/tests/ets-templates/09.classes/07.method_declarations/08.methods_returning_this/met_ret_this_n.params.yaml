# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # case 0
    - decl: |-
          let f: int
          class A {
              static foo(): this {  // CTE, 'this' cannot be used as return type of static method
                  if (f == 0) {
                      return this
                  }
                  throw new Error
              }
          }
      use: |-
          let x = A.foo()

    # case 1
    - decl: |-
          class A {
              fld: int
              foo(): this|A {  // CTE, 'this' cannot be used as a part of union type
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }
      use: |-
          let x = new A().foo()

    # case 2
    - decl: |-
          class A {
              fld: int
              foo(): A|this {  // CTE, 'this' cannot be used as a part of union type
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }
      use: |-
          let x = new A().foo()

    # case 3
    - decl: |-
          class A {
              fld: int
              foo(): [A, this] {  // CTE, 'this' cannot be used as a part of tuple type
                  if (this.fld == 0) {
                      return [this, this]
                  }
                  throw new Error
              }
          }
      use: |-
          let x = new A().foo()

    # case 4
    - decl: |-
          class A {
              fld: int
              foo(): FixedArray<this> {  // CTE, 'this' cannot be used as type of array
                  if (this.fld == 0) {
                      return [this, this]
                  }
                  throw new Error
              }
          }
      use: |-
          let x = new A().foo()

    # case 5
    - decl: |-
          abstract class Super {
              fld: int
              foo(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }
          class A extends Super {
              foo(): A {  // CTE, type must be 'this' in overridden method
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }
      use: |-
          let x = new A().foo()

    # case 6
    - decl: |-
          abstract class Super {
              fld: int
              foo(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }
          class A extends Super {
              foo(): Super {  // CTE, type must be 'this' in overridden method
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }
      use: |-
          let x = new A().foo()

    # case 7
    - decl: |-
          class A {
              fld: A
              constructor() {
                  this.fld = this
              }
              foo(): this {
                  return this.fld  // CTE, only 'this' is allowed in return
              }
          }
      use: |-
          let x = new A().foo()

    # case 8
    - decl: |-
          class A {
              fld: int
              get instance(): this {  // CTE, cannot be used in getter
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }
      use: |-
          let x = new A().instance

    # case 9
    - decl: |-
        final class A {
            fld: int
            foo(): this {  // CTE
                if (this.fld == 0) {
                    const tmp = this
                    return tmp
                }
                throw new Error
            }
        }
      use: |-
        let x = new A().instance
