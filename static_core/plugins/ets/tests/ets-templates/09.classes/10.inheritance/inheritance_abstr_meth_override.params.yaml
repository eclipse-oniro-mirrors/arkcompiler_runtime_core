# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # Abstract class A
  - { abstract: true, param_a: K, ret_a: E, param_b: F, ret_b: F, param_c: E, ret_c: K, impl: f as K, call: new K(), expected: "'k'" }
  - { abstract: true, param_a: K, ret_a: E, param_b: F, ret_b: F, param_c: F, ret_c: K, impl: f as K, call: new K(), expected: "'k'" }
  - { abstract: true, param_a: K, ret_a: E, param_b: F, ret_b: F, param_c: F, ret_c: F, impl: f,      call: new K(), expected: "'k'" }
  - { abstract: true, param_a: K, ret_a: E, param_b: F, ret_b: F, param_c: F, ret_c: F, impl: f,      call: new F(), expected: "'f'" }
  - { abstract: true, param_a: K, ret_a: F, param_b: F, ret_b: K, param_c: E, ret_c: K, impl: f as K, call: new K(), expected: "'k'" }
  - { abstract: true, param_a: K, ret_a: E, param_b: F, ret_b: E, param_c: E, ret_c: E, impl: f,      call: new E(), expected: "'e'" }
  
  # Real class A
  - { abstract: false, param_a: K, ret_a: E, param_b: F, ret_b: F, param_c: E, ret_c: K, impl: f as K, call: new K(), expected: "'k'" }
  - { abstract: false, param_a: K, ret_a: E, param_b: F, ret_b: F, param_c: F, ret_c: K, impl: f as K, call: new K(), expected: "'k'" }
  - { abstract: false, param_a: K, ret_a: E, param_b: F, ret_b: F, param_c: F, ret_c: F, impl: f,      call: new K(), expected: "'k'" }
  - { abstract: false, param_a: K, ret_a: E, param_b: F, ret_b: F, param_c: F, ret_c: F, impl: f,      call: new F(), expected: "'f'" }
  - { abstract: false, param_a: K, ret_a: F, param_b: F, ret_b: K, param_c: E, ret_c: K, impl: f as K, call: new K(), expected: "'k'" }
  - { abstract: false, param_a: K, ret_a: E, param_b: F, ret_b: E, param_c: E, ret_c: E, impl: f,      call: new E(), expected: "'e'" }