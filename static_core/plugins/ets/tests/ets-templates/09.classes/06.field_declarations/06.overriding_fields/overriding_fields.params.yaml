# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: simple overriding
    check_variants:
      - {check_type: "Any", check_value: "undefined"}
      - {check_type: "Object|undefined", check_value: "undefined"}
      - {check_type: "number", check_value: "0"}
      - {check_type: "double", check_value: "0.0"}
      - {check_type: "float", check_value: "0.0f"}
      - {check_type: "long", check_value: "0"}
      - {check_type: "int", check_value: "0"}
      - {check_type: "short", check_value: "0"}
      - {check_type: "byte", check_value: "0"}
      - {check_type: "char", check_value: "c'\\u0000'"}
      - {check_type: "boolean", check_value: "false"}
    decl: |-
      class Base {
        field: [check_type]
      }
      class A extends Base {
        field: [check_type]
      }
    logic: |-
      let a: A = new A()
      let b: Base = new A()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [check_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [check_value])

  - desc: |-
      >-
        The type of the overriding field is to be the same as that of the
        overridden field. Otherwise, a compile-time error occurs
      params: different types
      tags:
        - negative
        - compile-only
    check_variants:
      - {base_type: "Object|undefined", override_type: "Any"}
      - {base_type: "Any", override_type: "Object|undefined"}
      - {base_type: "number", override_type: "int"}
      - {base_type: "int", override_type: "number"}
      - {base_type: "float", override_type: "int"}
      - {base_type: "int", override_type: "float"}
      - {base_type: "number", override_type: "bigint"}
      - {base_type: "bigint", override_type: "number"}
      - {base_type: "string", override_type: "char"}
      - {base_type: "char", override_type: "string"}
    decl: |-
      class Base {
        field: [base_type]
      }
      class A extends Base {
        field: [override_type]
      }
    logic: ""

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: simple overriding, both static
    check_variants:
      - {check_type: "Any", check_value: "undefined"}
      - {check_type: "Object|undefined", check_value: "undefined"}
      - {check_type: "number", check_value: "0"}
      - {check_type: "double", check_value: "0.0"}
      - {check_type: "float", check_value: "0.0f"}
      - {check_type: "long", check_value: "0"}
      - {check_type: "int", check_value: "0"}
      - {check_type: "short", check_value: "0"}
      - {check_type: "byte", check_value: "0"}
      - {check_type: "char", check_value: "c'\\u0000'"}
      - {check_type: "boolean", check_value: "false"}
    decl: |-
      class Base {
        static field: [check_type]
      }
      class A extends Base {
        static field: [check_type]
      }
    logic: |-
      arktest.assertTrue(Base.field instanceof [check_type])
      arktest.assertEQ(Base.field, [check_value])
      arktest.assertTrue(A.field instanceof [check_type])
      arktest.assertEQ(A.field, [check_value])

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: defining with different static status
    check_variants:
      - {check_type: "Any", base_value: "null", derived_value: "7"}
      - {check_type: "Object", base_value: "5", derived_value: "\"abc\""}
      - {check_type: "number", base_value: "3", derived_value: "6.7"}
      - {check_type: "double", base_value: "3.4", derived_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", derived_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", derived_value: "78945"}
      - {check_type: "int", base_value: "123", derived_value: "321"}
      - {check_type: "short", base_value: "325", derived_value: "253"}
      - {check_type: "byte", base_value: "127", derived_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", derived_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", derived_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", derived_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", derived_value: "true"}
    decl: |-
      class Base {
        static field: [check_type] = [base_value]
      }
      class A extends Base {
        field: [check_type] = [derived_value]
      }
    logic: |-
      let a: Base = new A()
      let b: A = new A()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [derived_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [derived_value])
      arktest.assertTrue(Base.field instanceof [check_type])
      arktest.assertEQ(Base.field, [base_value])
      arktest.assertTrue(A.field instanceof [check_type])
      arktest.assertEQ(A.field, [base_value])

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: defining with different static status
    check_variants:
      - {check_type: "Any", base_value: "null", derived_value: "7"}
      - {check_type: "Object", base_value: "5", derived_value: "\"abc\""}
      - {check_type: "number", base_value: "3", derived_value: "6.7"}
      - {check_type: "double", base_value: "3.4", derived_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", derived_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", derived_value: "78945"}
      - {check_type: "int", base_value: "123", derived_value: "321"}
      - {check_type: "short", base_value: "325", derived_value: "253"}
      - {check_type: "byte", base_value: "127", derived_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", derived_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", derived_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", derived_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", derived_value: "true"}
    decl: |-
      class Base {
        field: [check_type] = [base_value]
      }
      class A extends Base {
        static field: [check_type] = [derived_value]
      }
    logic: |-
      let a: Base = new A()
      let b: A = new A()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [base_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [base_value])
      arktest.assertTrue(A.field instanceof [check_type])
      arktest.assertEQ(A.field, [derived_value])

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: overriding with different static status
      tags:
        - negative
        - compile-only
    check_variants:
      - {check_type: "int", base_value: "7", derived_value: "5"}
    decl: |-
      class Base {
        field: [check_type] = [base_value]
      }
      class A extends Base {
        override static field: [check_type] = [derived_value]
      }
    logic: ""

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: overriding with different static status
      tags:
        - negative
        - compile-only
    check_variants:
      - {check_type: "int", base_value: "7", derived_value: "5"}
    decl: |-
      class Base {
        static field: [check_type] = [base_value]
      }
      class A extends Base {
        override field: [check_type] = [derived_value]
      }
    logic: ""

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: simple overriding
    check_variants:
      - {check_type: "Any", check_value: "7"}
      - {check_type: "Object", check_value: "\"abc\""}
      - {check_type: "number", check_value: "3"}
      - {check_type: "double", check_value: "3.4"}
      - {check_type: "float", check_value: "6.7f"}
      - {check_type: "long", check_value: "9223372036854775807"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "short", check_value: "325"}
      - {check_type: "byte", check_value: "127"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "bigint", check_value: "12345678901234567890n"}
      - {check_type: "char", check_value: "c'\\u2028'"}
      - {check_type: "boolean", check_value: "false"}
    decl: |-
      class Base {
        field: [check_type] = [check_value]
      }
      class A extends Base {
        field: [check_type] = [check_value]
      }
    logic: |-
      let a: A = new A()
      let b: Base = new A()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [check_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [check_value])

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: simple overriding, different values
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        field: [check_type] = [base_value]
      }
      class A extends Base {
        field: [check_type] = [override_value]
      }
    logic: |-
      let a: Base = new A()
      let b: A = new A()
      let c: Base = new Base()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [override_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [override_value])
      arktest.assertTrue(c.field instanceof [check_type])
      arktest.assertEQ(c.field, [base_value])

  - desc: base field initialized through function
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        field: [check_type] = this.init()
        private init(): [check_type] {
          return [base_value]
        }
      }
      class A extends Base {
        field: [check_type] = [override_value]
      }
    logic: |-
      let a: Base = new A()
      let b: A = new A()
      let c: Base = new Base()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [override_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [override_value])
      arktest.assertTrue(c.field instanceof [check_type])
      arktest.assertEQ(c.field, [base_value])

  - desc: base and overridden field initialized through function
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        field: [check_type] = this.init()
        private init(): [check_type] {
          return [base_value]
        }
      }
      class A extends Base {
        field: [check_type] = this.init()
        private init(): [check_type] {
          return [override_value]
        }
      }
    logic: |-
      let a: Base = new A()
      let b: A = new A()
      let c: Base = new Base()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [override_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [override_value])
      arktest.assertTrue(c.field instanceof [check_type])
      arktest.assertEQ(c.field, [base_value])

  - desc: base field initialized through constructor
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        field: [check_type]
        constructor() {
          this.field = [base_value]
        }
      }
      class A extends Base {
        field: [check_type] = [override_value]
      }
    logic: |-
      let a: Base = new A()
      let b: A = new A()
      let c: Base = new Base()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [override_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [override_value])
      arktest.assertTrue(c.field instanceof [check_type])
      arktest.assertEQ(c.field, [base_value])

  - desc: base and overridden field initialized through constructor
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        field: [check_type]
        constructor() {
          this.field = [base_value]
        }
      }
      class A extends Base {
        field: [check_type]
        constructor() {
          this.field = [override_value]
        }
      }
    logic: |-
      let a: Base = new A()
      let b: A = new A()
      let c: Base = new Base()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [override_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [override_value])
      arktest.assertTrue(c.field instanceof [check_type])
      arktest.assertEQ(c.field, [base_value])

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: simple overriding, different values with static
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        static field: [check_type] = [base_value]
      }
      class A extends Base {
        static field: [check_type] = [override_value]
      }
    logic: |-
      arktest.assertTrue(A.field instanceof [check_type])
      arktest.assertEQ(A.field, [override_value])
      arktest.assertTrue(Base.field instanceof [check_type])
      arktest.assertEQ(Base.field, [base_value])

  - desc: base field initialized through static block
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        static field: [check_type]
        static {
          Base.field = [base_value]
        }
      }
      class A extends Base {
        static field: [check_type] = [override_value]
      }
    logic: |-
      arktest.assertTrue(A.field instanceof [check_type])
      arktest.assertEQ(A.field, [override_value])
      arktest.assertTrue(Base.field instanceof [check_type])
      arktest.assertEQ(Base.field, [base_value])

  - desc: base and overridden field initialized through static block
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        static field: [check_type]
        static {
          Base.field = [base_value]
        }
      }
      class A extends Base {
        static field: [check_type]
        static {
          A.field = [override_value]
        }
      }
    logic: |-
      arktest.assertTrue(A.field instanceof [check_type])
      arktest.assertEQ(A.field, [override_value])
      arktest.assertTrue(Base.field instanceof [check_type])
      arktest.assertEQ(Base.field, [base_value])

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: simple overriding with override keyword
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        field: [check_type] = [base_value]
      }
      class A extends Base {
        override field: [check_type] = [override_value]
      }
    logic: |-
      let a: Base = new A()
      let b: A = new A()
      let c: Base = new Base()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [override_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [override_value])
      arktest.assertTrue(c.field instanceof [check_type])
      arktest.assertEQ(c.field, [base_value])

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: simple overriding, different values with static and override keywords
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        static field: [check_type] = [base_value]
      }
      class A extends Base {
        override static field: [check_type] = [override_value]
      }
    logic: |-
      arktest.assertTrue(A.field instanceof [check_type])
      arktest.assertEQ(A.field, [override_value])
      arktest.assertTrue(Base.field instanceof [check_type])
      arktest.assertEQ(Base.field, [base_value])

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: overriding in second derived class with override keyword
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        field: [check_type] = [base_value]
      }
      class A extends Base {
      }
      class B extends A {
        override field: [check_type] = [override_value]
      }
    logic: |-
      let a: Base = new B()
      let b: Base = new A()
      let c: Base = new Base()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [override_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [base_value])
      arktest.assertTrue(c.field instanceof [check_type])
      arktest.assertEQ(c.field, [base_value])

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: overriding in first and second derived class with override keyword
    check_variants:
      - {check_type: "Any", base_value: "null",
          override_value_1: "7", override_value_2: "\"abc\""}
      - {check_type: "Object", base_value: "5",
          override_value_1: "\"abc\"", override_value_2: "7"}
      - {check_type: "number", base_value: "3",
          override_value_1: "6.7", override_value_2: "13"}
      - {check_type: "double", base_value: "3.4",
          override_value_1: "5.0", override_value_2: "15"}
      - {check_type: "float", base_value: "6.7f",
          override_value_1: "7.3f", override_value_2: "9.8f"}
      - {check_type: "long", base_value: "9223372036854775807",
          override_value_1: "78945", override_value_2: "9223372036854775000"}
      - {check_type: "int", base_value: "123",
          override_value_1: "321", override_value_2: "321321"}
      - {check_type: "short", base_value: "325",
          override_value_1: "253", override_value_2: "536"}
      - {check_type: "byte", base_value: "127",
          override_value_1: "78", override_value_2: "15"}
      - {check_type: "string", base_value: "\"abc\"",
          override_value_1: "\"defg\"", override_value_2: "\"hijk\""}
      - {check_type: "bigint", base_value: "12345678901234567890n",
          override_value_1: "5556423623465n", override_value_2: "123123n"}
      - {check_type: "char", base_value: "c'\\u2028'",
          override_value_1: "c'z'", override_value_2: "c'x'"}
      - {check_type: "boolean", base_value: "false",
          override_value_1: "true", override_value_2: "false"}
    decl: |-
      class Base {
        field: [check_type] = [base_value]
      }
      class A extends Base {
        override field: [check_type] = [override_value_1]
      }
      class B extends A {
        override field: [check_type] = [override_value_2]
      }
    logic: |-
      let a: Base = new B()
      let b: Base = new A()
      let c: Base = new Base()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [override_value_2])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [override_value_1])
      arktest.assertTrue(c.field instanceof [check_type])
      arktest.assertEQ(c.field, [base_value])

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: different covariant subtype values
    decl: |-
      class Animal {
        name: string = ""
      }
      class Dog extends Animal {
        override name: string = "dog"
      }
      class Cat extends Animal {
        override name: string = "cat"
      }
      class Base {
        field: Animal = new Dog
      }
      class A extends Base {
        override field: Animal = new Cat
      }
    logic: |-
      let a: Base = new A()
      let b: A = new A()
      let c: Base = new Base()
      arktest.assertTrue(a.field instanceof Cat)
      arktest.assertEQ(a.field.name, "cat")
      arktest.assertTrue(b.field instanceof Cat)
      arktest.assertEQ(b.field.name, "cat")
      arktest.assertTrue(c.field instanceof Dog)
      arktest.assertEQ(c.field.name, "dog")

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: different not covariant subtype values
      tags:
        - negative
        - compile-only
    check_variants:
      - {check_value_type: "Cat"}
      - {check_value_type: "Animal"}
    decl: |-
      class Animal {}
      class Dog extends Animal {}
      class Cat extends Animal {}
      class Base {
        field: Dog = new Dog
      }
      class A extends Base {
        override field: Dog = new [check_value_type]
      }
    logic: ""

  - desc: |-
      >-
        The type of the overriding field is to be the same as that of the
        overridden field. Otherwise, a compile-time error occurs
      params: different types
      tags:
        - negative
        - compile-only
    check_variants:
      - {base_type: "Animal", override_type: "Dog"}
      - {base_type: "Dog", override_type: "Animal"}
      - {base_type: "Dog", override_type: "Cat"}
    decl: |-
      class Animal {}
      class Dog extends Animal {}
      class Cat extends Animal {}
      class Base {
        field: [base_type] = new [base_type]
      }
      class A extends Base {
        field: [override_type] = new [override_type]
      }
    logic: ""

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: different covariant function subtype values
    decl: |-
      class A {
        v: int
        constructor(v: int = 0) {
          this.v = v
        }
      }
      class B extends A {
        constructor(v: int = 0) {
          super(-v)
        }
        f(): int {
          return 13
        }
      }
      type HandlerBInt = (a: B, b: int) => A
      type HandlerAInt = (a: A, b: int) => B
      const handlerAInt: HandlerAInt = (a: A, b: int): B => {
        if (a instanceof B){
          return new B(a.f() + b)
        } else {
          return new B(b)
        }
      }
      type HandlerA = (a: A) => A
      const handlerA: HandlerA = (a: A): A => {
        if (a instanceof B){
          return new A(a.f())
        } else {
          return new A
        }
      }
      type HandlerNothing = () => B
      const handlerNothing: HandlerNothing = (): B => {
        return new B(567)
      }
      class Base {
        field: HandlerBInt = handlerAInt
      }
      class Derived1 extends Base {
        override field: HandlerBInt = handlerA
      }
      class Derived2 extends Derived1 {
        override field: HandlerBInt = handlerNothing
      }
    logic: |-
      let a: Base = new Derived2()
      let b: Base = new Derived1()
      let c: Base = new Base()
      arktest.assertTrue(a.field instanceof HandlerNothing)
      arktest.assertEQ(a.field(new B, 7).v, -567)
      arktest.assertTrue(b.field instanceof HandlerA)
      arktest.assertEQ(b.field(new B, 7).v, 13)
      arktest.assertTrue(c.field instanceof HandlerAInt)
      arktest.assertEQ(c.field(new B, 7).v, -20)

  - desc: |-
      >-
        While extending a class or implementing interfaces, a field declared
        in a superclass or a superinterface can be overridden by field
        with the same name and the same static or non-static status.
      params: different not covariant subtype values
      tags:
        - negative
        - compile-only
    check_variants:
      - {check_value: "handlerCInt"}
      - {check_value: "handlerBInt"}
      - {check_value: "handlerB"}
      - {check_value: "handlerBIntInt"}
      - {check_value: "handlerNothing"}
    decl: |-
      class A {}
      class B extends A {}
      class C extends A {}
      type HandlerReq = (a: B, b: int) => B
      const handlerReq: HandlerReq = (a: B, b: int): B => {
        return new B
      }
      type HandlerCInt = (a: C, b: int) => B
      const handlerCInt: HandlerCInt = (a: C, b: int): B => {
        return new B
      }
      type HandlerBInt = (a: B, b: int) => A
      const handlerBInt: HandlerBInt = (a: B, b: int): A => {
        return new B
      }
      type HandlerB = (a: B) => A
      const handlerB: HandlerB = (a: B): A => {
        return new B
      }
      type HandlerBIntInt = (a: B, b: int, c: int) => B
      const handlerBIntInt: HandlerBIntInt = (a: B, b: int, c: int): B => {
        return new B
      }
      type HandlerNothing = () => C
      const handlerNothing: HandlerNothing = (): C => {
        return new C
      }
      class Base {
        field: HandlerReq = handlerReq
      }
      class Derived extends Base {
        override field: HandlerReq = [check_value]
      }
    logic: ""

  - desc: |-
      overriding not exist field
      tags:
        - negative
        - compile-only
    decl: |-
      class Base {
        field1: number = 0
      }
      class A extends Base {
        override field2: number = 5
      }
    logic: ""

  - desc: getting overridden field through array element
    decl: |-
      class Base {
        field: number = 5
      }
      class A extends Base{
        field: number = 7
      }
    logic: |-
      let a: Base[] = [new A()]
      arktest.assertTrue(a[0].field instanceof number)
      arktest.assertEQ(a[0].field, 7)

  - desc: getting overridden field through function
    decl: |-
      class Base {
        field: number = 5
      }
      class A extends Base {
        field: number = 7
      }
      function f(v: Base) {
        arktest.assertTrue(v.field instanceof number)
        arktest.assertEQ(v.field, 7)
      }
    logic: |-
      f(new A)

  - desc: overriding in first and second derived class
    check_variants:
      - {check_type: "Any", base_value: "null",
          override_value_1: "7", override_value_2: "\"abc\""}
      - {check_type: "Object", base_value: "5",
          override_value_1: "\"abc\"", override_value_2: "7"}
      - {check_type: "number", base_value: "3",
          override_value_1: "6.7", override_value_2: "13"}
      - {check_type: "double", base_value: "3.4",
          override_value_1: "5.0", override_value_2: "15"}
      - {check_type: "float", base_value: "6.7f",
          override_value_1: "7.3f", override_value_2: "9.8f"}
      - {check_type: "long", base_value: "9223372036854775807",
          override_value_1: "78945", override_value_2: "9223372036854775000"}
      - {check_type: "int", base_value: "123",
          override_value_1: "321", override_value_2: "321321"}
      - {check_type: "short", base_value: "325",
          override_value_1: "253", override_value_2: "536"}
      - {check_type: "byte", base_value: "127",
          override_value_1: "78", override_value_2: "15"}
      - {check_type: "string", base_value: "\"abc\"",
          override_value_1: "\"defg\"", override_value_2: "\"hijk\""}
      - {check_type: "bigint", base_value: "12345678901234567890n",
          override_value_1: "5556423623465n", override_value_2: "123123n"}
      - {check_type: "char", base_value: "c'\\u2028'",
          override_value_1: "c'z'", override_value_2: "c'x'"}
      - {check_type: "boolean", base_value: "false",
          override_value_1: "true", override_value_2: "false"}
    decl: |-
      class C {
        field: [check_type] = this.init()
        private init(): [check_type] {
          return [base_value]
        }
      }
      class D extends C {
        override field: [check_type] = [override_value_1]
      }
      class Derived extends D {
        field = this.init_in_derived()
        private init_in_derived(): [check_type] {
          return [override_value_2]
        }
      }
    logic: |-
      let a: C = new Derived()
      let b: C = new D()
      let c: C = new C()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [override_value_2])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [override_value_1])
      arktest.assertTrue(c.field instanceof [check_type])
      arktest.assertEQ(c.field, [base_value])

  - desc: |-
      >-
        A compile-time error occurs if a field is not declared as readonly
        in a superclass, while an overriding field is marked as readonly
      tags:
        - negative
        - compile-only
    decl: |-
      class C {
        field = 1
      }
      class D extends C {
        readonly field = 2
      }
    logic: ""

  - desc: |-
      >-
        The type of the overriding field is to be the same as that
        of the overridden field. Otherwise, a compile-time error occurs
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        readonly field: [check_type] = [base_value]
      }
      class A extends Base {
        readonly field: [check_type] = [override_value]
      }
    logic: |-
      let a: Base = new A()
      let b: A = new A()
      let c: Base = new Base()
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [override_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [override_value])
      arktest.assertTrue(c.field instanceof [check_type])
      arktest.assertEQ(c.field, [base_value])

  - desc: |-
      compile-time error, conflict in overriding
      tags:
        - negative
        - compile-only
    decl: |-
      class C {
        num: int = 1
      }
      interface I {
        num: number
      }
      class D extends C implements I {
        num = 2
      }
    logic: ""

  - desc: |-
      Overriding a field by an accessor is prohibited
      tags:
        - negative
        - compile-only
    decl: |-
      class C {
        num: number = 1
      }
      class D extends C {
        get num(): number {
          return 42
        }
        set num(x: number) {}
      }
    logic: ""

  - desc: |-
      >-
        A compile-time error occurs if an attempt is made
        to override private member
      tags:
        - negative
        - compile-only
    decl: |-
      class C {
        private num: number = 1
      }
      class D extends C {
        override num: number = 2
      }
    logic: ""

  - desc: |-
      >-
        An overriding member can keep or extend an access modifier
        of a member that is inherited or implemented.
        Otherwise, a compile-time error occurs.
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        protected field: [check_type] = [base_value]
        get_field() {
          return this.field
        }
      }
      class A extends Base {
        protected field: [check_type] = [override_value]
      }
    logic: |-
      let a: Base = new A()
      let b: A = new A()
      let c: Base = new Base()
      arktest.assertTrue(a.get_field() instanceof [check_type])
      arktest.assertEQ(a.get_field(), [override_value])
      arktest.assertTrue(b.get_field() instanceof [check_type])
      arktest.assertEQ(b.get_field(), [override_value])
      arktest.assertTrue(c.get_field() instanceof [check_type])
      arktest.assertEQ(c.get_field(), [base_value])

  - desc: |-
      >-
        An overriding member can keep or extend an access modifier
        of a member that is inherited or implemented.
        Otherwise, a compile-time error occurs.
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class Base {
        protected field: [check_type] = [base_value]
        get_field() {
          return this.field
        }
      }
      class A extends Base {
        field: [check_type] = [override_value]
      }
    logic: |-
      let a: Base = new A()
      let b: A = new A()
      let c: Base = new Base()
      arktest.assertTrue(a.get_field() instanceof [check_type])
      arktest.assertEQ(a.get_field(), [override_value])
      arktest.assertTrue(b.get_field() instanceof [check_type])
      arktest.assertEQ(b.get_field(), [override_value])
      arktest.assertTrue(c.get_field() instanceof [check_type])
      arktest.assertEQ(c.get_field(), [base_value])

  - desc: |-
      >-
        An overriding member can keep or extend an access modifier
        of a member that is inherited or implemented.
        Otherwise, a compile-time error occurs.
      tags:
        - negative
        - compile-only
    decl: |-
      class C {
        num: number = 1
      }
      class D extends C {
        protected num: number = 2
      }
    logic: ""

  - desc: |-
      >-
        An overriding member can keep or extend an access modifier
        of a member that is inherited or implemented.
        Otherwise, a compile-time error occurs.
      tags:
        - negative
        - compile-only
    decl: |-
      class C {
        num: number = 1
      }
      class D extends C {
        private num: number = 2
      }
    logic: ""

  - desc: |-
      >-
        An overriding member can keep or extend an access modifier
        of a member that is inherited or implemented.
        Otherwise, a compile-time error occurs.
      tags:
        - negative
        - compile-only
    decl: |-
      class C {
        protected num: number = 1
      }
      class D extends C {
        private num: number = 2
      }
    logic: ""

  - desc: |-
      >-
        Providing implementation for the interface property
        in the form of a field
    check_variants:
      - {check_type: "Any", implement_value: "7"}
      - {check_type: "Object", implement_value: "\"abc\""}
      - {check_type: "number", implement_value: "6.7"}
      - {check_type: "double", implement_value: "5.0"}
      - {check_type: "float", implement_value: "7.3f"}
      - {check_type: "long", implement_value: "78945"}
      - {check_type: "int", implement_value: "321"}
      - {check_type: "short", implement_value: "253"}
      - {check_type: "byte", implement_value: "78"}
      - {check_type: "string", implement_value: "\"defg\""}
      - {check_type: "bigint", implement_value: "5556423623465n"}
      - {check_type: "char", implement_value: "c'z'"}
      - {check_type: "boolean", implement_value: "true"}
    decl: |-
      interface I {
        field: [check_type]
      }
      class A implements I {
        field: [check_type] = [implement_value]
      }
    logic: |-
      let a: I = new A()
      let b: A = new A()
      arktest.assertTrue(a instanceof A)
      arktest.assertTrue(a instanceof I)
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [implement_value])
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [implement_value])

  - desc: |-
      >-
        Providing implementation for the interface property
        in the form of a field with overriding base class field
    check_variants:
      - {check_type: "Any", base_value: "null", override_value: "7"}
      - {check_type: "Object", base_value: "5", override_value: "\"abc\""}
      - {check_type: "number", base_value: "3", override_value: "6.7"}
      - {check_type: "double", base_value: "3.4", override_value: "5.0"}
      - {check_type: "float", base_value: "6.7f", override_value: "7.3f"}
      - {check_type: "long", base_value: "9223372036854775807", override_value: "78945"}
      - {check_type: "int", base_value: "123", override_value: "321"}
      - {check_type: "short", base_value: "325", override_value: "253"}
      - {check_type: "byte", base_value: "127", override_value: "78"}
      - {check_type: "string", base_value: "\"abc\"", override_value: "\"defg\""}
      - {check_type: "bigint", base_value: "12345678901234567890n", override_value: "5556423623465n"}
      - {check_type: "char", base_value: "c'\\u2028'", override_value: "c'z'"}
      - {check_type: "boolean", base_value: "false", override_value: "true"}
    decl: |-
      class C {
        field: [check_type] = [base_value]
      }
      interface I {
        field: [check_type]
      }
      class D extends C implements I {
        field: [check_type] = [override_value]
      }
    logic: |-
      let a: I = new D()
      let b: C = new D()
      let c: C = new C()
      arktest.assertTrue(a instanceof D)
      arktest.assertTrue(a instanceof C)
      arktest.assertTrue(a instanceof I)
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [override_value])
      arktest.assertTrue(b instanceof D)
      arktest.assertTrue(b instanceof C)
      arktest.assertTrue(b instanceof I)
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [override_value])
      arktest.assertTrue(c.field instanceof [check_type])
      arktest.assertEQ(c.field, [base_value])

  - desc: |-
      Overriding interface property
    check_variants:
      - {check_type: "Any", implement_value_1: "null", implement_value_2: "7"}
      - {check_type: "Object", implement_value_1: "5", implement_value_2: "\"abc\""}
      - {check_type: "number", implement_value_1: "3", implement_value_2: "6.7"}
      - {check_type: "double", implement_value_1: "3.4", implement_value_2: "5.0"}
      - {check_type: "float", implement_value_1: "6.7f", implement_value_2: "7.3f"}
      - {check_type: "long", implement_value_1: "9223372036854775807", implement_value_2: "78945"}
      - {check_type: "int", implement_value_1: "123", implement_value_2: "321"}
      - {check_type: "short", implement_value_1: "325", implement_value_2: "253"}
      - {check_type: "byte", implement_value_1: "127", implement_value_2: "78"}
      - {check_type: "string", implement_value_1: "\"abc\"", implement_value_2: "\"defg\""}
      - {check_type: "bigint", implement_value_1: "12345678901234567890n", implement_value_2: "5556423623465n"}
      - {check_type: "char", implement_value_1: "c'\\u2028'", implement_value_2: "c'z'"}
      - {check_type: "boolean", implement_value_1: "false", implement_value_2: "true"}
    decl: |-
      interface Base {
        field: [check_type]
      }
      interface Derived extends Base {
        field: [check_type]
      }
      class A implements Derived {
        field: [check_type] = [implement_value_1]
      }
      class B implements Base {
        field: [check_type] = [implement_value_2]
      }
    logic: |-
      let a: Base = new A()
      let b: Derived = new A()
      let c: A = new A()
      let d: Base = new B()
      let e: B = new B()
      arktest.assertTrue(a instanceof A)
      arktest.assertTrue(a instanceof Derived)
      arktest.assertTrue(a instanceof Base)
      arktest.assertTrue(a.field instanceof [check_type])
      arktest.assertEQ(a.field, [implement_value_1])
      arktest.assertTrue(b instanceof A)
      arktest.assertTrue(b instanceof Derived)
      arktest.assertTrue(b instanceof Base)
      arktest.assertTrue(b.field instanceof [check_type])
      arktest.assertEQ(b.field, [implement_value_1])
      arktest.assertTrue(c instanceof A)
      arktest.assertTrue(c instanceof Derived)
      arktest.assertTrue(c instanceof Base)
      arktest.assertTrue(c.field instanceof [check_type])
      arktest.assertEQ(c.field, [implement_value_1])
      arktest.assertTrue(d instanceof B)
      arktest.assertTrue(d instanceof Base)
      arktest.assertTrue(d.field instanceof [check_type])
      arktest.assertEQ(d.field, [implement_value_2])
      arktest.assertTrue(e instanceof B)
      arktest.assertTrue(e instanceof Base)
      arktest.assertTrue(e.field instanceof [check_type])
      arktest.assertEQ(e.field, [implement_value_2])
