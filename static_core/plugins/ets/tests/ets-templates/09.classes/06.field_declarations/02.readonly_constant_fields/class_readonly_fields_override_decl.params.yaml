# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      Checking for initialization with overriding usage.
    check_variants:
      - {type: "long", check_type: "long",
        base_value: "0", check_value: "5"}
      - {type: "int", check_type: "int",
        base_value: "0", check_value: "5"}
      - {type: "byte", check_type: "byte",
        base_value: "0", check_value: "5"}
      - {type: "short", check_type: "short",
        base_value: "0", check_value: "5"}
      - {type: "double", check_type: "double",
        base_value: "0", check_value: "7.3"}
      - {type: "number", check_type: "number",
        base_value: "0", check_value: "5"}
      - {type: "float", check_type: "float",
        base_value: "0.0f", check_value: "7.3f"}
      - {type: "bigint", check_type: "bigint",
        base_value: "0n", check_value: "5n"}
      - {type: "string", check_type: "string",
        base_value: "\"\"", check_value: "\"abc\""}
      - {type: "char", check_type: "char",
        base_value: "c'\u0000'", check_value: "c'a'"}
      - {type: "boolean", check_type: "boolean",
        base_value: "false", check_value: "true"}
      - {type: "Object", check_type: "Object",
        base_value: "0", check_value: "5"}
      - {type: "Object | null", check_type: "Object | null",
        base_value: "0", check_value: "null"}
      - {type: "Object | undefined", check_type: "Object | undefined",
        base_value: "0", check_value: "undefined"}
      - {type: "Object | undefined | null", check_type: "Object",
        base_value: "0", check_value: "5"}
      - {type: "Any", check_type: "Any",
        base_value: "0", check_value: "5"}
    decl_variants:
      - |-
        class Base {
          readonly field: [type] = [base_value]
        }
        class A extends Base {
          override readonly field: [type] = [check_value]
        }
      - |-
        class Base {
          readonly field: [type]
          constructor () {
            this.field = [base_value]
          }
        }
        class A extends Base {
          override readonly field: [type]
          constructor () {
            this.field = [check_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
      - |-
        let a: Base = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
      - |-
        let a: Base = new Base
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])

  - desc: |-
      Checking for initialization with overriding usage.
    check_variants:
      - {check_type: "long", base_value: "0", check_value: "5"}
      - {check_type: "int", base_value: "0", check_value: "5"}
      - {check_type: "byte", base_value: "0", check_value: "5"}
      - {check_type: "short", base_value: "0", check_value: "5"}
      - {check_type: "double", base_value: "0", check_value: "7.3"}
      - {check_type: "number", base_value: "0", check_value: "5"}
      - {check_type: "float", base_value: "0", check_value: "7.3f"}
      - {check_type: "bigint", base_value: "0n", check_value: "5n"}
      - {check_type: "string", base_value: "\"\"", check_value: "\"abc\""}
      - {check_type: "char", base_value: "c'0'", check_value: "c'a'"}
      - {check_type: "boolean", base_value: "false", check_value: "true"}
      - {check_type: "Object", base_value: "0", check_value: "5"}
    decl_variants:
      - |-
        class Base {
          readonly field: [check_type] = [base_value]
        }
        class A extends Base {
          override readonly field!: [check_type]
        }
      - |-
        class Base {
          readonly field!: [check_type]
        }
        class A extends Base {
          override readonly field!: [check_type]
        }
      - |-
        class Base {
          readonly field!: [check_type]
        }
        class A extends Base {
          override readonly field: [check_type] = [base_value]
        }
    sub_cases_logic:
      - |-
        let a: A = {field: [check_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
      - |-
        let a: Base = {field: [check_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking for initialization with overriding usage.
    check_variants:
      - {check_type: "long", base_value: "0", check_value: "5"}
      - {check_type: "int", base_value: "0", check_value: "5"}
      - {check_type: "byte", base_value: "0", check_value: "5"}
      - {check_type: "short", base_value: "0", check_value: "5"}
      - {check_type: "double", base_value: "0", check_value: "7.3"}
      - {check_type: "number", base_value: "0", check_value: "5"}
      - {check_type: "float", base_value: "0", check_value: "7.3f"}
      - {check_type: "bigint", base_value: "0n", check_value: "5n"}
      - {check_type: "string", base_value: "\"\"", check_value: "\"abc\""}
      - {check_type: "char", base_value: "c'0'", check_value: "c'a'"}
      - {check_type: "boolean", base_value: "false", check_value: "true"}
      - {check_type: "Object", base_value: "0", check_value: "5"}
    decl_variants:
      - |-
        class Base {
          readonly field: [check_type]
          constructor () {
            this.field = [base_value]
          }
        }
        class A extends Base {
          override readonly field!: [check_type]
          constructor () {
            this.field = [check_value]
          }
        }
      - |-
        class Base {
          readonly field!: [check_type]
          constructor () {
            this.field = [base_value]
          }
        }
        class A extends Base {
          override readonly field!: [check_type]
          constructor () {
            this.field = [check_value]
          }
        }
      - |-
        class Base {
          readonly field!: [check_type]
          constructor () {
            this.field = [base_value]
          }
        }
        class A extends Base {
          override readonly field: [check_type]
          constructor () {
            this.field = [check_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
      - |-
        let a: Base = new A
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
      - |-
        let a: Base = new Base
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
