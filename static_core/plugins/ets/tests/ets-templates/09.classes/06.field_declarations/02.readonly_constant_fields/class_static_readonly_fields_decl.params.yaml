# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      Checking for initialization with field initializer.
    check_variants:
      - {type: "long", check_type: "long", check_value: "5"}
      - {type: "int", check_type: "int", check_value: "5"}
      - {type: "byte", check_type: "byte", check_value: "5"}
      - {type: "short", check_type: "short", check_value: "5"}
      - {type: "double", check_type: "double", check_value: "7.3"}
      - {type: "number", check_type: "number", check_value: "5"}
      - {type: "float", check_type: "float", check_value: "7.3f"}
      - {type: "bigint", check_type: "bigint", check_value: "5n"}
      - {type: "string", check_type: "string", check_value: "\"abc\""}
      - {type: "char", check_type: "char", check_value: "c'a'"}
      - {type: "boolean", check_type: "boolean", check_value: "true"}
      - {type: "Object", check_type: "Object", check_value: "5"}
      - {type: "Object | null", check_type: "null", check_value: "null"}
      - {type: "Object | undefined", check_type: "undefined",
        check_value: "undefined"}
      - {type: "Object | undefined | null", check_type: "Object",
        check_value: "5"}
      - {type: "Any", check_type: "Any", check_value: "5"}
    decl_variants:
      - |-
        class A {
          static readonly field: [type] = [check_value]
        }
      - |-
        class A {
          static v: [type] = [check_value]
          static readonly field: [type] = A.v
        }
      - |-
        class A {
          private static readonly _v: [type] = [check_value]
          static get v(): [type] {
            return A._v
          }
          static readonly field: [type] = A.v
        }
      - |-
        class Base {
          private static readonly _v: [type] = [check_value]
          static get v(): [type] {
            return Base._v
          }
        }
        class A extends Base {
          static readonly field: [type] = Base.v
        }
      - |-
        function foo(): [type] {
          return [check_value]
        }
        class A {
          static readonly field: [type] = foo()
        }
      - |-
        class A {
          private static readonly v: [type] = [check_value]
          private static readonly _field: [type] = A.v
          static get field(): [type] {
            return A._field
          }
        }
      - |-
        class Base {
          protected static readonly _v: [type] = [check_value]
          static get v(): [type] {
            return Base._v
          }
        }
        class A extends Base {
          protected static readonly _field: [type] = Base.v
          static get field(): [type] {
            return A._field
          }
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertEQ(A.field, [check_value])

  - desc: |-
      Checking for initialization with field initializer.
    check_variants:
      - {check_type: "C", data_type: "int", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {readonly data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          static readonly field: [check_type] = [init_value]
        }
      - |-
        [cv_decl_data]
        class A {
          static v: [check_type] = [init_value]
          static readonly field: [check_type] = A.v
        }
      - |-
        [cv_decl_data]
        class A {
          private static readonly _v: [check_type] = [init_value]
          static get v(): [check_type] {
            return A._v
          }
          static readonly field: [check_type] = A.v
        }
      - |-
        [cv_decl_data]
        class Base {
          private static readonly _v: [check_type] = [init_value]
          static get v(): [check_type] {
            return Base._v
          }
        }
        class A extends Base {
          static readonly field: [check_type] = Base.v
        }
      - |-
        [cv_decl_data]
        function foo(): [check_type] {
          return [init_value]
        }
        class A {
          static readonly field: [check_type] = foo()
        }
      - |-
        [cv_decl_data]
        class A {
          private static readonly v: [check_type] = [init_value]
          private static readonly _field: [check_type] = A.v
          static get field(): [check_type] {
            return A._field
          }
        }
      - |-
        [cv_decl_data]
        class Base {
          protected static readonly _v: [check_type] = [init_value]
          static get v(): [check_type] {
            return Base._v
          }
        }
        class A extends Base {
          protected static readonly _field: [check_type] = Base.v
          static get field(): [check_type] {
            return A._field
          }
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertTrue(A.field.data instanceof [data_type])
        arktest.assertEQ(A.field.data, [check_value])

  - desc: |-
      >-
        Checking for initialization optional readonly field
        with default value.
    check_variants:
      - {type: "long"}
      - {type: "int"}
      - {type: "byte"}
      - {type: "short"}
      - {type: "double"}
      - {type: "number"}
      - {type: "float"}
      - {type: "bigint"}
      - {type: "string"}
      - {type: "char"}
      - {type: "boolean"}
      - {type: "Object"}
      - {type: "Object | null"}
      - {type: "Object | undefined"}
      - {type: "Object | undefined | null"}
      - {type: "Any"}
    decl_variants:
      - |-
        class A {
          static readonly field?: [type]
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof undefined)
        arktest.assertEQ(A.field, undefined)

  - desc: |-
      Checking for initialization optional readonly field.
    check_variants:
      - {type: "long", check_type: "long", check_value: "5"}
      - {type: "int", check_type: "int", check_value: "5"}
      - {type: "byte", check_type: "byte", check_value: "5"}
      - {type: "short", check_type: "short", check_value: "5"}
      - {type: "double", check_type: "double", check_value: "7.3"}
      - {type: "number", check_type: "number", check_value: "5"}
      - {type: "float", check_type: "float", check_value: "7.3f"}
      - {type: "bigint", check_type: "bigint", check_value: "5n"}
      - {type: "string", check_type: "string", check_value: "\"abc\""}
      - {type: "char", check_type: "char", check_value: "c'a'"}
      - {type: "boolean", check_type: "boolean", check_value: "true"}
      - {type: "Object", check_type: "Object", check_value: "5"}
      - {type: "Object | null", check_type: "null", check_value: "null"}
      - {type: "Object | undefined", check_type: "undefined",
        check_value: "undefined"}
      - {type: "Object | undefined | null", check_type: "Object",
        check_value: "5"}
      - {type: "Any", check_type: "Any", check_value: "5"}
    decl_variants:
      - |-
        class A {
          static readonly field?: [type] = [check_value]
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertEQ(A.field, [check_value])

  - desc: |-
      Checking for initialization optional readonly field.
    check_variants:
      - {check_type: "C", data_type: "int", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {readonly data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          static readonly field?: [check_type] = [init_value]
        }
    sub_cases_logic:
      - |-
        let v = A.field
        arktest.assertTrue(v instanceof [check_type])
        if (v instanceof [check_type]) {
          arktest.assertTrue(v.data instanceof [data_type])
          arktest.assertEQ(v.data, [check_value])
        }

  - desc: |-
      >-
        Checking for initialization with different
        covariant subtype values usage.
    check_variants:
      - {check_type: "Animal", check_value: "\"\""}
      - {check_type: "Dog", check_value: "\"dog\""}
      - {check_type: "Cat", check_value: "\"cat\""}
    decl_variants:
      - |-
        class Animal {
          name: string = ""
        }
        class Dog extends Animal {
          constructor () {
            this.name = "dog"
          }
        }
        class Cat extends Animal {
          constructor () {
            this.name = "cat"
          }
        }
        class C {
          static readonly field: Animal = new [check_type]
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(C.field instanceof [check_type])
        arktest.assertEQ(C.field.name, [check_value])

  - desc: |-
      >-
        Checking for initialization with different
        covariant function subtype values usage.
    check_variants:
      - {check_type: "HandlerNothing", init_value: "handlerNothing",
        check_value: "-567"}
      - {check_type: "HandlerA", init_value: "handlerA",
        check_value: "13"}
      - {check_type: "HandlerAInt", init_value: "handlerAInt",
        check_value: "-20"}
    decl_variants:
      - |-
        class A {
          v: int
          constructor(v: int = 0) {
            this.v = v
          }
        }
        class B extends A {
          constructor(v: int = 0) {
            super(-v)
          }
          field(): int {
            return 13
          }
        }
        type HandlerBInt = (a: B, b: int) => A
        type HandlerAInt = (a: A, b: int) => B
        const handlerAInt: HandlerAInt = (a: A, b: int): B => {
          if (a instanceof B){
            return new B(a.field() + b)
          } else {
            return new B(b)
          }
        }
        type HandlerA = (a: A) => A
        const handlerA: HandlerA = (a: A): A => {
          if (a instanceof B){
            return new A(a.field())
          } else {
            return new A
          }
        }
        type HandlerNothing = () => B
        const handlerNothing: HandlerNothing = (): B => {
          return new B(567)
        }
        class C {
          static readonly field: HandlerBInt = [init_value]
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(C.field instanceof [check_type])
        arktest.assertEQ(C.field(new B, 7).v, [check_value])
