# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      Checking for changing the value from class method call.
    check_variants:
      - {type: "int",
        base_value: "0", check_value: "5"}
      - {type: "double",
        base_value: "0", check_value: "7.3"}
      - {type: "Object | undefined",
        base_value: "0", check_value: "5"}
      - {type: "Any",
        base_value: "0", check_value: "5"}
    decl_variants:
      - |-
        class A {
          readonly field: [type] = [base_value]
          foo(): void {
            this.field = [check_value]
          }
        }
      - |-
        class A {
          readonly field: [type] = [base_value]
          foo: () => void = (): void => {
            this.field = [check_value]
          }
        }

  - desc: |-
      Checking for changing the value from outside of class.
    check_variants:
      - {type: "int",
        base_value: "0", check_value: "5"}
      - {type: "double",
        base_value: "0", check_value: "7.3"}
      - {type: "Object | undefined",
        base_value: "0", check_value: "5"}
      - {type: "Any",
        base_value: "0", check_value: "5"}
    decl_variants:
      - |-
        class A {
          readonly field: [type] = [base_value]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.field = [check_value]
      - |-
        let a: A = new A()
        const lambda = () => {
          a.field = [check_value]
        }

  - desc: |-
      >-
        Checking for changing the value from outside of class
        with smart type usage.
    decl_variants:
      - |-
        class Animal {
        }
        class Dog extends Animal {
          readonly field: number = 5
        }
        function foo(a: Animal) {
          if (a instanceof Dog) {
            a.field = 3
          }
        }
      - |-
        class Animal {
        }
        class Dog extends Animal {
          readonly field: number = 5
        }
        function foo(a: Animal) {
          (a as Dog).field = 3
        }

  - desc: |-
      >-
        Checking for initialization with different
        not covariant subtype values usage.
    check_variants:
      - {check_value_type: "Cat"}
      - {check_value_type: "Animal"}
    decl_variants:
      - |-
        class Animal {}
        class Dog extends Animal {}
        class Cat extends Animal {}
        class C {
          readonly field: Dog = new [check_value_type]
        }
      - |-
        class Animal {}
        class Dog extends Animal {}
        class Cat extends Animal {}
        class C {
          readonly field: Dog
          constructor () {
            this.field = new [check_value_type]
          }
        }

  - desc: |-
      >-
        Checking for initialization with different
        not covariant function subtype values usage.
    check_variants:
      - {check_value: "handlerCInt"}
      - {check_value: "handlerBInt"}
      - {check_value: "handlerB"}
      - {check_value: "handlerBIntInt"}
      - {check_value: "handlerNothing"}
    decl_variants:
      - |-
        class A {}
        class B extends A {}
        class C extends A {}
        type HandlerReq = (a: B, b: int) => B
        const handlerReq: HandlerReq = (a: B, b: int): B => {
          return new B
        }
        type HandlerCInt = (a: C, b: int) => B
        const handlerCInt: HandlerCInt = (a: C, b: int): B => {
          return new B
        }
        type HandlerBInt = (a: B, b: int) => A
        const handlerBInt: HandlerBInt = (a: B, b: int): A => {
          return new B
        }
        type HandlerB = (a: B) => A
        const handlerB: HandlerB = (a: B): A => {
          return new B
        }
        type HandlerBIntInt = (a: B, b: int, c: int) => B
        const handlerBIntInt: HandlerBIntInt = (a: B, b: int, c: int): B => {
          return new B
        }
        type HandlerNothing = () => C
        const handlerNothing: HandlerNothing = (): C => {
          return new C
        }
        class D {
          readonly field: HandlerReq = [check_value]
        }
      - |-
        class A {}
        class B extends A {}
        class C extends A {}
        type HandlerReq = (a: B, b: int) => B
        const handlerReq: HandlerReq = (a: B, b: int): B => {
          return new B
        }
        type HandlerCInt = (a: C, b: int) => B
        const handlerCInt: HandlerCInt = (a: C, b: int): B => {
          return new B
        }
        type HandlerBInt = (a: B, b: int) => A
        const handlerBInt: HandlerBInt = (a: B, b: int): A => {
          return new B
        }
        type HandlerB = (a: B) => A
        const handlerB: HandlerB = (a: B): A => {
          return new B
        }
        type HandlerBIntInt = (a: B, b: int, c: int) => B
        const handlerBIntInt: HandlerBIntInt = (a: B, b: int, c: int): B => {
          return new B
        }
        type HandlerNothing = () => C
        const handlerNothing: HandlerNothing = (): C => {
          return new C
        }
        class D {
          readonly field: HandlerReq
          constructor () {
            this.field = [check_value]
          }
        }

  - desc: |-
      >-
        Checking for changing the value from outside of class
        with subtype usage.
    check_variants:
      - {type: "int",
        base_value: "0", check_value: "5"}
      - {type: "double",
        base_value: "0", check_value: "7.3"}
      - {type: "Object | undefined",
        base_value: "0", check_value: "5"}
      - {type: "Any",
        base_value: "0", check_value: "5"}
    decl_variants:
      - |-
        class Base {
          readonly field: [type] = [base_value]
        }
        class A extends Base {
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.field = [check_value]
      - |-
        let a: A = new A()
        const lambda = () => {
          a.field = [check_value]
        }

  - desc: |-
      >-
        Checking for changing the value by setter.
    check_variants:
      - {type: "int",
        base_value: "0", check_value: "5"}
      - {type: "double",
        base_value: "0", check_value: "7.3"}
      - {type: "Object | undefined",
        base_value: "0", check_value: "5"}
      - {type: "Any",
        base_value: "0", check_value: "5"}
    decl_variants:
      - |-
        class A {
          private readonly _field: [type] = [base_value]
          get field(): [type] {
            return this._field
          }
          set field(a: [type]) {
            this._field = a
          }
        }

  - desc: |-
      >-
        Checking for initialization with field initializer
        by assign this directly.
    decl_variants:
      - |-
        class A {
          readonly field = this
        }

  - desc: |-
      >-
        Checking for initialization with field initializer
        with call methods of this or supper.
    check_variants:
      - {type: "int", check_value: "5"}
      - {type: "double", check_value: "7.3"}
      - {type: "Object | undefined", check_value: "5"}
      - {type: "Any", check_value: "5"}
    decl_variants:
      - |-
        class A {
          foo (): [type] {
            return [check_value]
          }
          readonly field: [type] = this.foo()
        }
      - |-
        class Base {
          foo (): [type] {
            return [check_value]
          }
        }
        class A extends Base {
          readonly field: [type] = super.foo()
        }

  - desc: |-
      >-
        Checking for initialization with field initializer
        with capture this.
    decl_variants:
      - |-
        class B {}
        function foo (f: () => B) { return f() }
        class A {
          readonly field1 = foo(() => this.field2)
          readonly field2 = new B
        }

  - desc: |-
      >-
        Checking for initialization with field initializer
        with usage this or super.
    check_variants:
      - {type: "int", check_value: "5"}
      - {type: "double", check_value: "7.3"}
      - {type: "Object | undefined", check_value: "5"}
      - {type: "Any", check_value: "5"}
    decl_variants:
      - |-
        class A {
          v: [type] = [check_value]
          readonly field: [type] = this.v
        }
      - |-
        class A {
          private readonly _v: [type] = [check_value]
          get v(): [type] {
            return this._v
          }
          readonly field: [type] = this.v
        }
      - |-
        class Base {
          private readonly _v: [type] = [check_value]
          get v(): [type] {
            return this._v
          }
        }
        class A extends Base {
          readonly field: [type] = super.v
        }
      - |-
        class A {
          private readonly v: [type] = [check_value]
          private readonly _field: [type] = this.v
          get field(): [type] {
            return this._field
          }
        }
      - |-
        class Base {
          protected readonly _v: [type] = [check_value]
          get v(): [type] {
            return this._v
          }
        }
        class A extends Base {
          protected readonly _field: [type] = super.v
          get field(): [type] {
            return this._field
          }
        }

  - desc: |-
      Readonly fields initialization never uses default values.
    check_variants:
      - {type: "int"}
      - {type: "double"}
      - {type: "Object | undefined"}
      - {type: "Any"}
    decl_variants:
      - |-
        class A {
          readonly field: [type]
        }

  - desc: |-
      >-
        Checking on field has no initializer and is not
        definitely assigned in the constructor.
    check_variants:
      - {type: "bigint"}
      - {type: "string"}
      - {type: "Object"}
    decl_variants:
      - |-
        class A {
          readonly field: [type]
        }

  - desc: |-
      >-
        Checking on field has no initializer and is not
        definitely assigned in the constructor.
    decl_variants:
      - |-
        class C {}
        class A {
          readonly field: C
        }
