# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {type: "long", check_type: "long", check_value: "5"}
      - {type: "int", check_type: "int", check_value: "5"}
      - {type: "byte", check_type: "byte", check_value: "5"}
      - {type: "short", check_type: "short", check_value: "5"}
      - {type: "double", check_type: "double", check_value: "7.3"}
      - {type: "number", check_type: "number", check_value: "5"}
      - {type: "float", check_type: "float", check_value: "7.3f"}
      - {type: "bigint", check_type: "bigint", check_value: "5n"}
      - {type: "string", check_type: "string", check_value: "\"abc\""}
      - {type: "char", check_type: "char", check_value: "c'a'"}
      - {type: "boolean", check_type: "boolean", check_value: "true"}
      - {type: "Object", check_type: "Object", check_value: "5"}
      - {type: "Object | null", check_type: "null", check_value: "null"}
      - {type: "Object | undefined", check_type: "undefined",
        check_value: "undefined"}
      - {type: "Object | undefined | null", check_type: "Object",
        check_value: "5"}
      - {type: "Any", check_type: "Any", check_value: "5"}
    decl_variants:
      - |-
        interface I {
          readonly field: [type]
        }
        class A implements I {
          readonly field: [type] = [check_value]
        }
      - |-
        interface I {
          readonly field: [type]
        }
        class A implements I {
          readonly field: [type]
          constructor () {
            this.field = [check_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {check_type: "C", data_type: "int",
        init_value: "{data: 5}", check_value: "5",
        cv_decl_data: "class C {readonly data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          readonly field: [check_type] = [init_value]
        }
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          readonly field: [check_type]
          constructor () {
            this.field = [init_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {type: "long", check_type: "long",
        base_value: "0", check_value: "5"}
      - {type: "int", check_type: "int",
        base_value: "0", check_value: "5"}
      - {type: "byte", check_type: "byte",
        base_value: "0", check_value: "5"}
      - {type: "short", check_type: "short",
        base_value: "0", check_value: "5"}
      - {type: "double", check_type: "double",
        base_value: "0", check_value: "7.3"}
      - {type: "number", check_type: "number",
        base_value: "0", check_value: "5"}
      - {type: "float", check_type: "float",
        base_value: "0.0f", check_value: "7.3f"}
      - {type: "bigint", check_type: "bigint",
        base_value: "0n", check_value: "5n"}
      - {type: "string", check_type: "string",
        base_value: "\"\"", check_value: "\"abc\""}
      - {type: "char", check_type: "char",
        base_value: "c'\u0000'", check_value: "c'a'"}
      - {type: "boolean", check_type: "boolean",
        base_value: "false", check_value: "true"}
      - {type: "Object", check_type: "Object",
        base_value: "0", check_value: "5"}
      - {type: "Object | null", check_type: "null",
        base_value: "0", check_value: "null"}
      - {type: "Object | undefined", check_type: "undefined",
        base_value: "0", check_value: "undefined"}
      - {type: "Object | undefined | null", check_type: "Object",
        base_value: "0", check_value: "5"}
      - {type: "Any", check_type: "Any",
        base_value: "0", check_value: "5"}
    decl_variants:
      - |-
        interface I {
          readonly field: [type]
        }
        class A implements I {
          readonly field: [type] = [base_value]
        }
      - |-
        interface I {
          readonly field: [type]
        }
        class A implements I {
          readonly field: [type]
          constructor () {
            this.field = [base_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = {field: [check_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {check_type: "C", data_type: "int",
        base_init_value: "{data: 0}", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {readonly data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          readonly field: [check_type] = [base_init_value]
        }
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          readonly field: [check_type]
          constructor () {
            this.field = [base_init_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = {field: [init_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {type: "long", check_type: "long", check_value: "5"}
      - {type: "int", check_type: "int", check_value: "5"}
      - {type: "byte", check_type: "byte", check_value: "5"}
      - {type: "short", check_type: "short", check_value: "5"}
      - {type: "double", check_type: "double", check_value: "7.3"}
      - {type: "number", check_type: "number", check_value: "5"}
      - {type: "float", check_type: "float", check_value: "7.3f"}
      - {type: "bigint", check_type: "bigint", check_value: "5n"}
      - {type: "string", check_type: "string", check_value: "\"abc\""}
      - {type: "char", check_type: "char", check_value: "c'a'"}
      - {type: "boolean", check_type: "boolean", check_value: "true"}
      - {type: "Object", check_type: "Object", check_value: "5"}
      - {type: "Object | null", check_type: "null", check_value: "null"}
      - {type: "Object | undefined", check_type: "undefined",
        check_value: "undefined"}
      - {type: "Object | undefined | null", check_type: "Object",
        check_value: "5"}
      - {type: "Any", check_type: "Any", check_value: "5"}
    decl_variants:
      - |-
        interface I {
          readonly field: [type]
        }
        class A implements I {
          field: [type] = [check_value]
        }
      - |-
        interface I {
          readonly field: [type]
        }
        class A implements I {
          field: [type]
          constructor () {
            this.field = [check_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {check_type: "C", data_type: "int",
        init_value: "{data: 5}", check_value: "5",
        cv_decl_data: "class C {readonly data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          field: [check_type] = [init_value]
        }
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          field: [check_type]
          constructor () {
            this.field = [init_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {type: "long", check_type: "long", check_value: "5"}
      - {type: "int", check_type: "int", check_value: "5"}
      - {type: "byte", check_type: "byte", check_value: "5"}
      - {type: "short", check_type: "short", check_value: "5"}
      - {type: "double", check_type: "double", check_value: "7.3"}
      - {type: "number", check_type: "number", check_value: "5"}
      - {type: "float", check_type: "float", check_value: "7.3f"}
      - {type: "bigint", check_type: "bigint", check_value: "5n"}
      - {type: "string", check_type: "string", check_value: "\"abc\""}
      - {type: "char", check_type: "char", check_value: "c'a'"}
      - {type: "boolean", check_type: "boolean", check_value: "true"}
      - {type: "Object", check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        interface I {
          readonly field: [type]
        }
        class A implements I {
          field!: [type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.field = [check_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {check_type: "C", data_type: "int",
        init_value: "{data: 5}", check_value: "5",
        cv_decl_data: "class C {readonly data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          field!: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.field = [init_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {type: "long", check_type: "long", check_value: "5"}
      - {type: "int", check_type: "int", check_value: "5"}
      - {type: "byte", check_type: "byte", check_value: "5"}
      - {type: "short", check_type: "short", check_value: "5"}
      - {type: "double", check_type: "double", check_value: "7.3"}
      - {type: "number", check_type: "number", check_value: "5"}
      - {type: "float", check_type: "float", check_value: "7.3f"}
      - {type: "bigint", check_type: "bigint", check_value: "5n"}
      - {type: "string", check_type: "string", check_value: "\"abc\""}
      - {type: "char", check_type: "char", check_value: "c'a'"}
      - {type: "boolean", check_type: "boolean", check_value: "true"}
      - {type: "Object", check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        interface I {
          readonly field: [type]
        }
        class A implements I {
          field!: [type]
          constructor () {
            this.field = [check_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {check_type: "C", data_type: "int",
        init_value: "{data: 5}", check_value: "5",
        cv_decl_data: "class C {readonly data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          field!: [check_type]
          constructor () {
            this.field = [init_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {type: "long", check_type: "long", check_value: "5"}
      - {type: "int", check_type: "int", check_value: "5"}
      - {type: "byte", check_type: "byte", check_value: "5"}
      - {type: "short", check_type: "short", check_value: "5"}
      - {type: "double", check_type: "double", check_value: "7.3"}
      - {type: "number", check_type: "number", check_value: "5"}
      - {type: "float", check_type: "float", check_value: "7.3f"}
      - {type: "bigint", check_type: "bigint", check_value: "5n"}
      - {type: "string", check_type: "string", check_value: "\"abc\""}
      - {type: "char", check_type: "char", check_value: "c'a'"}
      - {type: "boolean", check_type: "boolean", check_value: "true"}
      - {type: "Object", check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        interface I {
          readonly field: [type]
        }
        class A implements I {
          readonly field!: [type]
          constructor () {
            this.field = [check_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {check_type: "C", data_type: "int",
        init_value: "{data: 5}", check_value: "5",
        cv_decl_data: "class C {readonly data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          readonly field!: [check_type]
          constructor () {
            this.field = [init_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {type: "long", check_type: "long", check_value: "5"}
      - {type: "int", check_type: "int", check_value: "5"}
      - {type: "byte", check_type: "byte", check_value: "5"}
      - {type: "short", check_type: "short", check_value: "5"}
      - {type: "double", check_type: "double", check_value: "7.3"}
      - {type: "number", check_type: "number", check_value: "5"}
      - {type: "float", check_type: "float", check_value: "7.3f"}
      - {type: "bigint", check_type: "bigint", check_value: "5n"}
      - {type: "string", check_type: "string", check_value: "\"abc\""}
      - {type: "char", check_type: "char", check_value: "c'a'"}
      - {type: "boolean", check_type: "boolean", check_value: "true"}
      - {type: "Object", check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        interface I {
          readonly field: [type]
        }
        class A implements I {
          readonly field!: [type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        let b: A = {field: [check_value]}
        arktest.assertTrue(a instanceof A)
        arktest.assertTrue(b instanceof A)
        arktest.assertTrue(b.field instanceof [check_type])
        arktest.assertEQ(b.field, [check_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {check_type: "C", data_type: "int",
        init_value: "{data: 5}", check_value: "5",
        cv_decl_data: "class C {readonly data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          readonly field!: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        let b: A = {field: [init_value]}
        arktest.assertTrue(a instanceof A)
        arktest.assertTrue(b instanceof A)
        arktest.assertTrue(b.field instanceof [check_type])
        arktest.assertTrue(b.field.data instanceof [data_type])
        arktest.assertEQ(b.field.data, [check_value])
