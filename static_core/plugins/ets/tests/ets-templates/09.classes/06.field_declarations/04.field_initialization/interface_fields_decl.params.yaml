# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      Checking the implementation of interface field.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        interface I {
          field: [check_type]
        }
        class A implements I {
          field: [check_type] = [base_value]
        }
      - |-
        interface I {
          field: [check_type]
        }
        class A implements I {
          field: [check_type]
          constructor () {
            this.field = [base_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.field = [new_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])
      - |-
        let a: A = {field: [new_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])
        a.field = [base_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])

  - desc: |-
      Checking the implementation of interface field.
    check_variants:
      - {check_type: "C", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        new_obj_lit: "{data: 5}", new_value: "5",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        interface I {
          field: [check_type]
        }
        class A implements I {
          field: [check_type] = [base_obj_lit]
        }
      - |-
        [cv_decl_data]
        interface I {
          field: [check_type]
        }
        class A implements I {
          field: [check_type]
          constructor () {
            this.field = [base_obj_lit]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [base_value])
        a.field = [new_obj_lit]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [new_value])

  - desc: |-
      Checking the implementation of interface field.
    check_variants:
      - {check_type: "C", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        new_obj_lit: "{data: 5}", new_value: "5",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        interface I {
          field: [check_type]
        }
        class A implements I {
          field: [check_type] = new [check_type]
        }
      - |-
        [cv_decl_data]
        interface I {
          field: [check_type]
        }
        class A implements I {
          field: [check_type]
          constructor () {
            this.field = new [check_type]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = {field: [base_obj_lit]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [base_value])
        a.field = [new_obj_lit]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [new_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          field: [check_type] = [base_value]
        }
      - |-
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          field: [check_type]
          constructor () {
            this.field = [base_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.field = [new_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])
      - |-
        let a: A = {field: [new_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])
        a.field = [base_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {check_type: "C", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        new_obj_lit: "{data: 5}", new_value: "5",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          field: [check_type] = [base_obj_lit]
        }
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          field: [check_type]
          constructor () {
            this.field = [base_obj_lit]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [base_value])
        a.field = [new_obj_lit]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [new_value])

  - desc: |-
      Checking the implementation of interface readonly field.
    check_variants:
      - {check_type: "C", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        new_obj_lit: "{data: 5}", new_value: "5",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          field: [check_type] = new [check_type]
        }
      - |-
        [cv_decl_data]
        interface I {
          readonly field: [check_type]
        }
        class A implements I {
          field: [check_type]
          constructor () {
            this.field = new [check_type]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = {field: [base_obj_lit]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [base_value])
        a.field = [new_obj_lit]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [new_value])

  - desc: |-
      Checking creation interface object with field.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        interface I {
          field: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: I = {field: [base_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.field = [new_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])

  - desc: |-
      Checking the implementation of interface in namespace.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        namespace ns {
          export interface I {
            field: [check_type]
            foo: () => void
          }
          export class A implements I {
            field: [check_type] = [base_value]
            foo: () => void = (): void => {
              this.field = [new_value]
            }
          }
        }
    sub_cases_logic:
      - |-
        let a: ns.A = new ns.A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.foo()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])
      - |-
        let a: ns.A = {field: [new_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])
        a.field = [base_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
