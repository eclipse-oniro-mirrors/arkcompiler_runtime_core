# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      Checking for initialization with default values.
    check_variants:
      - {check_type: "long",
        base_value: "0", new_value: "5"}
      - {check_type: "int",
        base_value: "0", new_value: "5"}
      - {check_type: "byte",
        base_value: "0", new_value: "5"}
      - {check_type: "short",
        base_value: "0", new_value: "5"}
      - {check_type: "double",
        base_value: "0", new_value: "7.3"}
      - {check_type: "number",
        base_value: "0", new_value: "5"}
      - {check_type: "float",
        base_value: "0.0f", new_value: "7.3f"}
      - {check_type: "char",
        base_value: "c'\\u0000'", new_value: "c'a'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object | undefined",
        base_value: "undefined", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "undefined", new_value: "5"}
      - {check_type: "Any",
        base_value: "undefined", new_value: "5"}
    decl_variants:
      - |-
        class A {
          field: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.field = [new_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])

  - desc: |-
      Checking for initialization with field initializer.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined",
        base_value: "undefined", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        class A {
          field: [check_type] = [base_value]
        }
      - |-
        function foo(): [check_type] {
          return [base_value]
        }
        class A {
          field: [check_type] = foo()
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.field = [new_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])

  - desc: |-
      Checking for initialization with field initializer.
    check_variants:
      - {check_type: "C", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        new_obj_lit: "{data: 5}", new_value: "5",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field: [check_type] = [base_obj_lit]
        }
      - |-
        [cv_decl_data]
        function foo(): [check_type] {
          return [base_obj_lit]
        }
        class A {
          field: [check_type] = foo()
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [base_value])
        a.field = [new_obj_lit]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [new_value])

  - desc: |-
      Checking for initialization from constructor.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined",
        base_value: "undefined", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        class A {
          field: [check_type]
          constructor () {
            this.field = [base_value]
          }
        }
      - |-
        class A {
          field: [check_type]
          constructor (arg: [check_type] = [base_value]) {
            this.field = arg
          }
        }
      - |-
        class A {
          field: [check_type]
          constructor (...args: Any[]) {
            this.field = [base_value]
          }
        }
      - |-
        class Base {
          protected v: [check_type] = [base_value]
        }
        class A extends Base {
          field: [check_type]
          constructor () {
            super()
            this.field = this.v
          }
        }
      - |-
        class A {
          protected _field: [check_type]
          get field(): [check_type] {
            return this._field
          }
          set field(a: [check_type]) {
            this._field = a
          }
          constructor () {
            this._field = [base_value]
          }
        }
      - |-
        class Base {
          private _v: [check_type] = [base_value]
          get v(): [check_type] {
            return this._v
          }
        }
        class A extends Base {
          field: [check_type]
          constructor () {
            super()
            this.field = super.v
          }
        }
      - |-
        class A {
          private _field: [check_type]
          get field(): [check_type] {
            return this._field
          }
          set field(a: [check_type]) {
            this._field = a
          }
          constructor () {
            this._field = [base_value]
          }
        }
      - |-
        class A {
          private _field: [check_type]
          get field(): [check_type] {
            return this._field
          }
          set field(a: [check_type]) {
            this._field = a
          }
          constructor (arg: [check_type] = [base_value]) {
            this._field = arg
          }
        }
      - |-
        class A {
          private _field: [check_type]
          get field(): [check_type] {
            return this._field
          }
          set field(a: [check_type]) {
            this._field = a
          }
          constructor (...args: Any[]) {
            this._field = [base_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.field = [new_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])

  - desc: |-
      Checking for initialization from constructor.
    check_variants:
      - {check_type: "C", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        new_obj_lit: "{data: 5}", new_value: "5",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field: [check_type]
          constructor () {
            this.field = [base_obj_lit]
          }
        }
      - |-
        [cv_decl_data]
        class A {
          field: [check_type]
          constructor (arg: [check_type] = [base_obj_lit]) {
            this.field = arg
          }
        }
      - |-
        [cv_decl_data]
        class A {
          field: [check_type]
          constructor (...args: Any[]) {
            this.field = [base_obj_lit]
          }
        }
      - |-
        [cv_decl_data]
        class Base {
          protected v: [check_type] = [base_obj_lit]
        }
        class A extends Base {
          field: [check_type]
          constructor () {
            super()
            this.field = this.v
          }
        }
      - |-
        [cv_decl_data]
        class A {
          protected _field: [check_type]
          get field(): [check_type] {
            return this._field
          }
          set field(a: [check_type]) {
            this._field = a
          }
          constructor () {
            this._field = [base_obj_lit]
          }
        }
      - |-
        [cv_decl_data]
        class Base {
          private _v: [check_type] = [base_obj_lit]
          get v(): [check_type] {
            return this._v
          }
        }
        class A extends Base {
          field: [check_type]
          constructor () {
            super()
            this.field = super.v
          }
        }
      - |-
        [cv_decl_data]
        class A {
          private _field: [check_type]
          get field(): [check_type] {
            return this._field
          }
          set field(a: [check_type]) {
            this._field = a
          }
          constructor () {
            this._field = [base_obj_lit]
          }
        }
      - |-
        [cv_decl_data]
        class A {
          private _field: [check_type]
          get field(): [check_type] {
            return this._field
          }
          set field(a: [check_type]) {
            this._field = a
          }
          constructor (arg: [check_type] = [base_obj_lit]) {
            this._field = arg
          }
        }
      - |-
        [cv_decl_data]
        class A {
          private _field: [check_type]
          get field(): [check_type] {
            return this._field
          }
          set field(a: [check_type]) {
            this._field = a
          }
          constructor (...args: Any[]) {
            this._field = [base_obj_lit]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [base_value])
        a.field = [new_obj_lit]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [new_value])

  - desc: |-
      Checking for initialization from constructor.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object | undefined",
        base_value: "undefined", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        class Base {
          protected _field: [check_type]
          get field(): [check_type] {
            return this._field
          }
          set field(a: [check_type]) {
            this._field = a
          }
        }
        class A extends Base {
          constructor () {
            super()
            this._field = [base_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.field = [new_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])

  - desc: |-
      >-
        Checking for initialization from constructor
        with subtype usage.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined",
        base_value: "undefined", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        class Base {
          protected _field: [check_type]
          get field(): [check_type] {
            return this._field
          }
          set field(a: [check_type]) {
            this._field = a
          }
          constructor () {
            this._field = [base_value]
          }
        }
        class A extends Base {
          constructor () {
            super()
            this._field = [new_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        let b: Base = new Base()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])
        arktest.assertTrue(b.field instanceof [check_type])
        arktest.assertEQ(b.field, [base_value])
        a.field = [base_value]
        b.field = [new_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        arktest.assertTrue(b.field instanceof [check_type])
        arktest.assertEQ(b.field, [new_value])

  - desc: |-
      >-
        Checking for initialization from constructor
        with subtype usage.
    check_variants:
      - {check_type: "C", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        new_obj_lit: "{data: 5}", new_value: "5",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class Base {
          protected _field: [check_type]
          get field(): [check_type] {
            return this._field
          }
          set field(a: [check_type]) {
            this._field = a
          }
          constructor () {
            this._field = [base_obj_lit]
          }
        }
        class A extends Base {
          constructor () {
            super()
            this._field = [new_obj_lit]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        let b: Base = new Base()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [new_value])
        arktest.assertTrue(b.field instanceof [check_type])
        arktest.assertTrue(b.field.data instanceof [data_type])
        arktest.assertEQ(b.field.data, [base_value])
        a.field = [base_obj_lit]
        b.field = [new_obj_lit]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [base_value])
        arktest.assertTrue(b.field instanceof [check_type])
        arktest.assertTrue(b.field.data instanceof [data_type])
        arktest.assertEQ(b.field.data, [new_value])

  - desc: |-
      Checking for initialization from constructor.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined",
        base_value: "undefined", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        class A {
          field: [check_type] = [base_value]
          constructor (v: [check_type] = [base_value]) {
            if (v == [new_value]) {
              this.field = v
            }
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        let b: A = new A([new_value])
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        arktest.assertTrue(b.field instanceof [check_type])
        arktest.assertEQ(b.field, [new_value])
        a.field = [new_value]
        b.field = [base_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])
        arktest.assertTrue(b.field instanceof [check_type])
        arktest.assertEQ(b.field, [base_value])

  - desc: |-
      Checking for initialization from constructor.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined",
        base_value: "undefined", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        class A {
          field: [check_type] = [base_value]
          constructor () {
            this.field = [new_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])
        a.field = [base_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])

  - desc: |-
      Checking for initialization from constructor.
    check_variants:
      - {check_type: "C", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        new_obj_lit: "{data: 5}", new_value: "5",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field: [check_type] = [base_obj_lit]
          constructor () {
            this.field = [new_obj_lit]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [new_value])
        a.field = [base_obj_lit]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [base_value])

  - desc: |-
      Checking for initialization from object literal.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object | undefined",
        base_value: "undefined", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        class A {
          field: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = {field: [base_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.field = [new_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])

  - desc: |-
      Checking for initialization from object literal.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined",
        base_value: "undefined", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        class A {
          field: [check_type] = [base_value]
        }
    sub_cases_logic:
      - |-
        let a: A = {field: [new_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])
        a.field = [base_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])

  - desc: |-
      Checking for initialization from object literal.
    check_variants:
      - {check_type: "C", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        new_obj_lit: "{data: 5}", new_value: "5",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field: [check_type] = [base_obj_lit]
        }
    sub_cases_logic:
      - |-
        let a: A = {field: [new_obj_lit]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [new_value])
        a.field = [base_obj_lit]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [base_value])

  - desc: |-
      Checking for initialization from object literal.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined",
        base_value: "undefined", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        class A {
          field: [check_type] = [base_value]
          constructor () {
            this.field = [base_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = {field: [new_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])
        a.field = [base_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])

  - desc: |-
      Checking for initialization from object literal.
    check_variants:
      - {check_type: "C", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        new_obj_lit: "{data: 5}", new_value: "5",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field: [check_type] = [base_obj_lit]
          constructor () {
            this.field = [base_obj_lit]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = {field: [new_obj_lit]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [new_value])
        a.field = [base_obj_lit]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [base_value])

  - desc: |-
      >-
        Checking for initialization with different
        covariant subtype values usage.
    check_variants:
      - {check_type: "Animal", check_value: "\"\""}
      - {check_type: "Dog", check_value: "\"dog\""}
      - {check_type: "Cat", check_value: "\"cat\""}
    decl_variants:
      - |-
        class Animal {
          name: string = ""
        }
        class Dog extends Animal {
          constructor () {
            super()
            this.name = "dog"
          }
        }
        class Cat extends Animal {
          constructor () {
            super()
            this.name = "cat"
          }
        }
        class C {
          field: Animal = new [check_type]
        }
      - |-
        class Animal {
          name: string = ""
        }
        class Dog extends Animal {
          constructor () {
            super()
            this.name = "dog"
          }
        }
        class Cat extends Animal {
          constructor () {
            super()
            this.name = "cat"
          }
        }
        class C {
          field: Animal
          constructor() {
             this.field = new [check_type]
          }
        }
    sub_cases_logic:
      - |-
        let a: C = new C()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field.name, [check_value])

  - desc: |-
      >-
        Checking for initialization with different
        covariant function subtype values usage.
    check_variants:
      - {check_type: "HandlerNothing", init_value: "handlerNothing",
        check_value: "-567"}
      - {check_type: "HandlerA", init_value: "handlerA",
        check_value: "13"}
      - {check_type: "HandlerAInt", init_value: "handlerAInt",
        check_value: "-20"}
    decl_variants:
      - |-
        class A {
          v: int
          constructor(v: int = 0) {
            this.v = v
          }
        }
        class B extends A {
          constructor(v: int = 0) {
            super(-v)
          }
          field(): int {
            return 13
          }
        }
        type HandlerBInt = (a: B, b: int) => A
        type HandlerAInt = (a: A, b: int) => B
        const handlerAInt: HandlerAInt = (a: A, b: int): B => {
          if (a instanceof B){
            return new B(a.field() + b)
          } else {
            return new B(b)
          }
        }
        type HandlerA = (a: A) => A
        const handlerA: HandlerA = (a: A): A => {
          if (a instanceof B){
            return new A(a.field())
          } else {
            return new A
          }
        }
        type HandlerNothing = () => B
        const handlerNothing: HandlerNothing = (): B => {
          return new B(567)
        }
        class C {
          field: HandlerBInt = [init_value]
        }
      - |-
        class A {
          v: int
          constructor(v: int = 0) {
            this.v = v
          }
        }
        class B extends A {
          constructor(v: int = 0) {
            super(-v)
          }
          field(): int {
            return 13
          }
        }
        type HandlerBInt = (a: B, b: int) => A
        type HandlerAInt = (a: A, b: int) => B
        const handlerAInt: HandlerAInt = (a: A, b: int): B => {
          if (a instanceof B){
            return new B(a.field() + b)
          } else {
            return new B(b)
          }
        }
        type HandlerA = (a: A) => A
        const handlerA: HandlerA = (a: A): A => {
          if (a instanceof B){
            return new A(a.field())
          } else {
            return new A
          }
        }
        type HandlerNothing = () => B
        const handlerNothing: HandlerNothing = (): B => {
          return new B(567)
        }
        class C {
          field: HandlerBInt
          constructor() {
             this.field = [init_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: C = new C()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field(new B, 7).v, [check_value])

  - desc: |-
      Checking for initialization field in generic class.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined",
        base_value: "undefined", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        class A<T> {
          field: T
          constructor(a: T) {
             this.field = a
          }
        }
    sub_cases_logic:
      - |-
        let a: A<[check_type]> = new A<[check_type]>([base_value])
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.field = [new_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])

  - desc: |-
      >-
        The assignment is performed each time an
        instance of the class is created.
    check_variants:
      - {check_type: "long", value_type: "long",
        init_value: "5", add_value: "1"}
      - {check_type: "int", value_type: "int",
        init_value: "5", add_value: "1"}
      - {check_type: "byte", value_type: "byte",
        init_value: "5", add_value: "1"}
      - {check_type: "short", value_type: "short",
        init_value: "5", add_value: "1"}
      - {check_type: "double", value_type: "double",
        init_value: "5", add_value: "1"}
      - {check_type: "number", value_type: "number",
        init_value: "5", add_value: "1"}
      - {check_type: "float", value_type: "float",
        init_value: "5.0f", add_value: "1.0f"}
      - {check_type: "bigint", value_type: "bigint",
        init_value: "5n", add_value: "1n"}
      - {check_type: "string", value_type: "string",
        init_value: "\"v\"", add_value: "\"n\""}
      - {check_type: "Object", value_type: "int",
        init_value: "5", add_value: "1"}
      - {check_type: "Object | null", value_type: "int",
        init_value: "5", add_value: "1"}
      - {check_type: "Object | undefined", value_type: "int",
        init_value: "5", add_value: "1"}
      - {check_type: "Object | undefined | null", value_type: "int",
        init_value: "5", add_value: "1"}
      - {check_type: "Any", value_type: "int",
        init_value: "5", add_value: "1"}
    decl_variants:
      - |-
        let v: [value_type] = [init_value]
        function foo(): [value_type] {
          let res = v
          v += [add_value]
          return res
        }
        class A {
          field: [check_type] = foo()
        }
      - |-
        let v: [value_type] = [init_value]
        function foo(): [value_type] {
          let res = v
          v += [add_value]
          return res
        }
        class A {
          field: [check_type]
          constructor () {
            this.field = foo()
          }
        }
      - |-
        let v: [value_type] = [init_value]
        function foo(): [value_type] {
          let res = v
          v += [add_value]
          return res
        }
        class A {
          field: [check_type] = [init_value]
          constructor () {
            this.field = foo()
          }
        }
    sub_cases_logic:
      - |-
        let val: [value_type] = [init_value]
        for (let i = 0; i < 5; i++) {
          let a: A = new A()
          arktest.assertTrue(a.field instanceof [check_type])
          arktest.assertTrue(a.field instanceof [value_type])
          arktest.assertEQ(a.field, val)
          val += [add_value]
        }
        v = [init_value]

  - desc: |-
      Checking for initialization from constructor with namespace usage.
    check_variants:
      - {check_type: "long",
        base_value: "4", new_value: "5"}
      - {check_type: "int",
        base_value: "4", new_value: "5"}
      - {check_type: "byte",
        base_value: "4", new_value: "5"}
      - {check_type: "short",
        base_value: "4", new_value: "5"}
      - {check_type: "double",
        base_value: "4", new_value: "7.3"}
      - {check_type: "number",
        base_value: "4", new_value: "5"}
      - {check_type: "float",
        base_value: "4.5f", new_value: "7.3f"}
      - {check_type: "bigint",
        base_value: "4n", new_value: "5n"}
      - {check_type: "string",
        base_value: "\"abc\"", new_value: "\"efg\""}
      - {check_type: "char",
        base_value: "c'a'", new_value: "c'b'"}
      - {check_type: "boolean",
        base_value: "false", new_value: "true"}
      - {check_type: "Object",
        base_value: "4", new_value: "5"}
      - {check_type: "Object | undefined | null",
        base_value: "4", new_value: "5"}
      - {check_type: "Any",
        base_value: "4", new_value: "5"}
    decl_variants:
      - |-
        namespace ns {
          export class A {
            field: [check_type]
            constructor () {
              this.field = [base_value]
            }
          }
        }
      - |-
        namespace ns {
          export class A {
            field: [check_type]
            constructor (arg: [check_type] = [base_value]) {
              this.field = arg
            }
          }
        }
      - |-
        namespace ns {
          export class A {
            field: [check_type]
            constructor (...args: Any[]) {
              this.field = [base_value]
            }
          }
        }
      - |-
        namespace ns {
          export class Base {
            protected v: [check_type] = [base_value]
          }
          export class A extends Base {
            field: [check_type]
            constructor () {
              super()
              this.field = this.v
            }
          }
        }
      - |-
        namespace ns {
          export class A {
            protected _field: [check_type]
            get field(): [check_type] {
              return this._field
            }
            set field(a: [check_type]) {
              this._field = a
            }
            constructor () {
              this._field = [base_value]
            }
          }
        }
      - |-
        namespace ns {
          export class Base {
            private _v: [check_type] = [base_value]
            get v(): [check_type] {
              return this._v
            }
          }
          export class A extends Base {
            field: [check_type]
            constructor () {
              super()
              this.field = super.v
            }
          }
        }
      - |-
        namespace ns {
          export class A {
            private _field: [check_type]
            get field(): [check_type] {
              return this._field
            }
            set field(a: [check_type]) {
              this._field = a
            }
            constructor () {
              this._field = [base_value]
            }
          }
        }
      - |-
        namespace ns {
          export class A {
            private _field: [check_type]
            get field(): [check_type] {
              return this._field
            }
            set field(a: [check_type]) {
              this._field = a
            }
            constructor (arg: [check_type] = [base_value]) {
              this._field = arg
            }
          }
        }
      - |-
        namespace ns {
          export class A {
            private _field: [check_type]
            get field(): [check_type] {
              return this._field
            }
            set field(a: [check_type]) {
              this._field = a
            }
            constructor (...args: Any[]) {
              this._field = [base_value]
            }
          }
        }
    sub_cases_logic:
      - |-
        let a: ns.A = new ns.A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.field = [new_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [new_value])
