# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Checking for initialization public static readonly optional field
        with explicit type with default values.
    check_variants:
      - {type: "int", check_type: "int | undefined",
        base_value: "undefined"}
      - {type: "long", check_type: "long | undefined",
        base_value: "undefined"}
      - {type: "byte", check_type: "byte | undefined",
        base_value: "undefined"}
      - {type: "short", check_type: "short | undefined",
        base_value: "undefined"}
      - {type: "double", check_type: "double | undefined",
        base_value: "undefined"}
      - {type: "number", check_type: "number | undefined",
        base_value: "undefined"}
      - {type: "float", check_type: "float | undefined",
        base_value: "undefined"}
      - {type: "bigint", check_type: "bigint | undefined",
        base_value: "undefined"}
      - {type: "string", check_type: "string | undefined",
        base_value: "undefined"}
      - {type: "char", check_type: "char | undefined",
        base_value: "undefined"}
      - {type: "boolean", check_type: "boolean | undefined",
        base_value: "undefined"}
      - {type: "Object", check_type: "Object | undefined",
        base_value: "undefined"}
      - {type: "Object | undefined",
        check_type: "Object | undefined",
        base_value: "undefined"}
      - {type: "Object | undefined | null",
        check_type: "Object | undefined | null",
        base_value: "undefined"}
      - {type: "Any", check_type: "Any | undefined",
        base_value: "undefined"}
    decl_variants:
      - |-
        class A {
          static readonly field?: [type]
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertEQ(A.field, [base_value])

  - desc: |-
      >-
        Checking for initialization public static readonly optional field
        with explicit type with default values.
    check_variants:
      - {type: "C", check_type: "C | undefined",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          static readonly field?: [type]
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertEQ(A.field, undefined)

  - desc: |-
      >-
        Checking for initialization public static readonly optional field
        with explicit type with field initializer.
    check_variants:
      - {type: "int", check_type: "int | undefined",
        base_value: "4"}
      - {type: "long", check_type: "long | undefined",
        base_value: "4"}
      - {type: "byte", check_type: "byte | undefined",
        base_value: "4"}
      - {type: "short", check_type: "short | undefined",
        base_value: "4"}
      - {type: "double", check_type: "double | undefined",
        base_value: "4"}
      - {type: "number", check_type: "number | undefined",
        base_value: "4"}
      - {type: "float", check_type: "float | undefined",
        base_value: "4.5f"}
      - {type: "bigint", check_type: "bigint | undefined",
        base_value: "4n"}
      - {type: "string", check_type: "string | undefined",
        base_value: "\"abc\""}
      - {type: "char", check_type: "char | undefined",
        base_value: "c'a'"}
      - {type: "boolean", check_type: "boolean | undefined",
        base_value: "false"}
      - {type: "Object", check_type: "Object | undefined",
        base_value: "4"}
      - {type: "Object | undefined",
        check_type: "Object | undefined",
        base_value: "undefined"}
      - {type: "Object | undefined | null",
        check_type: "Object | undefined | null",
        base_value: "4"}
      - {type: "Any", check_type: "Any | undefined",
        base_value: "4"}
    decl_variants:
      - |-
        class A {
          static readonly field?: [check_type] = [base_value]
        }
      - |-
        function foo(): [check_type] {
          return [base_value]
        }
        class A {
          static readonly field?: [check_type] = foo()
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertEQ(A.field, [base_value])

  - desc: |-
      >-
        Checking for initialization public static readonly optional field
        with explicit type with field initializer.
    check_variants:
      - {type: "C", check_type: "C | undefined", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          static readonly field?: [type] = [base_obj_lit]
        }
      - |-
        [cv_decl_data]
        function foo(): [check_type] {
          return [base_obj_lit]
        }
        class A {
          static readonly field?: [type] = foo()
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertTrue(A.field!.data instanceof [data_type])
        arktest.assertEQ(A.field!.data, [base_value])

  - desc: |-
      >-
        Checking for initialization private static readonly optional field
        with explicit type with default values.
    check_variants:
      - {type: "int", check_type: "int | undefined",
        base_value: "undefined"}
      - {type: "long", check_type: "long | undefined",
        base_value: "undefined"}
      - {type: "byte", check_type: "byte | undefined",
        base_value: "undefined"}
      - {type: "short", check_type: "short | undefined",
        base_value: "undefined"}
      - {type: "double", check_type: "double | undefined",
        base_value: "undefined"}
      - {type: "number", check_type: "number | undefined",
        base_value: "undefined"}
      - {type: "float", check_type: "float | undefined",
        base_value: "undefined"}
      - {type: "bigint", check_type: "bigint | undefined",
        base_value: "undefined"}
      - {type: "string", check_type: "string | undefined",
        base_value: "undefined"}
      - {type: "char", check_type: "char | undefined",
        base_value: "undefined"}
      - {type: "boolean", check_type: "boolean | undefined",
        base_value: "undefined"}
      - {type: "Object", check_type: "Object | undefined",
        base_value: "undefined"}
      - {type: "Object | undefined",
        check_type: "Object | undefined",
        base_value: "undefined"}
      - {type: "Object | undefined | null",
        check_type: "Object | undefined | null",
        base_value: "undefined"}
      - {type: "Any", check_type: "Any | undefined",
        base_value: "undefined"}
    decl_variants:
      - |-
        class A {
          private static readonly _field?: [type]
          static get field(): [check_type] {
            return A._field
          }
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertEQ(A.field, [base_value])

  - desc: |-
      >-
        Checking for initialization private static readonly optional field
        with explicit type with default values.
    check_variants:
      - {type: "C", check_type: "C | undefined",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          private static readonly _field?: [type]
          static get field(): [check_type] {
            return A._field
          }
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertEQ(A.field, undefined)

  - desc: |-
      >-
        Checking for initialization private static readonly optional field
        with explicit type with field initializer.
    check_variants:
      - {type: "int", check_type: "int | undefined",
        base_value: "4"}
      - {type: "long", check_type: "long | undefined",
        base_value: "4"}
      - {type: "byte", check_type: "byte | undefined",
        base_value: "4"}
      - {type: "short", check_type: "short | undefined",
        base_value: "4"}
      - {type: "double", check_type: "double | undefined",
        base_value: "4"}
      - {type: "number", check_type: "number | undefined",
        base_value: "4"}
      - {type: "float", check_type: "float | undefined",
        base_value: "4.5f"}
      - {type: "bigint", check_type: "bigint | undefined",
        base_value: "4n"}
      - {type: "string", check_type: "string | undefined",
        base_value: "\"abc\""}
      - {type: "char", check_type: "char | undefined",
        base_value: "c'a'"}
      - {type: "boolean", check_type: "boolean | undefined",
        base_value: "false"}
      - {type: "Object", check_type: "Object | undefined",
        base_value: "4"}
      - {type: "Object | undefined", check_type: "Object | undefined",
        base_value: "undefined"}
      - {type: "Object | undefined | null",
        check_type: "Object | undefined | null",
        base_value: "4"}
      - {type: "Any", check_type: "Any | undefined",
        base_value: "4"}
    decl_variants:
      - |-
        class A {
          private static readonly _field?: [type] = [base_value]
          static get field(): [check_type] {
            return A._field
          }
        }
      - |-
        function foo(): [check_type] {
          return [base_value]
        }
        class A {
          private static readonly _field?: [type] = foo()
          static get field(): [check_type] {
            return A._field
          }
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertEQ(A.field, [base_value])

  - desc: |-
      >-
        Checking for initialization private static readonly optional field
        with explicit type with field initializer.
    check_variants:
      - {type: "C", check_type: "C | undefined", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          private static readonly _field?: [type] = [base_obj_lit]
          static get field(): [check_type] {
            return A._field
          }
        }
      - |-
        [cv_decl_data]
        function foo(): [check_type] {
          return [base_obj_lit]
        }
        class A {
          private static readonly _field?: [type] = foo()
          static get field(): [check_type] {
            return A._field
          }
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertTrue(A.field!.data instanceof [data_type])
        arktest.assertEQ(A.field!.data, [base_value])

  - desc: |-
      >-
        Checking for initialization protected static readonly optional field
        with explicit type with default values.
    check_variants:
      - {type: "int", check_type: "int | undefined",
        base_value: "undefined"}
      - {type: "long", check_type: "long | undefined",
        base_value: "undefined"}
      - {type: "byte", check_type: "byte | undefined",
        base_value: "undefined"}
      - {type: "short", check_type: "short | undefined",
        base_value: "undefined"}
      - {type: "double", check_type: "double | undefined",
        base_value: "undefined"}
      - {type: "number", check_type: "number | undefined",
        base_value: "undefined"}
      - {type: "float", check_type: "float | undefined",
        base_value: "undefined"}
      - {type: "bigint", check_type: "bigint | undefined",
        base_value: "undefined"}
      - {type: "string", check_type: "string | undefined",
        base_value: "undefined"}
      - {type: "char", check_type: "char | undefined",
        base_value: "undefined"}
      - {type: "boolean", check_type: "boolean | undefined",
        base_value: "undefined"}
      - {type: "Object", check_type: "Object | undefined",
        base_value: "undefined"}
      - {type: "Object | undefined",
        check_type: "Object | undefined",
        base_value: "undefined"}
      - {type: "Object | undefined | null",
        check_type: "Object | undefined | null",
        base_value: "undefined"}
      - {type: "Any", check_type: "Any | undefined",
        base_value: "undefined"}
    decl_variants:
      - |-
        class B {
          protected static readonly _field?: [type]
        }
        class A extends B {
          static get field(): [check_type] {
            return A._field
          }
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertEQ(A.field, [base_value])

  - desc: |-
      >-
        Checking for initialization protected static readonly optional field
        with explicit type with default values.
    check_variants:
      - {type: "C", check_type: "C | undefined",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class B {
          protected static readonly _field?: [type]
        }
        class A extends B {
          static get field(): [check_type] {
            return A._field
          }
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertEQ(A.field, undefined)

  - desc: |-
      >-
        Checking for initialization protected static readonly optional field
        with explicit type with field initializer.
    check_variants:
      - {type: "int", check_type: "int | undefined",
        base_value: "4"}
      - {type: "long", check_type: "long | undefined",
        base_value: "4"}
      - {type: "byte", check_type: "byte | undefined",
        base_value: "4"}
      - {type: "short", check_type: "short | undefined",
        base_value: "4"}
      - {type: "double", check_type: "double | undefined",
        base_value: "4"}
      - {type: "number", check_type: "number | undefined",
        base_value: "4"}
      - {type: "float", check_type: "float | undefined",
        base_value: "4.5f"}
      - {type: "bigint", check_type: "bigint | undefined",
        base_value: "4n"}
      - {type: "string", check_type: "string | undefined",
        base_value: "\"abc\""}
      - {type: "char", check_type: "char | undefined",
        base_value: "c'a'"}
      - {type: "boolean", check_type: "boolean | undefined",
        base_value: "false"}
      - {type: "Object", check_type: "Object | undefined",
        base_value: "4"}
      - {type: "Object | undefined", check_type: "Object | undefined",
        base_value: "undefined"}
      - {type: "Object | undefined | null",
        check_type: "Object | undefined | null",
        base_value: "4"}
      - {type: "Any", check_type: "Any | undefined",
        base_value: "4"}
    decl_variants:
      - |-
        class B {
          protected static readonly _field?: [type] = [base_value]
        }
        class A extends B {
          static get field(): [check_type] {
            return A._field
          }
        }
      - |-
        function foo(): [check_type] {
          return [base_value]
        }
        class B {
          protected static readonly _field?: [type] = foo()
        }
        class A extends B {
          static get field(): [check_type] {
            return A._field
          }
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertEQ(A.field, [base_value])

  - desc: |-
      >-
        Checking for initialization protected static readonly optional field
        with explicit type with field initializer.
    check_variants:
      - {type: "C", check_type: "C | undefined", data_type: "int",
        base_obj_lit: "{data: 4}", base_value: "4",
        cv_decl_data: "class C {data: int = 0}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class B {
          protected static readonly _field?: [type] = [base_obj_lit]
        }
        class A extends B {
          static get field(): [check_type] {
            return A._field
          }
        }
      - |-
        [cv_decl_data]
        function foo(): [check_type] {
          return [base_obj_lit]
        }
        class B {
          protected static readonly _field?: [type] = foo()
        }
        class A extends B {
          static get field(): [check_type] {
            return A._field
          }
        }
    sub_cases_logic:
      - |-
        arktest.assertTrue(A.field instanceof [check_type])
        arktest.assertTrue(A.field!.data instanceof [data_type])
        arktest.assertEQ(A.field!.data, [base_value])
