# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Field with late initialization must be an instance field.
        If it is defined as static, then a compile-time error occurs.
    check_variants:
      - {modifiers: "static", check_type: "long", check_value: "0", cv_decl_data: ""}
      - {modifiers: "static", check_type: "int", check_value: "0", cv_decl_data: ""}
      - {modifiers: "static", check_type: "byte", check_value: "0", cv_decl_data: ""}
      - {modifiers: "static", check_type: "short", check_value: "0", cv_decl_data: ""}
      - {modifiers: "static", check_type: "double", check_value: "0", cv_decl_data: ""}
      - {modifiers: "static", check_type: "number", check_value: "0", cv_decl_data: ""}
      - {modifiers: "static", check_type: "float", check_value: "0.0f", cv_decl_data: ""}
      - {modifiers: "static", check_type: "bigint", check_value: "0n", cv_decl_data: ""}
      - {modifiers: "static", check_type: "string", check_value: "\"abc\"", cv_decl_data: ""}
      - {modifiers: "static", check_type: "char", check_value: "c'\\u0000'", cv_decl_data: ""}
      - {modifiers: "static", check_type: "boolean", check_value: "false", cv_decl_data: ""}
      - {modifiers: "static", check_type: "Object", check_value: "0", cv_decl_data: ""}
      - {modifiers: "static", check_type: "C", check_value: "new C()", cv_decl_data: "class C {}"}
      - {modifiers: "private static", check_type: "int", check_value: "0", cv_decl_data: ""}
      - {modifiers: "protected static", check_type: "int", check_value: "0", cv_decl_data: ""}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          [modifiers] field!: [check_type]
        }
      - |-
        [cv_decl_data]
        class A {
          [modifiers] field!: [check_type] = [check_value]
        }
      - |-
        [cv_decl_data]
        class A {
          [modifiers] field!: [check_type]
          static {
            A.field = [check_value]
          }
        }

  - desc: |-
      Field with late initialization cannot be of a nullish type
    check_variants:
      - {check_type: "Any", check_value: "undefined", cv_decl_data: ""}
      - {check_type: "long | null", check_value: "null", cv_decl_data: ""}
      - {check_type: "long | undefined", check_value: "undefined", cv_decl_data: ""}
      - {check_type: "long | undefined | null", check_value: "0", cv_decl_data: ""}
      - {check_type: "int | null", check_value: "null", cv_decl_data: ""}
      - {check_type: "int | undefined", check_value: "undefined", cv_decl_data: ""}
      - {check_type: "int | undefined | null", check_value: "0", cv_decl_data: ""}
      - {check_type: "double | null", check_value: "null", cv_decl_data: ""}
      - {check_type: "double | undefined", check_value: "undefined", cv_decl_data: ""}
      - {check_type: "double | undefined | null", check_value: "0", cv_decl_data: ""}
      - {check_type: "string | null", check_value: "null", cv_decl_data: ""}
      - {check_type: "string | undefined", check_value: "undefined", cv_decl_data: ""}
      - {check_type: "string | undefined | null", check_value: "\"abc\"", cv_decl_data: ""}
      - {check_type: "Object | null", check_value: "null", cv_decl_data: ""}
      - {check_type: "Object | undefined", check_value: "undefined", cv_decl_data: ""}
      - {check_type: "Object | undefined | null", check_value: "0", cv_decl_data: ""}
      - {check_type: "C | null", check_value: "null", cv_decl_data: "class C {}"}
      - {check_type: "C | undefined", check_value: "undefined", cv_decl_data: "class C {}"}
      - {check_type: "C | undefined | null", check_value: "new C()", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
        }
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type] = [check_value]
        }
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          constructor () {
            this.field = [check_value]
          }
        }

  - desc: |-
      Field with late initialization cannot be an optional field
    check_variants:
      - {check_type: "long", check_value: "0", cv_decl_data: ""}
      - {check_type: "int", check_value: "0", cv_decl_data: ""}
      - {check_type: "byte", check_value: "0", cv_decl_data: ""}
      - {check_type: "short", check_value: "0", cv_decl_data: ""}
      - {check_type: "double", check_value: "0", cv_decl_data: ""}
      - {check_type: "number", check_value: "0", cv_decl_data: ""}
      - {check_type: "float", check_value: "0.0f", cv_decl_data: ""}
      - {check_type: "bigint", check_value: "0n", cv_decl_data: ""}
      - {check_type: "string", check_value: "\"abc\"", cv_decl_data: ""}
      - {check_type: "char", check_value: "c'\\u0000'", cv_decl_data: ""}
      - {check_type: "boolean", check_value: "false", cv_decl_data: ""}
      - {check_type: "Object", check_value: "0", cv_decl_data: ""}
      - {check_type: "C", check_value: "new C()", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!?: [check_type]
        }
      - |-
        [cv_decl_data]
        class A {
          field!?: [check_type] = [check_value]
        }
      - |-
        [cv_decl_data]
        class A {
          field!?: [check_type]
          constructor () {
            this.field = [check_value]
          }
        }
      - |-
        [cv_decl_data]
        class A {
          field?!: [check_type]
        }
      - |-
        [cv_decl_data]
        class A {
          field?!: [check_type] = [check_value]
        }
      - |-
        [cv_decl_data]
        class A {
          field?!: [check_type]
          constructor () {
            this.field = [check_value]
          }
        }

  - desc: |-
      Field with late initialization cannot have field initializers
    check_variants:
      - {check_type: "long", check_value: "0", cv_decl_data: ""}
      - {check_type: "int", check_value: "0", cv_decl_data: ""}
      - {check_type: "byte", check_value: "0", cv_decl_data: ""}
      - {check_type: "short", check_value: "0", cv_decl_data: ""}
      - {check_type: "double", check_value: "0", cv_decl_data: ""}
      - {check_type: "number", check_value: "0", cv_decl_data: ""}
      - {check_type: "float", check_value: "0.0f", cv_decl_data: ""}
      - {check_type: "bigint", check_value: "0n", cv_decl_data: ""}
      - {check_type: "string", check_value: "\"abc\"", cv_decl_data: ""}
      - {check_type: "char", check_value: "c'\\u0000'", cv_decl_data: ""}
      - {check_type: "boolean", check_value: "false", cv_decl_data: ""}
      - {check_type: "Object", check_value: "0", cv_decl_data: ""}
      - {check_type: "C", check_value: "new C()", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type] = [check_value]
        }
      - |-
        [cv_decl_data]
        class A {
          v: [check_type] = [check_value]
          field!: [check_type] = this.v
        }
      - |-
        [cv_decl_data]
        class A {
          private _v: [check_type] = [check_value]
          public get v(): [check_type] {
            return this._v
          }
        }
        class B extends A {
          field!: [check_type] = super.v
        }
      - |-
        [cv_decl_data]
        function foo(): [check_type] {
          return [check_value]
        }
        class A {
          field!: [check_type] = foo()
        }

  - desc: |-
      >-
        Checking for initialization from outside of constructor
        with different not covariant subtype values usage
    check_variants:
      - {check_value_type: "Cat"}
      - {check_value_type: "Animal"}
    decl_variants:
      - |-
        class Animal {}
        class Dog extends Animal {}
        class Cat extends Animal {}
        class C {
          field!: Dog
        }
    logic: |-
      let a: C = new C
      a.field = new [check_value_type]

  - desc: |-
      >-
        Checking for initialization from outside of constructor
        with different not covariant function subtype values usage
    check_variants:
      - {check_value: "handlerCInt"}
      - {check_value: "handlerBInt"}
      - {check_value: "handlerB"}
      - {check_value: "handlerBIntInt"}
      - {check_value: "handlerNothing"}
    decl_variants:
      - |-
        class A {}
        class B extends A {}
        class C extends A {}
        type HandlerReq = (a: B, b: int) => B
        const handlerReq: HandlerReq = (a: B, b: int): B => {
          return new B
        }
        type HandlerCInt = (a: C, b: int) => B
        const handlerCInt: HandlerCInt = (a: C, b: int): B => {
          return new B
        }
        type HandlerBInt = (a: B, b: int) => A
        const handlerBInt: HandlerBInt = (a: B, b: int): A => {
          return new B
        }
        type HandlerB = (a: B) => A
        const handlerB: HandlerB = (a: B): A => {
          return new B
        }
        type HandlerBIntInt = (a: B, b: int, c: int) => B
        const handlerBIntInt: HandlerBIntInt = (a: B, b: int, c: int): B => {
          return new B
        }
        type HandlerNothing = () => C
        const handlerNothing: HandlerNothing = (): C => {
          return new C
        }
        class D {
          field!: HandlerReq
        }
    logic: |-
      let a: D = new D
      a.field = [check_value]

  - desc: |-
      Field with late initialization cannot be used in interface
    check_variants:
      - {check_type: "long", cv_decl_data: ""}
      - {check_type: "int", cv_decl_data: ""}
      - {check_type: "byte", cv_decl_data: ""}
      - {check_type: "short", cv_decl_data: ""}
      - {check_type: "double", cv_decl_data: ""}
      - {check_type: "number", cv_decl_data: ""}
      - {check_type: "float", cv_decl_data: ""}
      - {check_type: "bigint", cv_decl_data: ""}
      - {check_type: "string", cv_decl_data: ""}
      - {check_type: "char", cv_decl_data: ""}
      - {check_type: "boolean", cv_decl_data: ""}
      - {check_type: "Object", cv_decl_data: ""}
      - {check_type: "C", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        interface I {
          field!: [check_type]
        }

  - desc: |-
      >-
        The type of the overriding field is to be the same as that of the
        overridden field. Otherwise, a compile-time error occurs
    check_variants:
      - {base_type: "Object", override_type: "number",
        base_value: "0", override_value: "0"}
      - {base_type: "number", override_type: "Object",
        base_value: "0", override_value: "0"}
      - {base_type: "number", override_type: "int",
        base_value: "0", override_value: "0"}
      - {base_type: "int", override_type: "number",
        base_value: "0", override_value: "0"}
      - {base_type: "float", override_type: "int",
        base_value: "0", override_value: "0"}
      - {base_type: "int", override_type: "float",
        base_value: "0", override_value: "0"}
      - {base_type: "number", override_type: "bigint",
        base_value: "0", override_value: "0n"}
      - {base_type: "bigint", override_type: "number",
        base_value: "0n", override_value: "0"}
      - {base_type: "string", override_type: "char",
        base_value: "\"\"", override_value: "c'0'"}
      - {base_type: "char", override_type: "string",
        base_value: "c'0'", override_value: "\"\""}
    decl_variants:
      - |-
        class Base {
          field!: [base_type]
        }
        class A extends Base {
          override field: [override_type] = [override_value]
        }
      - |-
        class Base {
          field: [base_type] = [base_value]
        }
        class A extends Base {
          override field!: [override_type]
        }

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
    check_variants:
      - {check_type: "long", cv_decl_data: ""}
      - {check_type: "int", cv_decl_data: ""}
      - {check_type: "byte", cv_decl_data: ""}
      - {check_type: "short", cv_decl_data: ""}
      - {check_type: "double", cv_decl_data: ""}
      - {check_type: "number", cv_decl_data: ""}
      - {check_type: "float", cv_decl_data: ""}
      - {check_type: "char", cv_decl_data: ""}
      - {check_type: "boolean", cv_decl_data: ""}
      - {check_type: "bigint", cv_decl_data: ""}
      - {check_type: "string", cv_decl_data: ""}
      - {check_type: "Object", cv_decl_data: ""}
      - {check_type: "C", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          constructor () {
            let v: [check_type] = this.field
          }
        }
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          constructor (arg: [check_type]) {
            let v: [check_type] = this.field
          }
        }
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          constructor (...args: Any[]) {
            let v: [check_type] = this.field
          }
        }

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
    check_variants:
      - {check_type: "long", cv_decl_data: ""}
      - {check_type: "int", cv_decl_data: ""}
      - {check_type: "byte", cv_decl_data: ""}
      - {check_type: "short", cv_decl_data: ""}
      - {check_type: "double", cv_decl_data: ""}
      - {check_type: "number", cv_decl_data: ""}
      - {check_type: "float", cv_decl_data: ""}
      - {check_type: "bigint", cv_decl_data: ""}
      - {check_type: "string", cv_decl_data: ""}
      - {check_type: "char", cv_decl_data: ""}
      - {check_type: "boolean", cv_decl_data: ""}
      - {check_type: "Object", cv_decl_data: ""}
      - {check_type: "C", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: Promise<[check_type]>
          constructor() {
            await this.field
          }
        }

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
        A field with the modifier readonly is a readonly field.
        Changing the value of a readonly field after initialization is
        not allowed.
    check_variants:
      - {check_type: "long", check_value: "0", cv_decl_data: ""}
      - {check_type: "int", check_value: "0", cv_decl_data: ""}
      - {check_type: "byte", check_value: "0", cv_decl_data: ""}
      - {check_type: "short", check_value: "0", cv_decl_data: ""}
      - {check_type: "double", check_value: "0", cv_decl_data: ""}
      - {check_type: "number", check_value: "0", cv_decl_data: ""}
      - {check_type: "float", check_value: "0.0f", cv_decl_data: ""}
      - {check_type: "bigint", check_value: "0n", cv_decl_data: ""}
      - {check_type: "string", check_value: "\"abc\"", cv_decl_data: ""}
      - {check_type: "char", check_value: "c'\\u0000'", cv_decl_data: ""}
      - {check_type: "boolean", check_value: "false", cv_decl_data: ""}
      - {check_type: "Object", check_value: "0", cv_decl_data: ""}
      - {check_type: "C", check_value: "new C()", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          readonly field!: [check_type]
        }
    logic: |-
      let a: A = new A()
      a.field = [check_value]

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
        A field with the modifier readonly is a readonly field.
        Changing the value of a readonly field after initialization is
        not allowed.
    check_variants:
      - {check_type: "long", check_value: "0", cv_decl_data: ""}
      - {check_type: "int", check_value: "0", cv_decl_data: ""}
      - {check_type: "byte", check_value: "0", cv_decl_data: ""}
      - {check_type: "short", check_value: "0", cv_decl_data: ""}
      - {check_type: "double", check_value: "0", cv_decl_data: ""}
      - {check_type: "number", check_value: "0", cv_decl_data: ""}
      - {check_type: "float", check_value: "0.0f", cv_decl_data: ""}
      - {check_type: "bigint", check_value: "0n", cv_decl_data: ""}
      - {check_type: "string", check_value: "\"abc\"", cv_decl_data: ""}
      - {check_type: "char", check_value: "c'\\u0000'", cv_decl_data: ""}
      - {check_type: "boolean", check_value: "false", cv_decl_data: ""}
      - {check_type: "Object", check_value: "0", cv_decl_data: ""}
      - {check_type: "C", check_value: "new C()", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          readonly field!: [check_type]
        }
    logic: |-
      let a: A = new A()
      const lambda = () => {
        a.field = [check_value]
      }
      lambda()
