# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
    check_variants:
      - {check_type: "long", cv_decl_data: ""}
      - {check_type: "int", cv_decl_data: ""}
      - {check_type: "byte", cv_decl_data: ""}
      - {check_type: "short", cv_decl_data: ""}
      - {check_type: "double", cv_decl_data: ""}
      - {check_type: "number", cv_decl_data: ""}
      - {check_type: "float", cv_decl_data: ""}
      - {check_type: "bigint", cv_decl_data: ""}
      - {check_type: "string", cv_decl_data: ""}
      - {check_type: "char", cv_decl_data: ""}
      - {check_type: "boolean", cv_decl_data: ""}
      - {check_type: "Object", cv_decl_data: ""}
      - {check_type: "C", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          v: [check_type] = this.field
        }
      - |-
        [cv_decl_data]
        class Base {
          private _v!: [check_type]
          public get v(): [check_type] {
            return this._v
          }
        }
        class A extends Base {
          field: [check_type] = super.v
        }
    sub_cases_logic:
      - |-
        let expectedError = (e: Error): boolean => {
            return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          let a: A = new A()
        }, expectedError)

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
    check_variants:
      - {check_type: "long", cv_decl_data: ""}
      - {check_type: "int", cv_decl_data: ""}
      - {check_type: "byte", cv_decl_data: ""}
      - {check_type: "short", cv_decl_data: ""}
      - {check_type: "double", cv_decl_data: ""}
      - {check_type: "number", cv_decl_data: ""}
      - {check_type: "float", cv_decl_data: ""}
      - {check_type: "bigint", cv_decl_data: ""}
      - {check_type: "string", cv_decl_data: ""}
      - {check_type: "char", cv_decl_data: ""}
      - {check_type: "boolean", cv_decl_data: ""}
      - {check_type: "Object", cv_decl_data: ""}
      - {check_type: "C", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        let expectedError = (e: Error): boolean => {
            return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          arktest.assertTrue(a.field instanceof [check_type])
        }, expectedError)

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
    check_variants:
      - {check_type: "long", cv_decl_data: ""}
      - {check_type: "int", cv_decl_data: ""}
      - {check_type: "byte", cv_decl_data: ""}
      - {check_type: "short", cv_decl_data: ""}
      - {check_type: "double", cv_decl_data: ""}
      - {check_type: "number", cv_decl_data: ""}
      - {check_type: "float", cv_decl_data: ""}
      - {check_type: "bigint", cv_decl_data: ""}
      - {check_type: "string", cv_decl_data: ""}
      - {check_type: "char", cv_decl_data: ""}
      - {check_type: "boolean", cv_decl_data: ""}
      - {check_type: "Object", cv_decl_data: ""}
      - {check_type: "C", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        let expectedError = (e: Error): boolean => {
            return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          let v: [check_type] = a.field
        }, expectedError)
      - |-
        let a: A = new A()
        const lambda = () => a.field
        let expectedError = (e: Error): boolean => {
            return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          let v: [check_type] = lambda()
        }, expectedError)

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
    check_variants:
      - {check_type: "long", cv_decl_data: ""}
      - {check_type: "int", cv_decl_data: ""}
      - {check_type: "byte", cv_decl_data: ""}
      - {check_type: "short", cv_decl_data: ""}
      - {check_type: "double", cv_decl_data: ""}
      - {check_type: "number", cv_decl_data: ""}
      - {check_type: "float", cv_decl_data: ""}
      - {check_type: "bigint", cv_decl_data: ""}
      - {check_type: "string", cv_decl_data: ""}
      - {check_type: "char", cv_decl_data: ""}
      - {check_type: "boolean", cv_decl_data: ""}
      - {check_type: "Object", cv_decl_data: ""}
      - {check_type: "C", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
        }
        function foo(a: A): void {
          let v: [check_type] = a.field
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        let expectedError = (e: Error): boolean => {
            return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          foo(a)
        }, expectedError)

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
    check_variants:
      - {check_type: "long", cv_decl_data: ""}
      - {check_type: "int", cv_decl_data: ""}
      - {check_type: "byte", cv_decl_data: ""}
      - {check_type: "short", cv_decl_data: ""}
      - {check_type: "double", cv_decl_data: ""}
      - {check_type: "number", cv_decl_data: ""}
      - {check_type: "float", cv_decl_data: ""}
      - {check_type: "bigint", cv_decl_data: ""}
      - {check_type: "string", cv_decl_data: ""}
      - {check_type: "char", cv_decl_data: ""}
      - {check_type: "boolean", cv_decl_data: ""}
      - {check_type: "Object", cv_decl_data: ""}
      - {check_type: "C", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
        }
        function foo(fb: () => [check_type]): void {
          let v: [check_type] = fb()
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        const lambda = () => a.field
        let expectedError = (e: Error): boolean => {
            return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          foo(lambda)
        }, expectedError)

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
    check_variants:
      - {check_type: "long", cv_decl_data: ""}
      - {check_type: "int", cv_decl_data: ""}
      - {check_type: "byte", cv_decl_data: ""}
      - {check_type: "short", cv_decl_data: ""}
      - {check_type: "double", cv_decl_data: ""}
      - {check_type: "number", cv_decl_data: ""}
      - {check_type: "float", cv_decl_data: ""}
      - {check_type: "bigint", cv_decl_data: ""}
      - {check_type: "string", cv_decl_data: ""}
      - {check_type: "char", cv_decl_data: ""}
      - {check_type: "boolean", cv_decl_data: ""}
      - {check_type: "Object", cv_decl_data: ""}
      - {check_type: "C", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: Promise<[check_type]>
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        let expectedError = (e: Error): boolean => {
            return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          await a.field
        }, expectedError)

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
    check_variants:
      - {check_type: "long", cv_decl_data: ""}
      - {check_type: "int", cv_decl_data: ""}
      - {check_type: "byte", cv_decl_data: ""}
      - {check_type: "short", cv_decl_data: ""}
      - {check_type: "double", cv_decl_data: ""}
      - {check_type: "number", cv_decl_data: ""}
      - {check_type: "float", cv_decl_data: ""}
      - {check_type: "bigint", cv_decl_data: ""}
      - {check_type: "string", cv_decl_data: ""}
      - {check_type: "char", cv_decl_data: ""}
      - {check_type: "boolean", cv_decl_data: ""}
      - {check_type: "Object", cv_decl_data: ""}
      - {check_type: "C", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          async foo(): Promise<[check_type]> {
            return this.field
          }
        }
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          async foo(): Promise<[check_type]> {
            const result = await Promise.resolve(this.field)
            return result
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        let expectedError = (e: Error): boolean => {
            return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          await a.foo()
        }, expectedError)

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
    check_variants:
      - {check_type: "long", base_value: "0", cv_decl_data: ""}
      - {check_type: "int", base_value: "0", cv_decl_data: ""}
      - {check_type: "byte", base_value: "0", cv_decl_data: ""}
      - {check_type: "short", base_value: "0", cv_decl_data: ""}
      - {check_type: "double", base_value: "0", cv_decl_data: ""}
      - {check_type: "number", base_value: "0", cv_decl_data: ""}
      - {check_type: "float", base_value: "0.0f", cv_decl_data: ""}
      - {check_type: "bigint", base_value: "0n", cv_decl_data: ""}
      - {check_type: "string", base_value: "\"abc\"", cv_decl_data: ""}
      - {check_type: "char", base_value: "c'\\u0000'", cv_decl_data: ""}
      - {check_type: "boolean", base_value: "false", cv_decl_data: ""}
      - {check_type: "Object", base_value: "0", cv_decl_data: ""}
      - {check_type: "C", base_value: "new C()", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          res: boolean = false
          async foo(): Promise<[check_type]> {
            return new Promise<[check_type]> (
              (resolve: (p: [check_type]) => void) => {
                setTimeout(() => {
                  let expectedError = (e: Error): boolean => {
                    if (e instanceof Error){
                      this.res = true
                    }
                    return (e instanceof Error)
                  }
                  let v: [check_type] = [base_value]
                  arktest.expectThrow(() => {
                    v = this.field
                  }, expectedError)
                  resolve(v)
                }, 1)
              }
            )
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertFalse(a.res)
        await a.foo()
        arktest.assertTrue(a.res)

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
    check_variants:
      - {check_type: "long", cv_decl_data: ""}
      - {check_type: "int", cv_decl_data: ""}
      - {check_type: "byte", cv_decl_data: ""}
      - {check_type: "short", cv_decl_data: ""}
      - {check_type: "double", cv_decl_data: ""}
      - {check_type: "number", cv_decl_data: ""}
      - {check_type: "float", cv_decl_data: ""}
      - {check_type: "bigint", cv_decl_data: ""}
      - {check_type: "string", cv_decl_data: ""}
      - {check_type: "char", cv_decl_data: ""}
      - {check_type: "boolean", cv_decl_data: ""}
      - {check_type: "Object", cv_decl_data: ""}
      - {check_type: "C", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          async foo(): Promise<void> {
            return new Promise<void> (
              (resolve) => {
                setTimeout(() => {
                  resolve(undefined)
                }, 1)
              }
            )
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        let expectedError = (e: Error): boolean => {
            return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          await a.foo().then((): [check_type] => a.field)
        }, expectedError)

  - desc: |-
      >-
        As all other fields, a field with late initialization
        must be initialized before it is used for the first time.
        A field with the modifier readonly is a readonly field.
        Changing the value of a readonly field after initialization is
        not allowed.
    check_variants:
      - {check_type: "long", cv_decl_data: ""}
      - {check_type: "int", cv_decl_data: ""}
      - {check_type: "byte", cv_decl_data: ""}
      - {check_type: "short", cv_decl_data: ""}
      - {check_type: "double", cv_decl_data: ""}
      - {check_type: "number", cv_decl_data: ""}
      - {check_type: "float", cv_decl_data: ""}
      - {check_type: "bigint", cv_decl_data: ""}
      - {check_type: "string", cv_decl_data: ""}
      - {check_type: "char", cv_decl_data: ""}
      - {check_type: "boolean", cv_decl_data: ""}
      - {check_type: "Object", cv_decl_data: ""}
      - {check_type: "C", cv_decl_data: "class C {}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          readonly field!: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        let expectedError = (e: Error): boolean => {
            return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          let v: [check_type] = a.field
        }, expectedError)
      - |-
        let a: A = new A()
        const lambda = () => a.field
        let expectedError = (e: Error): boolean => {
            return (e instanceof Error)
        }
        arktest.expectThrow(() => {
          let v: [check_type] = lambda()
        }, expectedError)
