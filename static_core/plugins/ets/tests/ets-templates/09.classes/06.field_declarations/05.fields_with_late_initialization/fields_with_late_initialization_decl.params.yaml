# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      Checking for initialization from constructor.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        class A {
          field!: [check_type]
          constructor () {
            this.field = [check_value]
          }
        }
      - |-
        class A {
          field!: [check_type]
          constructor (arg: [check_type] = [check_value]) {
            this.field = arg
          }
        }
      - |-
        class A {
          field!: [check_type]
          constructor (...args: Any[]) {
            this.field = [check_value]
          }
        }
      - |-
        class Base {
          private _v!: [check_type]
          get v(): [check_type] {
            this._v = [check_value]
            return this._v
          }
        }
        class A extends Base {
          field: [check_type] = super.v
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking for initialization from constructor.
    check_variants:
      - {check_type: "C", data_type: "int", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class Base {
          private _v!: [check_type]
          get v(): [check_type] {
            this._v = [init_value]
            return this._v
          }
        }
        class A extends Base {
          field: [check_type] = super.v
        }
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          constructor () {
            this.field = [init_value]
          }
        }
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          constructor (arg: [check_type] = [init_value]) {
            this.field = arg
          }
        }
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          constructor (...args: Any[]) {
            this.field = [init_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      Checking for initialization from object literal.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        class A {
          field!: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = {field: [check_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking for initialization from object literal.
    check_variants:
      - {check_type: "C", data_type: "int", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = {field: [init_value]}
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      Checking for initialization from class method call.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        class A {
          field!: [check_type]
          foo(): void {
            this.field = [check_value]
          }
        }
      - |-
        class A {
          field!: [check_type]
          foo: () => void = (): void => {
            this.field = [check_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.foo()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking for initialization from class method call.
    check_variants:
      - {check_type: "C", data_type: "int", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          foo(): void {
            this.field = [init_value]
          }
        }
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          foo: () => void = (): void => {
            this.field = [init_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.foo()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      Checking for initialization from outside of constructor.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        class A {
          field!: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.field = [check_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
      - |-
        let a: A = new A()
        const lambda = () => {
          a.field = [check_value]
        }
        lambda()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking for initialization from outside of constructor.
    check_variants:
      - {check_type: "C", data_type: "int", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.field = [init_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])
      - |-
        let a: A = new A()
        const lambda = () => {
          a.field = [init_value]
        }
        lambda()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      >-
        Checking for initialization from outside of constructor
        with different covariant subtype values usage.
    decl_variants:
      - |-
        class Animal {
          name: string = ""
        }
        class Dog extends Animal {
          constructor () {
            this.name = "dog"
          }
        }
        class Cat extends Animal {
          constructor () {
            this.name = "cat"
          }
        }
        class C {
          field!: Animal
        }
    sub_cases_logic:
      - |-
        let a: C = new C()
        let d: C = new C()
        let c: C = new C()
        a.field = new Animal()
        d.field = new Dog()
        c.field = new Cat()
        arktest.assertTrue(a.field instanceof Animal)
        arktest.assertEQ(a.field.name, "")
        arktest.assertTrue(d.field instanceof Dog)
        arktest.assertEQ(d.field.name, "dog")
        arktest.assertTrue(c.field instanceof Cat)
        arktest.assertEQ(c.field.name, "cat")

  - desc: |-
      >-
        Checking for initialization from outside of constructor
        with different covariant function subtype values usage.
    decl_variants:
      - |-
        class A {
          v: int
          constructor(v: int = 0) {
            this.v = v
          }
        }
        class B extends A {
          constructor(v: int = 0) {
            super(-v)
          }
          field(): int {
            return 13
          }
        }
        type HandlerBInt = (a: B, b: int) => A
        type HandlerAInt = (a: A, b: int) => B
        const handlerAInt: HandlerAInt = (a: A, b: int): B => {
          if (a instanceof B){
            return new B(a.field() + b)
          } else {
            return new B(b)
          }
        }
        type HandlerA = (a: A) => A
        const handlerA: HandlerA = (a: A): A => {
          if (a instanceof B){
            return new A(a.field())
          } else {
            return new A
          }
        }
        type HandlerNothing = () => B
        const handlerNothing: HandlerNothing = (): B => {
          return new B(567)
        }
        class C {
          field!: HandlerBInt
        }
    sub_cases_logic:
      - |-
        let a: C = new C()
        let b: C = new C()
        let c: C = new C()
        a.field = handlerNothing
        b.field = handlerA
        c.field = handlerAInt
        arktest.assertTrue(a.field instanceof HandlerNothing)
        arktest.assertEQ(a.field(new B, 7).v, -567)
        arktest.assertTrue(b.field instanceof HandlerA)
        arktest.assertEQ(b.field(new B, 7).v, 13)
        arktest.assertTrue(c.field instanceof HandlerAInt)
        arktest.assertEQ(c.field(new B, 7).v, -20)

  - desc: |-
      Checking for initialization from function call.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        class A {
          field!: [check_type]
        }
        function foo(a: A): void {
          a.field = [check_value]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        foo(a)
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking for initialization from function call.
    check_variants:
      - {check_type: "C", data_type: "int", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
        }
        function foo(a: A): void {
          a.field = [init_value]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        foo(a)
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      >-
        Checking for initialization from function call
        with object captured by lambda.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        class A {
          field!: [check_type]
        }
        function foo(fb: () => void): void {
          fb()
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        const lambda = () => {
          a.field = [check_value]
        }
        foo(lambda)
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      >-
        Checking for initialization from function call
        with object captured by lambda.
    check_variants:
      - {check_type: "C", data_type: "int", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
        }
        function foo(fb: () => void): void {
          fb()
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        const lambda = () => {
          a.field = [init_value]
        }
        foo(lambda)
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      Checking for initialization with asynchronous API usage.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        class A {
          field: Promise<[check_type]>
          async foo(): Promise<[check_type]> {
            let v: [check_type] = [check_value]
            return v
          }
          constructor() {
            this.field = this.foo()
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof Promise)
        let res = await a.field
        arktest.assertTrue(res instanceof [check_type])
        arktest.assertEQ(res, [check_value])

  - desc: |-
      Checking for initialization with asynchronous API usage.
    check_variants:
      - {check_type: "C", data_type: "int", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: Promise<[check_type]>
          async foo(): Promise<[check_type]> {
            let v: [check_type] = [init_value]
            return v
          }
          constructor() {
            this.field = this.foo()
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof Promise)
        let res = await a.field
        arktest.assertTrue(res instanceof [check_type])
        arktest.assertTrue(res.data instanceof [data_type])
        arktest.assertEQ(res.data, [check_value])

  - desc: |-
      Checking for initialization with asynchronous API usage.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        class A {
          field!: Promise<[check_type]>
          async foo(): Promise<[check_type]> {
            let v: [check_type] = [check_value]
            return v
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.field = a.foo()
        arktest.assertTrue(a.field instanceof Promise)
        let res = await a.field
        arktest.assertTrue(res instanceof [check_type])
        arktest.assertEQ(res, [check_value])

  - desc: |-
      Checking for initialization with asynchronous API usage.
    check_variants:
      - {check_type: "C", data_type: "int", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: Promise<[check_type]>
          async foo(): Promise<[check_type]> {
            let v: [check_type] = [init_value]
            return v
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.field = a.foo()
        arktest.assertTrue(a.field instanceof Promise)
        let res = await a.field
        arktest.assertTrue(res instanceof [check_type])
        arktest.assertTrue(res.data instanceof [data_type])
        arktest.assertEQ(res.data, [check_value])

  - desc: |-
      Checking for initialization with asynchronous API usage.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        class A {
          field!: [check_type]
          async foo(): Promise<void> {
            this.field = [check_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        await a.foo()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
      - |-
        let a: A = new A()
        let res = await a.foo().then((): [check_type] => a.field)
        arktest.assertTrue(res instanceof [check_type])
        arktest.assertEQ(res, [check_value])
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking for initialization with asynchronous API usage.
    check_variants:
      - {check_type: "C", data_type: "int", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
        class A {
          field!: [check_type]
          async foo(): Promise<void> {
            this.field = [init_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        await a.foo()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])
      - |-
        let a: A = new A()
        let res = await a.foo().then((): [check_type] => a.field)
        arktest.assertTrue(res instanceof [check_type])
        arktest.assertTrue(res.data instanceof [data_type])
        arktest.assertEQ(res.data, [check_value])
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
        Checking for initialization with asynchronous API usage.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        class A {
          field!: [check_type]
          async foo(): Promise<void> {
            return new Promise<void> (
              (resolve) => {
                setTimeout(() => {
                  this.field = [check_value]
                  resolve(undefined)
                }, 1)
              }
            )
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        await a.foo()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
      - |-
        let a: A = new A()
        let res = await a.foo().then((): [check_type] => a.field)
        arktest.assertTrue(res instanceof [check_type])
        arktest.assertEQ(res, [check_value])
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking for initialization with asynchronous API usage.
    check_variants:
      - {check_type: "C", data_type: "int", init_value: "{data: 5}",
        check_value: "5", cv_decl_data: "class C {data!: int}"}
    decl_variants:
      - |-
        [cv_decl_data]
                class A {
          field!: [check_type]
          async foo(): Promise<void> {
            return new Promise<void> (
              (resolve) => {
                setTimeout(() => {
                  this.field = [init_value]
                  resolve(undefined)
                }, 1)
              }
            )
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        await a.foo()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])
      - |-
        let a: A = new A()
        let res = await a.foo().then((): [check_type] => a.field)
        arktest.assertTrue(res instanceof [check_type])
        arktest.assertTrue(res.data instanceof [data_type])
        arktest.assertEQ(res.data, [check_value])
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertTrue(a.field.data instanceof [data_type])
        arktest.assertEQ(a.field.data, [check_value])

  - desc: |-
      Checking for initialization with overriding usage.
    check_variants:
      - {check_type: "long", base_value: "0", check_value: "5"}
      - {check_type: "int", base_value: "0", check_value: "5"}
      - {check_type: "byte", base_value: "0", check_value: "5"}
      - {check_type: "short", base_value: "0", check_value: "5"}
      - {check_type: "double", base_value: "0", check_value: "7.3"}
      - {check_type: "number", base_value: "0", check_value: "5"}
      - {check_type: "float", base_value: "0", check_value: "7.3f"}
      - {check_type: "bigint", base_value: "0n", check_value: "5n"}
      - {check_type: "string", base_value: "\"\"", check_value: "\"abc\""}
      - {check_type: "char", base_value: "c'0'", check_value: "c'a'"}
      - {check_type: "boolean", base_value: "false", check_value: "true"}
      - {check_type: "Object", base_value: "0", check_value: "5"}
    decl_variants:
      - |-
        class Base {
          field: [check_type] = [base_value]
        }
        class A extends Base {
          override field!: [check_type]
        }
      - |-
        class Base {
          field!: [check_type]
        }
        class A extends Base {
          override field!: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.field = [check_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
      - |-
        let a: Base = new A()
        a.field = [check_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking for initialization with overriding usage.
    check_variants:
      - {check_type: "long", base_value: "3", check_value: "5"}
      - {check_type: "int", base_value: "3", check_value: "5"}
      - {check_type: "byte", base_value: "3", check_value: "5"}
      - {check_type: "short", base_value: "3", check_value: "5"}
      - {check_type: "double", base_value: "3", check_value: "7.3"}
      - {check_type: "number", base_value: "3", check_value: "5"}
      - {check_type: "float", base_value: "3", check_value: "7.3f"}
      - {check_type: "bigint", base_value: "3n", check_value: "5n"}
      - {check_type: "string", base_value: "\"ab\"", check_value: "\"abc\""}
      - {check_type: "char", base_value: "c'b'", check_value: "c'a'"}
      - {check_type: "boolean", base_value: "false", check_value: "true"}
      - {check_type: "Object", base_value: "3", check_value: "5"}
    decl_variants:
      - |-
        class Base {
          field!: [check_type]
        }
        class A extends Base {
          override field: [check_type] = [base_value]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.field = [check_value]
        arktest.assertEQ(a.field, [check_value])
      - |-
        let a: Base = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [base_value])
        a.field = [check_value]
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking for initialization with overriding usage.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        class Base {
          field: [check_type] = [check_value]
        }
        class A extends Base {
          override field!: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
      - |-
        let a: Base = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      Checking for initialization with interface usage.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        interface I {
          field: [check_type]
        }
        class A implements I {
          field!: [check_type]
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.field = [check_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
      - |-
        let a: I = new A()
        a.field = [check_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      >-
        Checking for initialization from constructor
        with subtype usage.
    check_variants:
      - {check_type: "long", check_value: "5", modifiers: ""}
      - {check_type: "int", check_value: "5", modifiers: ""}
      - {check_type: "double", check_value: "7.3", modifiers: ""}
      - {check_type: "string", check_value: "\"abc\"", modifiers: ""}
      - {check_type: "Object", check_value: "5", modifiers: ""}
      - {check_type: "long", check_value: "5", modifiers: "protected "}
      - {check_type: "int", check_value: "5", modifiers: "protected "}
      - {check_type: "double", check_value: "7.3", modifiers: "protected "}
      - {check_type: "string", check_value: "\"abc\"", modifiers: "protected "}
      - {check_type: "Object", check_value: "5", modifiers: "protected "}
    decl_variants:
      - |-
        class Base {
          [modifiers]_field!: [check_type]
          get field(): [check_type] {
            return this._field
          }
        }
        class A extends Base {
          constructor () {
            this._field = [check_value]
          }
        }
      - |-
        class Base {
          [modifiers]_field!: [check_type]
          get field(): [check_type] {
            return this._field
          }
        }
        class A extends Base {
          constructor (arg: [check_type] = [check_value]) {
            this._field = arg
          }
        }
      - |-
        class Base {
          [modifiers]_field!: [check_type]
          get field(): [check_type] {
            return this._field
          }
        }
        class A extends Base {
          constructor (...args: Any[]) {
            this._field = [check_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
        let b: Base = new A()
        arktest.assertTrue(b.field instanceof [check_type])
        arktest.assertEQ(b.field, [check_value])

  - desc: |-
      >-
        Checking for initialization from outside of constructor
        with subtype usage.
    check_variants:
      - {check_type: "long", check_value: "5"}
      - {check_type: "int", check_value: "5"}
      - {check_type: "byte", check_value: "5"}
      - {check_type: "short", check_value: "5"}
      - {check_type: "double", check_value: "7.3"}
      - {check_type: "number", check_value: "5"}
      - {check_type: "float", check_value: "7.3f"}
      - {check_type: "bigint", check_value: "5n"}
      - {check_type: "string", check_value: "\"abc\""}
      - {check_type: "char", check_value: "c'a'"}
      - {check_type: "boolean", check_value: "false"}
      - {check_type: "Object", check_value: "5"}
    decl_variants:
      - |-
        class Base {
          field!: [check_type]
        }
        class A extends Base {
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.field = [check_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
        let b: Base = new A()
        b.field = [check_value]
        arktest.assertTrue(b.field instanceof [check_type])
        arktest.assertEQ(b.field, [check_value])

  - desc: |-
      >-
        Checking for initialization from constructor
        with private access modifier.
    check_variants:
      - {check_type: "long", check_value: "5", modifiers: ""}
      - {check_type: "int", check_value: "5", modifiers: ""}
      - {check_type: "double", check_value: "7.3", modifiers: ""}
      - {check_type: "string", check_value: "\"abc\"", modifiers: ""}
      - {check_type: "Object", check_value: "5", modifiers: ""}
      - {check_type: "long", check_value: "5", modifiers: "protected "}
      - {check_type: "int", check_value: "5", modifiers: "protected "}
      - {check_type: "double", check_value: "7.3", modifiers: "protected "}
      - {check_type: "string", check_value: "\"abc\"", modifiers: "protected "}
      - {check_type: "Object", check_value: "5", modifiers: "protected "}
    decl_variants:
      - |-
        class A {
          private _field!: [check_type]
          get field(): [check_type] {
            return this._field
          }
          constructor () {
            this._field = [check_value]
          }
        }
      - |-
        class A {
          private _field!: [check_type]
          get field(): [check_type] {
            return this._field
          }
          constructor (arg: [check_type] = [check_value]) {
            this._field = arg
          }
        }
      - |-
        class A {
          private _field!: [check_type]
          get field(): [check_type] {
            return this._field
          }
          constructor (...args: Any[]) {
            this._field = [check_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])

  - desc: |-
      >-
        Checking for initialization from outside of constructor
        with private access modifier.
    check_variants:
      - {check_type: "long", set_value: "4", add_value: "1",
        check_value: "5"}
      - {check_type: "int", set_value: "4", add_value: "1",
        check_value: "5"}
      - {check_type: "double", set_value: "4", add_value: "1",
        check_value: "5"}
      - {check_type: "bigint", set_value: "4n", add_value: "1n",
        check_value: "5n"}
      - {check_type: "string", set_value: "\"ab\"", add_value: "\"c\"",
        check_value: "\"abc\""}
    decl_variants:
      - |-
        class A {
          private _field!: [check_type]
          get field(): [check_type] {
            return this._field
          }
          set field(a: [check_type]) {
            this._field = a + [add_value]
          }
        }
    sub_cases_logic:
      - |-
        let a: A = new A()
        a.field = [set_value]
        arktest.assertTrue(a.field instanceof [check_type])
        arktest.assertEQ(a.field, [check_value])
