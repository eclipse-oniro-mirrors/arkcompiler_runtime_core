# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - decl: |-
      type foo1_o = (x?: int) => int
      type foo2_o = (x1: int, x2?: int) => int
    use: |-
      let func1: foo1_o = (x?: int) => { 
        arktest.assertTrue(x instanceof int | undefined, "Optional 1 instanceof")
        return (x instanceof undefined) ? 1 : x
      }
      arktest.assertEQ(func1(), 1, "func1()")
      arktest.assertEQ(func1(0), 0, "func1(0)")
      let func2: foo2_o = (x1: int, x2?: int) => { 
        arktest.assertTrue(x2 instanceof int | undefined, "Optional 2 instanceof")
        return x1 + ((x2 instanceof undefined) ? 2 : x2)
      }
      arktest.assertEQ(func2(1), 3, "func2(1)")
      arktest.assertEQ(func2(1, 0), 1, "func2(1, 0)")

  - decl: |-
      type foo2_oo = (x1?: int, x2?: int) => int
      type foo3_oo = (x1: int, x2?: int, x3?: int) => int
      type foo3_o = (x1: int, x2: int, x3?: int) => int
    use: |-
      let func1: foo2_oo = (x1?: int, x2?: int) => { 
        arktest.assertTrue(x1 instanceof int | undefined, "Optional 1 instanceof 1")
        arktest.assertTrue(x2 instanceof int | undefined, "Optional 1 instanceof 2")
        return ((x1 instanceof undefined) ? 1 : x1) + ((x2 instanceof undefined) ? 2 : x2)
      }
      arktest.assertEQ(func1(), 3, "func1()")
      arktest.assertEQ(func1(0), 2, "func1(0)")
      arktest.assertEQ(func1(0, 0), 0, "func1(0, 0)")
      let func2: foo3_oo = (x1: int, x2?: int, x3?: int) => { 
        arktest.assertTrue(x2 instanceof int | undefined, "Optional 2 instanceof 1")
        arktest.assertTrue(x3 instanceof int | undefined, "Optional 2 instanceof 2")
        return x1 + ((x2 instanceof undefined) ? 2 : x2) + ((x3 instanceof undefined) ? 4 : x3)
      }
      arktest.assertEQ(func2(1), 7, "func2(1)")
      arktest.assertEQ(func2(1, 0), 5, "func2(1, 0)")
      arktest.assertEQ(func2(1, 0, 0), 1, "func2(1, 0, 0)")
      let func3: foo3_o = (x1: int, x2: int, x3?: int) => { 
        arktest.assertTrue(x3 instanceof int | undefined, "Optional 3 instanceof")
        return x1 + x2 + ((x3 instanceof undefined) ? 4 : x3)
      }
      arktest.assertEQ(func3(1, 2), 7, "func3(1, 2)")
      arktest.assertEQ(func3(1, 2, 0), 3, "func3(1, 2, 0)")
