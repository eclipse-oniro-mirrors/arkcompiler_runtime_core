# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

types:
  - abstract class
  - final class
  - class

cases:
  # Fields
  - def: |-
      i: byte = 0
    type: \"i\"
  - def: |-
      i = 0
      j = true
      k = \"some str\"
      n = 1.1
      O_1 = new Object()
    type: \"i\" | \"j\" | \"k\" | \"n\" | \"O_1\"
  - def: |-
      i: int|byte|string|undefined = 0
      j: undefined|char|null = c'S'
    type: \"i\" | \"j\"
  - def: |-
      longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_ = 0
    type: \"longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_longvarname_\"
  # Fields and methods
  - def: |-
      var2: number[] = new number[1]
      foo: number[] = new number[2]
      var1() {}
      bar() { return true }
    type: \"bar\" | \"foo\" | \"var1\" | \"var2\"
    # Static
  - def: |-
      static a = 1
    type: \"a\"
  - def: |-
      static foo() {}
    type: \"foo\"
  - def: |-
      static foo() {}
      static bar = 1
    type: \"bar\" | \"foo\"
  - def: |-
      static sfoo() {}
      foo() {}
      static sbar = 1
      bar = 1
    type: \"bar\" | \"foo\" | \"sbar\" | \"sfoo\"
    # Overloading
  - def: |-
      foo() {}
      foo(i: int) {}
      foo(j: number) {}
      constructor() {}
    type: \"foo\"
    # Not included
  - def: |-
      constructor() {}
      constructor(i: int) {}
    type: never
  - def: |-
      static {}
    type: never
  - type: never
    # Access modifiers
  - def: |-
      public var1 = 1
      protected var2 = false
      private var3 = \"str\"
      private bar(i: int) {}
      public bar() {}
      default foo() {}
      protected jay() {}
      private raf() {}
    type: \"bar\" | \"foo\" | \"jay\" | \"var1\" | \"var2\"
    # Different types check
  - def: |-
      i: string|number|undefined|null = "str"
    type: \"i\"
  - decl: |-
      type custom = int
    def: |-
      i: custom = 1
    type: \"i\"
  - decl: |-
      enum ENUM {Red, Orange, Green}
    def: |-
      i: ENUM = ENUM.Green
    type: \"i\"
  - def: |-
      i?: boolean = 1
    type: \"i\"
    # field initialized at constructor level
  - def: |-
      i: int
      constructor() { i = 1 }
    type: \"i\"
    # readonly field
  - def: |-
      readonly i: int = 1
    type: \"i\"
