# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases2:
  - desc: Union type exception assignment.
    dec1: |-
      type StringOrNumber = string | number;
      let value: StringOrNumber;
    check: |-
      value = true;

  - desc: Union type exception assignment(array).
    dec1: |-
      type StringOrNumber = string | number;
      let value: StringOrNumber;
    check: |-
      value = [1, 2, 3];

  - desc: Union type exception assignment(Literal type out of bounds).
    dec1: |-
      type StringOrNumber = "active" | "inactive" | "pending";
      let value: StringOrNumber;
    check: |-
      value = "deleted";

  - desc: Union type exception assignment(function parameter type does not match typescript).
    dec1: |-
      function formatInput(input: string | number): string {
        return input.toString();
      }
    check: |-
      formatInput(true);

  - desc: Union type exception assignment(array element type restrictions-int).
    dec1: |-
      type StringOrBoolArray = (string | boolean)[];
    check: |-
      function main(): void {
        const arr: StringOrBoolArray = [
          "text",
          true,
          123
        ];
      }

  - desc: Union type exception assignment(The union type value of the interface property gave the wrong type).
    dec1: |-
      interface Animal {
        name: string;
        age: number | string;
      }
    check: |-
        const cat: Animal = {
          name: "Mimi",
          age: true
        };

  - desc: Union type exception assignment(promise return value does not match-boolean).
    dec1: |-
      type ApiResult = Promise<string | number>;
    check: |-
      const result: ApiResult = Promise.resolve(true);

  - desc: Union type exception assignment(literal type out of bounds-assignment exception assignment).
    dec1: |-
      type Status = "active" | "inactive" | "pending";
    check: |-
      let value: Status = 1;

  - desc:  Union type exception assignment(function parameter type does not match typescript-array).
    dec1: |-
      function formatInput(input: string | number): string {
        return input.toString();
      }
    check: |-
      formatInput([]);

  - desc: Union type exception assignment(array element type restrictions-array).
    dec1: |-
      type StringOrBoolArray = (string | boolean)[];
    check: |-
      function main(): void {
        const arr: StringOrBoolArray = [
          "text",
          true,
          [1, 2, 3]
        ];
      }

  - desc: Union type exception assignment(The union type value of the interface property gave the wrong type-array).
    dec1: |-
      interface Animal {
        name: string;
        age: number | string;
      }
    check: |-
      const cat: Animal = {
        name: "Mimi",
        age: [1, 2, 3]
      };

  - desc: Union type exception assignment(promise return value does not match-array).
    dec1: |-
      type ApiResult = Promise<string | number>;
    check: |-
      const result: ApiResult = Promise.resolve([1, 2, 3]);

  - desc: Union type exception assignment(class attribute assignment error).
    dec1: |-
      class Item {
        id: string | number;
        constructor(id: string | number) {
          this.id = true;
        }
      }
    check: |-

  - desc: Union type exception assignment(class attribute assignment error-array).
    dec1: |-
      class Item {
        id: string | number;
        constructor(id: string | number) {
          this.id = [1, 2, 3];;
        }
      }
    check: |-

  - desc: Basic string union type. The test union type is "red" | "green" | "blue" and tests is passed in. The default branch is expected to be executed.
    dec1: |-
      function unitedSwitch(input: 'red' | 'green' | 'blue'): string {
        switch (input) {
          case 'red':
            return 'red';
        case 'green':
          return 'green';
        case 'blue':
          return 'blue';
        default:
          return 'fail';
        }
      }
    check: |-
      let input = "tests";
      let result = unitedSwitch(input);

  - desc: Number and String combined type(true).
    dec1: |-
      function unitedSwitch(input: number | string): string {
        switch (input) {
          case 'red':
            return 'red';
          case 1:
            return '1';
          default:
            return 'fail';
        }
      }
    check: |-
      let input = true;
      let result = unitedSwitch(input);

  - desc: Undefined and 1 combined type(2).
    dec1: |-
      function unitedSwitch(input: 1 | string): string {
        switch (input) {
          case undefined:
            return undefined;
          case 1:
            return '1';
          default:
            return 'fail';
        }
      }
    check: |-
      let output = unitedSwitch(2);