# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - defs: |-
      class Err extends Error {}
    use: |-
      let p: Object = new Err();
      try {
          if (t1 != t2) throw p as Error;
      } catch (e) {
          arktest.assertTrue( e instanceof Err )
          return
      }
      arktest.assertTrue(false, "No expected error")

  - defs: |-
      interface Ie {}
      class Err extends Error implements Ie {}
    use: |-
      let p: Ie = new Err();
      try {
          if (t1 != t2) throw p as Error;
      } catch (e) {
          arktest.assertTrue( e instanceof Ie )
          return
      }
      arktest.assertTrue(false, "No expected error")

  - defs: |-
      class Err extends Error {}
    use: |-
      try {
          if (t1 != t2) throw new Err();
      } catch (e) {
          arktest.assertTrue( e instanceof Err )
          return
      }
      arktest.assertTrue(false, "No expected error")

  - defs: |-
      class Err extends Error {}
    use: |-
      let v = 0;
      try {
          try {
              if (t1 != t2) throw new Err();
          } catch (e) {
              if (e instanceof Err) {
                  v++;
                  throw e;
              }
          }
      } catch (e) {
          if (e instanceof Err) {
              v++
          }
      }
      arktest.assertEQ(v, 2)

  - defs: |-
      class Err extends Error {}
      let err: Err = new Err();

      function foo(): void {
          try {
              bar();
          } catch (f) {
              throw f
          }
      }

      function bar(): void {
          try {
              if (t1 != t2) throw err;
          } catch (p) {
              throw p;
          }
      }
    use: |-
      try {
          foo()
      } catch (e) {
          arktest.assertEQ(e, err)
          return
      }
      arktest.assertTrue(false, "No expected error")

  - defs: |-
      class A extends Error {}
      let p: A|null = new A();
    use: |-
      try {
          if (t1 != t2) throw p!;
      } catch (e) {
          arktest.assertEQ(e, p)
          return
      }
      arktest.assertTrue(false, "No expected error")

  - defs: |-
      class Err extends Error {}
      let err: Err = new Err();

      function foo() {
          try {
              if (t1 != t2) throw err
          } catch (f) {
              throw f
          }
      }
    use: |-
      try {
          foo()
      } catch (e) {
          arktest.assertEQ(e, err)
          return
      }
      arktest.assertTrue(false, "No expected error")

  - defs: |-
      class StaticThrow extends Error {}
      class ThrowFromClassInit {
        static {
          throw new StaticThrow
        }
      }
    use: |-
      let cc: int = 0
  
      try {
        new ThrowFromClassInit
      } catch(e) {
        arktest.assertTrue( e instanceof StaticThrow )
        cc++
      }
      try {
        new ThrowFromClassInit
      } catch(e) {

        arktest.assertTrue( e instanceof StaticThrow )
        cc++
      }
      arktest.assertEQ(2, cc)

  - defs: |-
      class StaticThrow extends Error {}
      class ThrowFromClassStatic {
        static throwableMethod() {
          throw new StaticThrow
        }
      }
    use: |-
      try {
        ThrowFromClassStatic.throwableMethod()
      } catch(e) {
        arktest.assertTrue( e instanceof StaticThrow )
        return;
      }
      arktest.assertFalse(true, "Not expected to be here");

  - defs: |-
      class StaticThrow extends Error {}
      interface DefaultThrowable {
        throwableMethod() {
          throw new StaticThrow
        }
      }
      class ThrowFromInterfaceDefault implements DefaultThrowable {

      }
    use: |-
      try {
        let ci = new ThrowFromInterfaceDefault
        ci.throwableMethod();
      } catch(e) {
        arktest.assertTrue( e instanceof StaticThrow )
        return;
      }
      arktest.assertFalse(true, "Not expected to be here");

  - defs: |-
      class StaticThrow extends Error {}
      class ConstructThrowable {
        constructor () {
          throw new StaticThrow  
        }
      }
    use: |-
      try {
        new ConstructThrowable
      } catch(e) {
        arktest.assertTrue( e instanceof StaticThrow )
        return;
      }
      arktest.assertFalse(true, "Not expected to be here");

  - defs: |-
      class StaticThrow extends Error {}
    use: |-
      try {
        (() => { throw new StaticThrow })()
      } catch(e) {
        arktest.assertTrue( e instanceof StaticThrow )
        return
      }
      arktest.assertFalse(true, "Not expected to be here");

  - defs: |-
      class StaticThrow extends Error {}
      type TL = () => void
    use: |-
      let tl: TL = () => { throw new StaticThrow }
      try {
        tl()
      } catch(e) {
        arktest.assertTrue( e instanceof StaticThrow )
        return;
      }
      arktest.assertFalse(true, "Not expected to be here");

  - defs: |-
      class TrailingLambdaThrow extends Error {}
      type TL = () => void
      function foo(lambda: TL) { lambda() }
    use: |-
      try {
        foo() {
          throw new TrailingLambdaThrow  
        }
      } catch(e) {
        arktest.assertTrue( e instanceof TrailingLambdaThrow )
        return;
      }
      arktest.assertFalse(true, "Not expected to be here");      

  - defs: |-
      class BlockThrow extends Error {}
    use: |-
      try {
            {
              {
                {
                  {
                    throw new BlockThrow 
                  }
                }
              }
            }
      } catch(e) {
        arktest.assertTrue( e instanceof BlockThrow )
        return;
      }
      arktest.assertFalse(true, "Not expected to be here");

  - defs: |-
      class BlockThrow extends Error {}
      class Unreachable extends Error {}
    use: |-
      try {
            {
              {
                {
                  {
                    throw new BlockThrow 
                  }
                  new Unreachable;
                }
              }
            }
      } catch(e) {
        arktest.assertTrue( e instanceof BlockThrow )
        return;
      }
      arktest.assertFalse(true, "Not expected to be here");
