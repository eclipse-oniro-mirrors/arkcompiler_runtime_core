# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # nothing to catch
    - defs: |-
          class Er extends Error {}

      use: |-
          let err: Er = new Er();
          try {
              if ((() => false)()) throw err;
              return;
          } catch (e) {
              arktest.assertTrue(false, 'Error not expected')
          }

    # catch Error
    - defs: |-
          class Er extends Error {}

      use: |-
          let err: Er = new Er();
          try {
              if ((() => true)()) throw err;
              arktest.assertTrue(false, 'Error expected')
          } catch (e) {
              arktest.assertTrue(e instanceof Error)
              arktest.assertEQ(e, err)
          }

    # check passed value for error
    - defs: |-
          class BaseError extends Error {}

          class Er extends Error {
            constructor(message?: String, options?: ErrorOptions) {
                super('Er', message, options)
            }
          }

      use: |-
          let cause = new BaseError();
          let err: Er = new Er('msg', { cause });
          try {
              if ((() => true)()) throw err;
          } catch (e) {
              arktest.assertTrue(e instanceof Error)
              arktest.assertEQ(e, err)
              arktest.assertEQ(e.cause, cause)
              arktest.assertEQ(e.message, 'msg')
              arktest.assertEQ(e.name, 'Er')
              return
          }
          arktest.assertTrue(false, 'Error err expected')

    # catch identifier of union type
    - defs: |-
          class Er1 extends Error {}
          class Er2 extends Error {}

          let err: Er1|Er2 = new Er1()
      use: |-
          try {
              if ((() => true)()) throw err
          } catch (e) {
              arktest.assertTrue(e instanceof Er1)
              arktest.assertTrue(e instanceof Error)
              arktest.assertEQ(e, err)
              return
          }
          arktest.assertTrue(false, 'Error err expected')

    # catch error with interface
    - defs: |-
          interface MyInterface {
              getFormattedMessage(): string
          }
          class MyError extends Error implements MyInterface {
              getFormattedMessage(): string {
                  return this.name + ';' + this.message + ';' + this.cause
              }
          }
      use: |-
          let err = new MyError();
          try {
              if ((() => true)()) throw err;
          } catch (e) {
              let ei = e as MyInterface
              arktest.assertEQ(ei.getFormattedMessage(), 'Error;;undefined')
              return
          }
          arktest.assertTrue(false, 'Error err expected')

    # catch error with interface
    - defs: |-
          interface MyInterface {
              getFormattedMessage(): string
          }
          class MyError extends Error implements MyInterface {
              constructor(name: string, message: string, cause: ErrorOptions) {
                  super(name, message, cause)
              }
              getFormattedMessage(): string {
                  return this.name + ';' + this.message + ';' + this.cause
              }
          }
      use: |-
          let err = new MyError('Some name', 'Some message', { cause: new NullPointerError() });
          try {
              if ((() => true)()) throw err;
          } catch (e) {
              let ei = e as MyInterface
              arktest.assertEQ(ei.getFormattedMessage(), 'Some name;Some message;NullPointerError')
              return
          }
          arktest.assertTrue(false, 'Error err expected')

    # catch block with explicit type
    - tags: compile-only, negative
      defs: |-
          class MyError extends Error {}
      use: |-
          try {
              if ((() => true)()) throw new MyError()
          } catch (e: MyError) { // CTE: explicit type is not permitted
              return
          }

    # catch block without the identifier
    - tags: compile-only, negative
      defs: |-
          class MyError extends Error {}
      use: |-
          try {
              if ((() => true)()) throw new MyError()
          } catch { // CTE: identifier is missed
              return
          }

    # multiple catch blocks
    - tags: compile-only, negative
      defs: |-
          class MyError extends Error {}
      use: |-
          try {
              if ((() => true)()) throw new MyError()
          } catch (e) {
              return
          } catch (f) { // CTE: multiple catch blocks
              return
          }

    # multiple catch blocks with explicit type
    - tags: compile-only, negative
      defs: |-
          class MyError extends Error {}
      use: |-
          try {
              if ((() => true)()) throw new MyError()
          } catch (e: MyError) { // CTE: type is not permitted
              return
          } catch (f) { // CTE: multiple catch blocks
              return
          }

    # exported from namespace error
    - defs: |-
          namespace NS {
              export class MyError extends Error {}
              export let err = new MyError
          }
      use: |-
          try {
              if ((() => true)()) throw NS.err
          } catch (e) {
              arktest.assertEQ(e, NS.err)
              arktest.assertTrue(e instanceof NS.MyError)
              return
          }
          arktest.assertTrue(false, 'Error NS.err expected')
