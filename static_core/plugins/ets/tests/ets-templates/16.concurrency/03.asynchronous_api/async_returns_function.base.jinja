/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{% from "16.concurrency/03.asynchronous_api/async_api_helper.jinja" import generate_async, call_async %}

{% set cases = [
    {
        'return_type': ': Promise<(name: string) => string>',
        'body': 'return (name: string): string => `Hello, ${name}!`',
        'assertion': 'arktest.assertEQ(awaited_result("World"), "Hello, World!")'
    },
    {
        'return_type': ': Promise<Function>',
        'body': 'return (a: int, b: int): int => a + b',
        'assertion': 'arktest.assertEQ(awaited_result.unsafeCall(5, 3), 8)'
    }
] %}

{% macro generate_complete_test(declaration_type='function') %}
{% for c in cases %}

/*---
desc: The return type of an async {{declaration_type}} must be Promise<Function>.
---*/

{% set params = {
    'name': 'getFunction',
    'body': c.body,
    'return_type': c.return_type,
    'class_name': 'AsyncMethodReturnClass'
} %}

{{ generate_async(declaration_type, params) }}

async function startTest() {
    let result = {{ call_async(declaration_type, params) }};
    arktest.assertTrue(result instanceof Promise);
    let awaited_result = await result;
    arktest.assertTrue(awaited_result instanceof Function);
    {{ c.assertion | safe }}
}

function main() {
    waitForCompletion(startTest);
}

{% endfor %}
{% endmacro %}