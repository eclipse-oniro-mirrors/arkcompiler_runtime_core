/**
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{% macro generate_complete_test(cases) %}
{% for c in cases %}
{% for type_name in [c.type, c.alias] | select %}

/*---
desc: Test to wait Promise<{{type_name}}> in loop.
---*/

const value: {{type_name}} = {{c.value}}

//Array for 2 iteration await Promise check
const arr = [false, true];

async function startTest() {
    let iterationResult = false;
    for (let i of arr) {
        const valueResult = await Promise.resolve(value); 
        iterationResult = await Promise.resolve(i); 
        arktest.assertEQ(valueResult, value, `Value result must be ${value}`);
        arktest.assertEQ(iterationResult, i, `Iteration result must be "${i}"`);

        //Checking that await Promise.resolve called consecutively, not in parallel
        i ? arktest.assertTrue(iterationResult!=arr[0])
            : arktest.assertTrue(iterationResult!=arr.at(-1))
    }
}

function main() {
    waitForCompletion(startTest); 
}
{% endfor %}
{% endfor %}
{% endmacro %}