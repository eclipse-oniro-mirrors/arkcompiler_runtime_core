# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - defs: |-
          type 123 = int;

    - defs: |-
          type .X = Long;

    - defs: |-
          type null = byte;

    - defs: |-
          type this = Object;

    - defs: |-
          type int = Int;

    - defs: |-
          interface Weight {}
          class Body implements Weight {}
          type Weight = Double;

    - defs: |-
          type self = this;

    - defs: |-
          class A<T, V> {}
          type Box<T> = A<Boolean, T>;
      use: |-
          let v: Box<Int> = new A<Int, Int>();

    - defs: |-
          type E = E

    - defs: |-
          type E = string | E

    - defs: |-
          type A<T> = Array<A>

    - defs: |-
          type A<T> = A<T>

    - defs: |-
          type A = C
          type B = A
          type C = B

    # recursive cases
    - defs: |-
          type NestedTup = [boolean, NestedTup|undefined, string]
      use: |-
          let v1: NestedTup = [true, [true, undefined, 'xyz'], 'abc']

    - defs: |-
          type RU = number | string | RU // TypeError: Circular type alias reference
      use: |-
          let v1: RU = 1.0

    - defs: |-
          type RF = (p: RF) => RF
      use: |-
          let v1: RF = (p: RF): RF => { return p }

    - defs: |-
        { class ClassNestedInBlock{} }
        type TAlias = ClassNestedInBlock;

    - defs: |-
          enum Axis { X, Y, Z };
          type Fields = Axis[];
      use: |-
          let v: Fields = new Axis[6];
          let ok = v.length == 6;

    - defs: |-
        type TStringAlias? = String | undefined

    - defs: |-
        @interface ClassAuthor {}
        type A = ClassAuthor

    - defs: |-
        @interface ClassAuthor {}
        type A = ClassAuthor | String

    - defs: |-
        type A = class MyClassDec {}

    - defs: |-
        class AliasMe {}
        type Alias = AliasMe<X> // CTE:  TypeError: Type 'AliasMe' is not generic.

    - defs: |-
        class AliasMe<X> {}
        type Alias = AliasMe<X> // CTE: TypeError: Cannot find type 'X'.

    - defs: |-
        type A<T, U> = T | A<U, T>[]
      use: |-
        let xx: A<Boolean, String> = new A<Boolean, String>()  //CTE: TypeError: The union type is not constructible.

    - defs: |-
        final class FinitaLaComedia {}
        type Alias<T extends FinitaLaComedia> = T
      use: |-
        let x: Alias<number> = '1'  //CTE: TypeError: Type '"1"' cannot be assigned to type 'Double'

    - defs: |-
        class FinitaLaComedia {}
        type Alias<T = FinitaLaComedia> = T
      use: |-
        let x: Alias<number> = '1'  //CTE: TypeError: Type '"1"' cannot be assigned to type 'Double'

    - defs: |-
        class FinitaLaComedia {}
        type Alias<T = FinitaLaComedia> = T
      use: |-
        let x: Alias = 1  //CTE: TypeError: Type 'Int' cannot be assigned to type 'FinitaLaComedia'

    - defs: |-
        type Alias<T extends string> = T

      use: |-
        let xx: Alias<Number> = 1
        let ok = xx == 1;

    - defs: |-
        final class FinitaLaComedia {}
        type Alias<T extends FinitaLaComedia> = T

      use: |-
        let xx: Alias<Number> = 1
        let ok = xx == 1;

    - defs: |-
        final class FinitaLaComedia {}
        type Alias<T extends FinitaLaComedia> = T

      use: |-
        let xx: Alias<String> = "Divine"
        let ok = xx instanceof String && xx instanceof Alias<String>;

    - defs: |-
        type TSStyleAlias<T> = { value: T } // SyntaxError: Using object literals to declare types in place is not supported
      use: |-
        let xx: TSStyleAlias<String>;

    - defs: |-
        class MC {}
        type TSStyleAlias = MC | { } // SyntaxError: Using object literals to declare types in place is not supported
      use: |-
        let xx: TSStyleAlias

    - defs: |-
        class MC {}
        type TSStyleAlias = MC | undefined | { } // SyntaxError: Using object literals to declare types in place is not supported
      use: |-
        let xx: TSStyleAlias

    - defs: |-
        type IsString<T> = T extends string ? true : false; // TypeError: Conditional type aliases are not supported.
        type A = IsString<string>; // true
        type B = IsString<number>; // false
      use: |-
        let xx: IsString<string>;

    - defs: |-
        interface Named { name: string; }        
        interface Aged { age: number; }
        type Person = Named & Aged // SyntaxError: Intersection types are not supported
      use: |-
        let xx: Person;

    - defs: |-
        type CustomReturnType<T> = T extends (...args: Any[]) => infer P ? P : Any // TypeError: Conditional type aliases are not supported
      use: |-
        let xx: CustomReturnType<Long>;

    - defs: |-
        type CArrayType<T> = T extends (infer Item)[] ? Item : T  // TypeError: Conditional type aliases are not supported
      use: |-
        let xx: CArrayType<Long>;

    - defs: |-
        type CCT = [string, string, string?]  // TypeError: Conditional type aliases are not supported
      use: |-
        let xx: CCT

    - defs: |-
        type Rec<T extends string | number> = T | Rec<T>  // TypeError: Circular type alias reference
      use: |-
        let xx: Rec<String>

    - defs: |-
        type NESA<X> = [X, ...X[]] // Syntax Error: Invalid Type
      use: |-
        let xx: NESA<String>

    - defs: |-
        type ELP = | string  // Syntax Error: Invalid Type
      use: |-
        let xx: ELP
