# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
function_decls:
    - decl: |-
          interface I {
            i: int
            foo(): void
          }
          class A implements I {
            i = 0
            foo(): void {  
                this.i += 1
            }
          }
      call: |-
          let a = new A()
          a.foo()
          arktest.assertEQ(a.i, 1)

    - decl: |-
          interface I {
            i: int
            foo(): void
          }
          class A implements I {
            i = 0
            foo(): void {  
                this.i += 1
                return
            }
          }
      call: |-
          let a = new A()
          a.foo()
          arktest.assertEQ(a.i, 1)

    - decl: |-
          interface I {
            s: string
            foo(): string
          }
          class A implements I {
            s = "foo"
            foo(): string {  
                return this.s
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertEQ(new A().foo(), "foo")
          arktest.assertEQ(v, "foo")
          arktest.assertTrue(v instanceof string)

    - decl: |-
          interface I {
            s: int
            foo(): int
          }
          class A implements I {
            s: int = 42
            foo(): int {  
                return this.s
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertEQ(new A().foo(), 42)
          arktest.assertEQ(v, 42)
          arktest.assertTrue(v instanceof int)

    - decl: |-
          interface I {
            s: number
            foo(): number
          }
          class A implements I {
            s: number = 1.0
            foo(): number {  
                return this.s
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertEQ(new A().foo(), 1.0)
          arktest.assertEQ(v, 1.0)
          arktest.assertTrue(v instanceof number)

    - decl: |-
          interface I {
            s: Error
            foo(): Error
          }
          class A implements I {
            s = new Error()
            foo(): Error {  
                return this.s
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertTrue(new A().foo() instanceof Error)
          arktest.assertTrue(v instanceof Error)

    - decl: |-
          interface I {
            s: number[]
            foo(): number[]
          }
          class A implements I {
            s: number[] = [1.0, 2.0, 3.0]
            foo(): number[] {  
                return this.s
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertTrue(v instanceof number[] && v.length == 3)

    - decl: |-
          interface I {
            s: Boolean[]
            foo(): Boolean[]
          }
          class A implements I {
            s: Boolean[] = new Boolean[0]
            foo(): Boolean[] {  
                return this.s
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertTrue(v instanceof Boolean[] && v.length == 0)

    - decl: |-
          interface I {
            s: Long[][]
            foo(): Long[][]
          }
          class A implements I {
            s: Long[][] = new Long[1][1]
            foo(): Long[][] {  
                if (this.s != null)
                    return this.s
                else
                    return new Long[2][2]
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertTrue(new A().foo() instanceof Long[][])

    - decl: |-
          interface I {
            s: long[][]
            foo(): Error[][]|long[][]
          }
          class A implements I {
            s: long[][] = new long[1][1]
            foo(): Error[][]|long[][] {  
                if (this.s != null)
                    return this.s
                else
                    return new Error[1][1]
            }
          }
      call: |-
          let a = new A()
          let v = a.foo() as long[][]
          v[0][0] = 0
          arktest.assertEQ(v[0][0], 0)

    - decl: |-
          interface I {
            s: Long[][]
            foo(): Error[]|Long[][]
          }
          class A implements I {
            s: Long[][] = new Long[1][1]
            foo(): Error[]|Long[][] {  
                if (this.s == null)
                    return this.s
                else
                    return new Error[1]
            }
          }
      call: |-
          let a = new A()
          let v = a.foo() as Error[]
          arktest.assertEQ(v.length, 1)

    - decl: |-
          interface I {
            s: Long[][]|null
            foo(): Error|Long[][]|null
          }
          class A implements I {
            s: Long[][]|null = new Long[1][1]
            foo(): Error|Long[][]|null {  
                if (this.s != null)
                    return this.s
                else
                    return new Error()
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertTrue(v instanceof Object)

    - decl: |-
          interface I {
            s: int
            foo(): Promise<Boolean>
          }
          class A implements I {
            s = 0
            async foo(): Promise<Boolean> {  
                if (this.s == 0)
                    return new Boolean(true)
                else
                    return new Boolean(false)
            }
          }
      call: |-
          let v: Promise<Boolean> = new A().foo()
          arktest.assertTrue(v instanceof Promise)
          arktest.assertTrue(new A().foo() instanceof Promise)

    - decl: |-
          interface I {
            s: Object
            foo(): boolean|boolean[]
          }
          class A implements I {
            s = new Object()
            foo(): boolean|boolean[] {    
                if (this.s != null)
                    return true
                else
                    return [true]
            }
          }
      call: |-
       let v = new A().foo()
          arktest.assertTrue(v instanceof boolean|boolean[])
