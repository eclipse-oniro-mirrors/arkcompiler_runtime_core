# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
function_decls:
    # instance
    - decl: |-
          class A {
            i = 0
            foo() {  // infer void
                this.i += 1
            }
          }
      call: |-
          let a = new A()
          a.foo()
          arktest.assertEQ(a.i, 1)

    - decl: |-
          class A {
            i = 0
            foo() {  // infer void
                this.i += 1
                return
            }
          }
      call: |-
          let a = new A()
          a.foo()
          arktest.assertEQ(a.i, 1)

    - decl: |-
          class A {
            s = "foo"
            foo() {  // infer string
                return this.s
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertEQ(new A().foo(), "foo")
          arktest.assertEQ(v, "foo")

    - decl: |-
          class A {
            s: int = 42
            foo() {  // infer int
                return this.s
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertEQ(new A().foo(), 42)
          arktest.assertEQ(v, 42)

    - decl: |-
          class A {
            s: number = 1.0
            foo() {  // infer number
                return this.s
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertEQ(new A().foo(), 1.0)
          arktest.assertEQ(v, 1.0)

    - decl: |-
          class A {
            s = new Error()
            foo() {  // infer Error
                return this.s
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertTrue(new A().foo() instanceof Error)
          arktest.assertTrue(v instanceof Error)

    - decl: |-
          class A {
            s: number[] = [1.0, 2.0, 3.0]
            foo() {  // infer number[]
                return this.s
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertTrue(v instanceof number[] && v.length == 3)

    - decl: |-
          class A {
            s: Boolean[] = new Boolean[0]
            foo() {  // infer Boolean[]
                return this.s
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertTrue(v instanceof Boolean[] && v.length == 0)

    - decl: |-
          class A {
            s: Long[][] = new Long[1][1]
            foo() {  // infer Long[][]
                if (this.s != null)
                    return this.s
                else
                    return new Long[2][2]
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertTrue(new A().foo() instanceof Long[][])

    - decl: |-
          class A {
            s: long[][] = new long[1][1]
            foo() {  // infer Error[][]|long[][]
                if (this.s != null)
                    return this.s
                else
                    return new Error[1][1]
            }
          }
      call: |-
          let a = new A()
          let v = a.foo() as long[][]
          v[0][0] = 0
          arktest.assertEQ(v[0][0], 0)

    - decl: |-
          class A {
            s: Long[][] = new Long[1][1]
            foo() {  // infer Error[]|Long[][]
                if (this.s == null)
                    return this.s
                else
                    return new Error[1]
            }
          }
      call: |-
          let a = new A()
          let v = a.foo() as Error[]
          arktest.assertEQ(v.length, 1)

    - decl: |-
          class A {
            s: Long[][] | null = new Long[1][1]
            foo() {  // infer Error|Long[][]
                if (this.s != null)
                    return this.s
                else
                    return new Error()
            }
          }
      call: |-
          let a = new A()
          let v = a.foo()
          arktest.assertTrue(v instanceof Object)

    - decl: |-
          class A {}
          class B extends A {}
          class C extends A {}
          type TypeB = B
          type TypeC = C

          class D {
            s = 1
            foo() {  // infer A
                if (this.s == 0)
                    return new TypeB()
                else
                    return new TypeC()
            }
          }
      call: |-
          let v: A = new D().foo()
          arktest.assertTrue(v instanceof A)
          arktest.assertTrue(new D().foo() instanceof A)

    - decl: |-
          class A {}
          class B extends A {}
          class C extends B {}
          class D extends B {}
          
          class E {
            s = 1
            foo() {  // infer B
                if (this.s == 0)
                    return new C()
                else
                    return new D()
            }
          }
      call: |-
          let v: B[] = new B[1]
          v[0] = new E().foo()
          arktest.assertTrue(new E().foo() instanceof D)
          arktest.assertTrue(v[0] instanceof D)

    - decl: |-
          class A {
            s = 0
            async foo() {  // infer Promise<Boolean>
                if (this.s == 0)
                    return new Boolean(true)
                else
                    return new Boolean(false)
            }
          }
      call: |-
          let v: Promise<Boolean> = new A().foo()
          arktest.assertTrue(v instanceof Promise)
          arktest.assertTrue(new A().foo() instanceof Promise)

    - decl: |-
          class A {
            s = new Object()
            foo() {    // infer boolean|boolean[]
                if (this.s != null)
                    return true
                else
                    return [true]
            }
          }
      call: |-
          let v = new A().foo()
          arktest.assertTrue(v instanceof boolean|boolean[])

    - decl: |-
          class B<T, U> {}
          class A {
            s = 1
            foo<T>() {  // infer  B<T, Long|Error>
                if (this.s == 0)
                    return new B<T, Long>()
                else
                    return new B<T, Error>()
            }
          }
      call: |-
          let v = new A().foo<Boolean>()
          arktest.assertTrue(v instanceof B<Boolean, Error>)

    - decl: |-
          class A {
            foo() {  // infer void
                return this
            }
          }
      call: |-
          let a = new A()
          arktest.assertTrue(a.foo() instanceof A)

    #static
    - decl: |-
          class A {
            static i = 0
            static foo() {  // infer void
                A.i = 1
            }
          }
      call: |-
          A.foo()
          arktest.assertEQ(A.i, 1)

    - decl: |-
          class A {
            static i = 0
            static foo() {  // infer void
                A.i = 1
                return
            }
          }
      call: |-
          A.foo()
          arktest.assertEQ(A.i, 1)

    - decl: |-
          class A {
            static foo() {  // infer string
                let s = "foo"
                return s
            }
          }
      call: |-
          arktest.assertEQ(A.foo(), "foo")

    - decl: |-
          class A {
            static foo() {  // infer number
                let s: number = 1.0
                return s
            }
          }
      call: |-
          arktest.assertEQ(A.foo(), 1.0)

    - decl: |-
          class A {
            static foo() {  // infer Error
                let s = new Error()
                return s
            }
          }
      call: |-
          arktest.assertTrue(A.foo() instanceof Error)

    - decl: |-
          class A {
            static foo() {  // infer number[]
                let s: number[] = [1.0, 2.0, 3.0]
                return s
            }
          }
      call: |-
          let v = A.foo()
          arktest.assertTrue(v instanceof number[] && v.length == 3)

    - decl: |-
          class A {
            static foo() {  // infer Boolean[]
                let s: Boolean[] = new Boolean[0]
                return s
            }
          }
      call: |-
          let v = A.foo()
          arktest.assertTrue(v instanceof Boolean[] && v.length == 0)

    - decl: |-
          class A {
            static foo() {  // infer Long[][]
                let s: Long[][] = new Long[1][1]
                if (s != null)
                    return s
                else
                    return new Long[2][2]
            }
          }
      call: |-
          arktest.assertTrue(A.foo() instanceof Long[][])

    - decl: |-
          class A {
            static foo() {  // infer Error[][]|long[][]
                let s: long[][] = new long[1][1]
                if (s != null)
                    return s
                else
                    return new Error[1][1]
            }
          }
      call: |-
          let v = A.foo() as long[][]
          v[0][0] = 0
          arktest.assertEQ(v[0][0], 0)

    - decl: |-
          class A {
            static foo() {  // infer Error[]|Long[][]
                let s: Long[][] = new Long[1][1]
                if (s == null)
                    return s
                else
                    return new Error[1]
            }
          }
      call: |-
          let v = A.foo() as Error[]
          arktest.assertEQ(v.length, 1)

    - decl: |-
          class A {
            static foo() {  // infer Error|Long[][]
                let s: Long[][] | null = new Long[1][1]
                if (s != null)
                    return s
                else
                    return new Error()
            }
          }
      call: |-
          let v = A.foo()
          arktest.assertTrue(v instanceof Object)

    - decl: |-
          class A {}
          class B extends A {}
          class C extends A {}
          type TypeB = B
          type TypeC = C

          class D {
            static foo() {  // infer A
                let s = 1
                if (s == 0)
                    return new TypeB()
                else
                    return new TypeC()
            }
          }
      call: |-
          let v: A = D.foo()
          arktest.assertTrue(v instanceof A)

    - decl: |-
          class A {}
          class B extends A {}
          class C extends B {}
          class D extends B {}
          
          class E {
            static foo() {  // infer B
                let s = 1
                if (s == 0)
                    return new C()
                else
                    return new D()
            }
          }
      call: |-
          let v: B[] = new B[1]
          v[0] = E.foo()
          arktest.assertTrue(v[0] instanceof D)

    - decl: |-
          class A {
           static foo() {    // infer boolean|boolean[]
                let s = new Object()
                if (s != null)
                    return true
                else
                    return [true]
            }
          }
      call: |-
          let v = A.foo()
          arktest.assertTrue(v instanceof boolean|boolean[])

    - decl: |-
          class B<T, U> {}
          class A {
            static foo<T>() {  // infer  B<T, Long|Error>
                let s = 1
                if (s == 0)
                    return new B<T, Long>()
                else
                    return new B<T, Error>()
            }
          }
      call: |-
          let v = A.foo<Boolean>()
          arktest.assertTrue(v instanceof B<Boolean, Error>)
