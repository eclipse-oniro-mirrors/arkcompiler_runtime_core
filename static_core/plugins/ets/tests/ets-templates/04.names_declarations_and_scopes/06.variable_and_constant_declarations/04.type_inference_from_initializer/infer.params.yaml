# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - decl: "let arr = new Object[1];  // inferred array of Objects"
    use: " arr[0] = new Object();"
    assert: arr[0] instanceof Object

  - decl: "let arr = new (Error|undefined)[1];  // inferred array of Error|undefined"
    assert: arr[0] == undefined

  - decl: "let arr:FixedArray<FixedArray<FixedArray<byte>>> = new byte[1][2][3];  // inferred three-dimensional array of bytes"
    assert: arr instanceof FixedArray<FixedArray<FixedArray<byte>>> && arr[0][0][0] == 0

  - decl: |-
      enum Color { Red, Green, Blue }
      let c = Color.Red;  // inferred enum type
      let d: Color = c;
    assert: c == d

  - decl: |-
      class A {}
      class B extends A {}
      let a = new A();  // inferred type A
      const b = new B();  // inferred type B
    use: a = b;
    assert: a instanceof A && b instanceof B && a === b

  - decl: let myV = undefined
    assert: typeof myV == "undefined"

  - decl: let myV = true
    assert: typeof myV == "boolean"

  - decl: let myV = "true"
    assert: typeof myV == "string"

  - files: './impl/case_1.ets'
    decl: import { myC } from './decl/case_1'
    assert: typeof myC == "number" && myC == 10

  - files: './impl/case_2.ets'
    decl: import { myC } from './decl/case_2'
    assert: typeof myC == "number" && myC == 20.0

  - files: './impl/case_3.ets'
    decl: import { myC } from './decl/case_3'
    assert: typeof myC == "string" && myC == "11"

  - files: './impl/case_4.ets'
    decl: import { myC } from './decl/case_4'
    assert: typeof myC == "string" && myC == "implementation string"
