# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

# specific types: literal, tuple, array, function, FixedArray, array[] etc.
# inferred and with type annotation, initialized with a value and with undefined
# initialized directly or via variable
cases:
  # literal
  - initializer: '"aa"'
    expected_type: literal

  - type_annotation: ': literal'
    initializer: '"aa"'
    expected_type: literal

  - type_annotation: ': literal'
    initializer: undefined
    expected_type: undefined

  - decl: |-
      let value: literal = "aa"
    initializer: value
    expected_type: literal

  - decl: |-
      let value: literal = "aa"
    type_annotation: ': literal'
    initializer: value
    expected_type: literal

  - decl: |-
      let value: undefined = undefined
    type_annotation: ': literal'
    initializer: value
    expected_type: undefined

  # tuple
  - initializer: '["aa", 1]'
    retrieve: '[0]'
    expected_type: literal

  - type_annotation: ': tuple2'
    initializer: '[["aa", 1], 1]'
    retrieve: '[0][0]'
    expected_type: literal

  - type_annotation: ': tuple2'
    initializer: undefined
    expected_type: undefined

  - decl: |-
      let value: tuple2 = [["aa", 1], 1]
    retrieve: '[0][0]'
    initializer: value
    expected_type: literal

  - decl: |-
      let value: tuple2 = [["aa", 1], 1]
    type_annotation: ': tuple2'
    retrieve: '[0][0]'
    initializer: value
    expected_type: literal

  - decl: |-
      let value: undefined = undefined
    type_annotation: ': tuple2'
    initializer: value
    expected_type: undefined

  # function
  - initializer: foo
    expected_type: fooType

  - type_annotation: ': fooType'
    initializer: foo
    expected_type: fooType

  - type_annotation: ': fooType'
    initializer: undefined
    expected_type: undefined

  - decl: |-
      let value: fooType = foo
    initializer: value
    expected_type: fooType

  - decl: |-
      let value: fooType = foo
    type_annotation: ': fooType'
    initializer: value
    expected_type: fooType

  - decl: |-
      let value: undefined = undefined
    type_annotation: ': fooType'
    initializer: value
    expected_type: undefined

  # FixedArray
  - initializer: '[["aa", 1]]'
    retrieve: '[0][0]'
    expected_type: literal

  - type_annotation: ': fixed_array'
    initializer: '[["aa", 1]]'
    retrieve: '[0][0]'
    expected_type: literal

  - type_annotation: ': fixed_array'
    initializer: undefined
    expected_type: undefined

  - decl: |-
      let value: fixed_array = [["aa", 1]]
    retrieve: '[0][0]'
    initializer: value
    expected_type: literal

  - decl: |-
      let value: fixed_array = [["aa", 1]]
    type_annotation: ': fixed_array'
    retrieve: '[0][0]'
    initializer: value
    expected_type: literal

  - decl: |-
      let value: undefined = undefined
    type_annotation: ': fixed_array'
    initializer: value
    expected_type: undefined

  # array[]
  - type_annotation: ': array'
    initializer: '[["aa", 1]]'
    retrieve: '[0][0]'
    expected_type: literal

  - type_annotation: ': array'
    initializer: undefined
    expected_type: undefined

  - decl: |-
      let value: array = [["aa", 1]]
    retrieve: '[0][0]'
    initializer: value
    expected_type: literal

  - decl: |-
      let value: array = [["aa", 1]]
    type_annotation: ': array'
    retrieve: '[0][0]'
    initializer: value
    expected_type: literal

  - decl: |-
      let value: undefined = undefined
    type_annotation: ': array'
    initializer: value
    expected_type: undefined
