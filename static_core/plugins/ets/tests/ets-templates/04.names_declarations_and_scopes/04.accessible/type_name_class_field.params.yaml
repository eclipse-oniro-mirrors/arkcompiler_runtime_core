# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # Primitives
  - decl: |-
        type T = byte;
    field: |-
        foo: T = 0x80.toByte();
        static sfoo: T = 0x79.toByte();
    check: |-
        function main() {
            arktest.assertEQ(A.sfoo, 0x79.toByte());
            let a: A = new A();
            arktest.assertEQ(a.foo, 0x80.toByte());
            arktest.assertEQ(a.bar(A.sfoo), 0x79.toByte());
            arktest.assertEQ(A.sbar(a.foo), 0x80.toByte());
        }

  - decl: |-
        type T = short;
    field: |-
        foo: T = 0x7FFF.toShort();
        static sfoo: T = 0x7FFF.toShort();
    check: |-
        function main() {
            arktest.assertEQ(A.sfoo, 0x7FFF.toShort());
            let a: A = new A();
            arktest.assertEQ(a.foo, 0x7FFF.toShort());
            arktest.assertEQ(a.bar(a.foo), 0x7FFF.toShort());
            arktest.assertEQ(A.sbar(a.foo), 0x7FFF.toShort());
        }

  - decl: |-
        type T = int
    field: |-
        foo: T = new Int(127);
        static sfoo: T = new Int(127);
    check: |-
        function main() {
            arktest.assertEQ(A.sfoo, new Int(127));
            let a: A = new A();
            arktest.assertEQ(a.foo, new Int(127));
            arktest.assertEQ(a.bar(a.foo), new Int(127));
            arktest.assertEQ(A.sbar(a.foo), new Int(127));
        }

  - decl: |-
        type T = long
    field: |-
        foo: T = new Long(127);
        static sfoo: T = new Long(127);
    check: |-
        function main() {
            arktest.assertEQ(A.sfoo, new Long(127));
            let a: A = new A();
            arktest.assertEQ(a.foo, new Long(127));
            arktest.assertEQ(a.bar(a.foo), new Long(127));
            arktest.assertEQ(A.sbar(a.foo), new Long(127));
        }

  - decl: |-
        type T = float
    field: |-
        foo: T = new Float(+0.0);
        static sfoo: T = new Float(+0.0);
    check: |-
        function main() {
            arktest.assertEQ(A.sfoo, new Float(+0.0));
            let a: A = new A();
            arktest.assertEQ(a.foo, new Float(+0.0));
            arktest.assertEQ(a.bar(a.foo), new Float(+0.0));
            arktest.assertEQ(A.sbar(a.foo), new Float(+0.0));
        }

  - decl: |-
        type T = double
    field: |-
        foo: T = new Double(+0.0);
        static sfoo: T = new Double(+0.0);
    check: |-
        function main() {
            arktest.assertEQ(A.sfoo, new Double(+0.0));
            let a: A = new A();
            arktest.assertEQ(a.foo, new Double(+0.0));
            arktest.assertEQ(a.bar(a.foo), new Double(+0.0));
            arktest.assertEQ(A.sbar(a.foo), new Double(+0.0));
        }

  - decl: |-
        type T = number
    field: |-
        foo: T = +0.0 as number;
        static sfoo: T = +0.0 as number;
    check: |-
        function main() {
            arktest.assertEQ(A.sfoo, +0.0 as number);
            let a: A = new A();
            arktest.assertEQ(a.foo, +0.0 as number);
            arktest.assertEQ(a.bar(a.foo), +0.0 as number);
            arktest.assertEQ(A.sbar(a.foo), +0.0 as number);
        }

  - decl: |-
        type T = char
    field: |-
        foo: T = c'a';
        static sfoo: T = c'a';
    check: |-
        function main() {
            arktest.assertEQ(A.sfoo, c'a');
            let a: A = new A();
            arktest.assertEQ(a.foo, c'a');
            arktest.assertEQ(a.bar(a.foo), c'a');
            arktest.assertEQ(A.sbar(a.foo), c'a');
        }

  - decl: |-
        type T = boolean
    field: |-
        foo: T = false;
        static sfoo: T = false;
    check: |-
        function main() {
            arktest.assertEQ(A.sfoo, false);
            let a: A = new A();
            arktest.assertEQ(a.foo, false);
            arktest.assertEQ(a.bar(a.foo), false);
            arktest.assertEQ(A.sbar(a.foo), false);
        }

  # Boxed
  - decl: |-
        type T = string
    field: |-
        foo: T = "some string";
        static sfoo: T = "some string";
    check: |-
        function main() {
            arktest.assertEQ(A.sfoo, "some string");
            let a: A = new A();
            arktest.assertEQ(a.foo, "some string");
            arktest.assertEQ(a.bar(a.foo), "some string");
            arktest.assertEQ(A.sbar(a.foo), "some string");
        }

  - decl: |-
        type T = String
    field: |-
        foo: T = new String("some string");
        static sfoo: T = new String("some string");
    check: |-
        function main() {
            arktest.assertEQ(A.sfoo, "some string");
            let a: A = new A();
            arktest.assertEQ(a.foo, "some string");
            arktest.assertEQ(a.bar(a.foo), "some string");
            arktest.assertEQ(A.sbar(a.foo), "some string");
        }

    # Custom
  - decl: |-
      type T = int[]
    field: |-
      foo: T = [1, -2];
      static sfoo: T = [2, -3];
    check: |-
      function main() {
          arktest.assertEQ(A.sfoo.length, 2);
          arktest.assertEQ(A.sfoo[0], 2);
          arktest.assertEQ(A.sfoo[1], -3);
          let a: A = new A();
          arktest.assertEQ(a.foo.length, 2);
          arktest.assertEQ(a.foo[0], 1);
          arktest.assertEQ(a.foo[1], -2);
          arktest.assertEQ(a.bar(A.sfoo).length, 2);
          arktest.assertEQ(a.bar(A.sfoo)[0], 2);
          arktest.assertEQ(a.bar(A.sfoo)[1], -3);
          arktest.assertEQ(A.sbar(a.foo).length, 2);
          arktest.assertEQ(A.sbar(a.foo)[0], 1);
          arktest.assertEQ(A.sbar(a.foo)[1], -2);
      }

  - decl: |-
      type T = Int[][]
    field: |-
      foo: T = [[new Int(1)], [new Int(-2), new Int(3)]];
      static sfoo: T = [[new Int(2), new Int(4)], [new Int(-5)]];
    check: |-
      function main() {
          arktest.assertEQ(A.sfoo.length, 2);
          arktest.assertEQ(A.sfoo[0].length, 2);
          arktest.assertEQ(A.sfoo[1].length, 1);
          arktest.assertEQ(A.sfoo[0][0], 2);
          arktest.assertEQ(A.sfoo[0][1], 4);
          arktest.assertEQ(A.sfoo[1][0], -5);
          let a: A = new A();

          arktest.assertEQ(a.foo.length, 2);
          arktest.assertEQ(a.foo[0].length, 1);
          arktest.assertEQ(a.foo[1].length, 2);
          arktest.assertEQ(a.foo[0][0], 1);
          arktest.assertEQ(a.foo[1][0], -2);
          arktest.assertEQ(a.foo[1][1], 3);

          arktest.assertEQ(a.bar(A.sfoo).length, 2);
          arktest.assertEQ(a.bar(A.sfoo)[0].length, 2);
          arktest.assertEQ(a.bar(A.sfoo)[1].length, 1);
          arktest.assertEQ(a.bar(A.sfoo)[0][0], 2);
          arktest.assertEQ(a.bar(A.sfoo)[0][1], 4);
          arktest.assertEQ(a.bar(A.sfoo)[1][0], -5);

          arktest.assertEQ(A.sbar(a.foo).length, 2);
          arktest.assertEQ(A.sbar(a.foo)[0].length, 1);
          arktest.assertEQ(A.sbar(a.foo)[1].length, 2);
          arktest.assertEQ(A.sbar(a.foo)[0][0], 1);
          arktest.assertEQ(A.sbar(a.foo)[1][0], -2);
          arktest.assertEQ(A.sbar(a.foo)[1][1], 3);
      }

  - decl: |-
      enum Colors {Red, Blue=3}
      type T = Colors
    field: |-
      foo: T = Colors.Blue;
      static sfoo: T = Colors.Red;
    check: |-
      function main() {
          arktest.assertEQ(A.sfoo, Colors.Red);
          let a: A = new A();
          arktest.assertEQ(a.foo, Colors.Blue);
          arktest.assertEQ(a.bar(A.sfoo), Colors.Red);
          arktest.assertEQ(A.sbar(a.foo), Colors.Blue);
      }

  - decl: |-
      type T = [string, number]
      type S = [number, string]
    field: |-
      foo: T = ["str", 1.4];
      static sfoo: S = [4.1, "rts"];
      bar2(i: S): S {
          return i;
      }
    check: |-
      function main() {
          arktest.assertEQ(A.sfoo[0], 4.1);
          arktest.assertEQ(A.sfoo[1], "rts");
          let a: A = new A();
          arktest.assertEQ(a.foo[0], "str");
          arktest.assertEQ(a.foo[1], 1.4);
          arktest.assertEQ(a.bar2(A.sfoo)[0], 4.1);
          arktest.assertEQ(a.bar2(A.sfoo)[1], "rts");
          arktest.assertEQ(A.sbar(a.foo)[0], "str");
          arktest.assertEQ(A.sbar(a.foo)[1], 1.4);
      }
