# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # Primitives
  - decl: |-
      type T = byte;
    init: |-
      foo = 0x80.toByte();
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo, 0x80.toByte());
          arktest.assertEQ(a.bar(a.foo), 0x80.toByte());
      }

  - decl: |-
      type T = short;
    init: |-
      foo = 0x7FFF.toShort();
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo, 0x7FFF.toShort());
          arktest.assertEQ(a.bar(a.foo), 0x7FFF.toShort());
      }

  - decl: |-
      type T = int
    init: |-
      foo = new Int(127);
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo, new Int(127));
          arktest.assertEQ(a.bar(a.foo), new Int(127));
      }

  - decl: |-
      type T = long
    init: |-
      foo = new Long(127);
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo, new Long(127));
          arktest.assertEQ(a.bar(a.foo), new Long(127));
      }

  - decl: |-
      type T = float
    init: |-
      foo = new Float(+0.0);
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo, new Float(+0.0));
          arktest.assertEQ(a.bar(a.foo), new Float(+0.0));
      }

  - decl: |-
      type T = double
    init: |-
      foo = new Double(+0.0);
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo, new Double(+0.0));
          arktest.assertEQ(a.bar(a.foo), new Double(+0.0));
      }

  - decl: |-
      type T = number
    init: |-
      foo = +0.0 as number;
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo, +0.0 as number);
          arktest.assertEQ(a.bar(a.foo), +0.0 as number);
      }

  - decl: |-
      type T = char
    init: |-
      foo = c'a';
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo, c'a');
          arktest.assertEQ(a.bar(a.foo), c'a');
      }

  - decl: |-
      type T = boolean
    init: |-
      foo = false;
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo, false);
          arktest.assertEQ(a.bar(a.foo), false);
      }

  # Boxed
  - decl: |-
      type T = Byte
    init: |-
      foo = new Byte(0x7F.toByte());
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo.unboxed(), 0x7F.toByte());
          arktest.assertEQ(a.bar(a.foo).unboxed(), 0x7F.toByte());
      }

  - decl: |-
      type T = Short
    init: |-
      foo = new Short(2);
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo.unboxed(), new Short(2));
          arktest.assertEQ(a.bar(a.foo).unboxed(), new Short(2));
      }

  - decl: |-
      type T = Int
    init: |-
      foo = new Int(3);
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo.unboxed(), new Int(3));
          arktest.assertEQ(a.bar(a.foo).unboxed(), new Int(3));
      }

  - decl: |-
      type T = Long
    init: |-
      foo = new Long(4);
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo.unboxed(), new Long(4));
          arktest.assertEQ(a.bar(a.foo).unboxed(), new Long(4));
      }

  - decl: |-
      type T = Float
    init: |-
      foo = new Float(0.1);
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo.unboxed(), new Float(0.1));
          arktest.assertEQ(a.bar(a.foo).unboxed(), new Float(0.1));
      }

  - decl: |-
      type T = Double
    init: |-
      foo = new Double(0.1);
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo.unboxed(), new Double(0.1));
          arktest.assertEQ(a.bar(a.foo).unboxed(), new Double(0.1));
      }

  - decl: |-
      type T = Number
    init: |-
      foo = new Number(0.1 as number);
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo.unboxed(), 0.1 as number);
          arktest.assertEQ(a.bar(a.foo).unboxed(), 0.1 as number);
      }

  - decl: |-
      type T = Char
    init: |-
      foo = new Char(c'b');
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo.unboxed(), c'b');
          arktest.assertEQ(a.bar(a.foo).unboxed(), c'b');
      }

  - decl: |-
      type T = string
    init: |-
      foo = "some string";
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo, "some string");
          arktest.assertEQ(a.bar(a.foo), "some string");
      }

  - decl: |-
      type T = String
    init: |-
      foo = new String("some string");
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo, "some string");
          arktest.assertEQ(a.bar(a.foo), "some string");
      }

  - decl: |-
      type T = Boolean
    init: |-
      foo = new Boolean(false);
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo.unboxed(), false);
          arktest.assertEQ(a.bar(a.foo).unboxed(), false);
      }

    # Custom
  - decl: |-
      type T = int[]
    tags: 'compile-only, negative'
    init: |-
      foo = [1, -2];
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo.length, 2);
          arktest.assertEQ(a.foo[0], 1);
          arktest.assertEQ(a.foo[1], -2);
          let c = a.bar(a.foo);
          arktest.assertEQ(a.foo.length, c.length);
          arktest.assertEQ(a.foo[0], c[0]);
          arktest.assertEQ(a.foo[1], c[1]);
      }

  - decl: |-
      type T = Int[][]
    init: |-
      foo = [[new Int(1), new Int(3)], [new Int(-2)]];
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo.length, 2);
          arktest.assertEQ(a.foo[0].length, 2);
          arktest.assertEQ(a.foo[1].length, 1);
          arktest.assertEQ(a.foo[0][0].unboxed(), 1);
          arktest.assertEQ(a.foo[0][1].unboxed(), 3);
          arktest.assertEQ(a.foo[1][0].unboxed(), -2);
          let c = a.bar(a.foo);
          arktest.assertEQ(a.foo.length, c.length);
          arktest.assertEQ(a.foo[0].length, c[0].length);
          arktest.assertEQ(a.foo[1].length, c[1].length);
          arktest.assertEQ(a.foo[0][0].unboxed(), c[0][0].unboxed());
          arktest.assertEQ(a.foo[0][1].unboxed(), c[0][1].unboxed());
          arktest.assertEQ(a.foo[1][0].unboxed(), c[1][0].unboxed());
      }

  - decl: |-
      enum Colors {Red, Blue=3}
      type T = Colors
    init: |-
      foo = Colors.Blue;
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertEQ(a.foo, Colors.Blue);
          arktest.assertEQ(a.bar(a.foo), Colors.Blue);
      }

  - decl: |-
      type T = [string, number]
    init: |-
      foo: T = ["str", 1.4];
    check: |-
      function main() {
          let a: A = new A();
          arktest.assertTrue(a.foo instanceof T);
          arktest.assertEQ(a.foo[0], "str");
          arktest.assertEQ(a.foo[1], 1.4);
          let b = a.bar(a.foo);
          arktest.assertEQ(a.foo, b)
          arktest.assertEQ(a.foo[0], b[0]);
          arktest.assertEQ(a.foo[1], b[1]);
      }
