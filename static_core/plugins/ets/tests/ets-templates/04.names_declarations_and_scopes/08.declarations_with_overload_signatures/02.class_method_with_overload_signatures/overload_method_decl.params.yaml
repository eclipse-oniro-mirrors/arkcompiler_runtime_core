# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
global_tests_data:
  access_modifiers:
    - ""
    - "public"
    - "private"
    - "protected"
    - "internal"
  method_modifiers:
    - ""
    - "static"
    - "final"
  overload_method_return_types: !!set
    ? void
    ? any
    ? mixed
  global_decl_data: |-
    class Base[class_type_parameters] {
      args: Any[]
      constructor(...args: Any[]) {
        this.args = args
      }
      [overload_method_data]
      [modifiers_test_class_data]
    }
    [modifiers_decl_data]
  modifiers_test_class_data:
    return_type_any:
      private: |-
        call(...args: Any[]): Any {
          return this.foo(...args)
        }
      private_static: |-
        static call(...args: Any[]): Any {
          return Base.foo(...args)
        }
    return_type_void:
      private: |-
        call(...args: Any[]): void {
          this.foo(...args)
        }
      private_static: |-
        static call(...args: Any[]): void {
          Base.foo(...args)
        }
  modifiers_decl_data:
    return_type_any:
      protected: |-
        class Derived[class_type_parameters] extends Base[class_type_parameters] {
          constructor(...args: Any[]) {
            super(...args)
          }
          call(...args: Any[]): Any {
            return this.foo(...args)
          }
        }
      protected_static: |-
        class Derived[class_type_parameters] extends Base[class_type_parameters] {
          constructor(...args: Any[]) {
            super(...args)
          }
          static call(...args: Any[]): Any {
            return Derived.foo(...args)
          }
        }
    return_type_void:
      protected: |-
        class Derived[class_type_parameters] extends Base[class_type_parameters] {
          constructor(...args: Any[]) {
            super(...args)
          }
          call(...args: Any[]): void {
            this.foo(...args)
          }
        }
      protected_static: |-
        class Derived[class_type_parameters] extends Base[class_type_parameters] {
          constructor(...args: Any[]) {
            super(...args)
          }
          static call(...args: Any[]): void {
            Derived.foo(...args)
          }
        }
  call_class:
    public: Base
    private: Base
    protected: Derived
  call_function:
    public: foo
    private: call
    protected: call

tests_data:
  - decl_data: ""
    class_type_parameters: ""
    overload_method_data:
      return_type: void
      default: |-
        [access_modifier] [method_modifier] foo(): void
        [access_modifier] [method_modifier] foo(x: string): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          arktest.assertEQ(args.length, 0)
        }
      static: |-
        [access_modifier] [method_modifier] foo(): void
        [access_modifier] [method_modifier] foo(x: string): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          arktest.assertEQ(args.length, 0)
        }
    call_data:
      default: |-
        let a = new [call_class]()
        a.[call_function]()
      static: |-
        [call_class].[call_function]()

  - decl_data: ""
    class_type_parameters: ""
    overload_method_data:
      return_type: void
      default: |-
        [access_modifier] [method_modifier] foo(): void
        [access_modifier] [method_modifier] foo(x: string): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          arktest.assertEQ(args.length, 1)
          arktest.assertTrue(args[0] instanceof string)
          arktest.assertTrue(this.args[0] instanceof string)
          arktest.assertEQ((args[0] as string) + this.args[0], "abcd")
        }
      static: |-
        [access_modifier] [method_modifier] foo(): void
        [access_modifier] [method_modifier] foo(x: string): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          arktest.assertEQ(args.length, 1)
          arktest.assertTrue(args[0] instanceof string)
          arktest.assertEQ(args[0], "abcd")
        }
    call_data:
      default: |-
        let a = new [call_class]("d")
        a.[call_function]("abc")
      static: |-
        [call_class].[call_function]("abcd")

  - decl_data: ""
    class_type_parameters: ""
    overload_method_data:
      return_type: void
      default: |-
        [access_modifier] [method_modifier] foo(x: string): void
        [access_modifier] [method_modifier] foo(x: int): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof int) {
            arktest.assertTrue(this.args[0] instanceof int)
            arktest.assertEQ(arg0 + this.args[0], 321)
          } else {
            arktest.assertTrue(arg0 instanceof string)
            arktest.assertTrue(this.args[1] instanceof string)
            arktest.assertEQ((arg0 as string) + this.args[1], "abcd")
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: string): void
        [access_modifier] [method_modifier] foo(x: int): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          if (args[0] instanceof int) {
            arktest.assertEQ(args[0], 321)
          } else {
            arktest.assertTrue(args[0] instanceof string)
            arktest.assertEQ(args[0], "abcd")
          }
        }
    call_data:
      default: |-
        let a = new [call_class](100, "d")
        a.[call_function](221)
        a.[call_function]("abc")
      static: |-
        [call_class].[call_function](321)
        [call_class].[call_function]("abcd")

  - decl_data: ""
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(x: string): boolean
        [access_modifier] [method_modifier] foo(y: int): boolean
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof int) {
            arktest.assertTrue(this.args[0] instanceof int)
            arktest.assertEQ(arg0 + this.args[0], 231)
            return true
          } else {
            arktest.assertTrue(arg0 instanceof string)
            arktest.assertTrue(this.args[1] instanceof string)
            arktest.assertEQ((arg0 as string) + this.args[1], "efg")
            return false
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: string): boolean
        [access_modifier] [method_modifier] foo(y: int): boolean
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          if (args[0] instanceof int) {
            arktest.assertEQ(args[0], 231)
            return true
          } else {
            arktest.assertTrue(args[0] instanceof string)
            arktest.assertEQ(args[0], "efg")
            return false
          }
        }
    call_data:
      default: |-
        let a = new [call_class](100, "g")
        let res_num = a.[call_function](131)
        let res_str = a.[call_function]("ef")
        arktest.assertTrue(res_num instanceof boolean)
        arktest.assertEQ(res_num, true)
        arktest.assertTrue(res_str instanceof boolean)
        arktest.assertEQ(res_str, false)
      static: |-
        let res_num = [call_class].[call_function](231)
        let res_str = [call_class].[call_function]("efg")
        arktest.assertTrue(res_num instanceof boolean)
        arktest.assertEQ(res_num, true)
        arktest.assertTrue(res_str instanceof boolean)
        arktest.assertEQ(res_str, false)

  - decl_data: ""
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(x: string): int
        [access_modifier] [method_modifier] foo(y: string): string
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          arktest.assertTrue(args[0] instanceof string)
          if ((args[0] as string) == "abc") {
            return (this.args[0] as int) + 23
          } else {
            arktest.assertEQ(args[0], "efg")
            return "321"
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: string): int
        [access_modifier] [method_modifier] foo(y: string): string
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          arktest.assertTrue(args[0] instanceof string)
          if (args[0] == "abc") {
            return 123
          } else {
            arktest.assertEQ(args[0], "efg")
            return "321"
          }
        }
    call_data:
      default: |-
        let a = new [call_class](100)
        let res1 = a.[call_function]("abc")
        let res2 = a.[call_function]("efg")
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 123)
        arktest.assertTrue(res2 instanceof string)
        arktest.assertEQ(res2, "321")
      static: |-
        let res1 = [call_class].[call_function]("abc")
        let res2 = [call_class].[call_function]("efg")
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 123)
        arktest.assertTrue(res2 instanceof string)
        arktest.assertEQ(res2, "321")

  - decl_data: |-
      enum Results {Str, Num}
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(x: string): Results
        [access_modifier] [method_modifier] foo(x: int): Results
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof int) {
            arktest.assertTrue(this.args[0] instanceof int)
            arktest.assertEQ(arg0 + this.args[0], 123)
            return Results.Num
          } else {
            arktest.assertTrue(arg0 instanceof string)
            arktest.assertTrue(this.args[1] instanceof string)
            arktest.assertEQ((arg0 as string) + this.args[1], "defg")
            return Results.Str
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: string): Results
        [access_modifier] [method_modifier] foo(x: int): Results
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          if (args[0] instanceof int) {
            arktest.assertEQ(args[0], 123)
            return Results.Num
          } else {
            arktest.assertTrue(args[0] instanceof string)
            arktest.assertEQ(args[0], "defg")
            return Results.Str
          }
        }
    call_data:
      default: |-
        let a = new [call_class](100, "fg")
        let res_num = a.[call_function](23)
        let res_str = a.[call_function]("de")
        arktest.assertTrue(res_num instanceof Results)
        arktest.assertEQ(res_num, Results.Num)
        arktest.assertTrue(res_str instanceof Results)
        arktest.assertEQ(res_str, Results.Str)
      static: |-
        let res_num = [call_class].[call_function](123)
        let res_str = [call_class].[call_function]("defg")
        arktest.assertTrue(res_num instanceof Results)
        arktest.assertEQ(res_num, Results.Num)
        arktest.assertTrue(res_str instanceof Results)
        arktest.assertEQ(res_str, Results.Str)

  - decl_data: ""
    class_type_parameters: ""
    overload_method_data:
      return_type: mixed
      default: |-
        [access_modifier] [method_modifier] foo(x: string): int
        [access_modifier] [method_modifier] foo(x: int): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof int) {
            arktest.assertTrue(this.args[0] instanceof int)
            arktest.assertEQ(arg0 + this.args[0], 123)
          } else {
            arktest.assertTrue(arg0 instanceof string)
            arktest.assertTrue(this.args[1] instanceof string)
            arktest.assertEQ((arg0 as string) + this.args[1], "defg")
            return 567
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: string): int
        [access_modifier] [method_modifier] foo(x: int): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          if (args[0] instanceof int) {
            arktest.assertEQ(args[0], 123)
          } else {
            arktest.assertTrue(args[0] instanceof string)
            arktest.assertEQ(args[0], "defg")
            return 567
          }
        }
    call_data:
      default: |-
        let a = new [call_class](100, "fg")
        a.[call_function](23)
        let res = a.[call_function]("de")
        arktest.assertTrue(res instanceof int)
        arktest.assertEQ(res, 567)
      static: |-
        [call_class].[call_function](123)
        let res = [call_class].[call_function]("defg")
        arktest.assertTrue(res instanceof int)
        arktest.assertEQ(res, 567)

  - decl_data: ""
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(a: int): int
        [access_modifier] [method_modifier] foo(a: int, b: double, c: string): string
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          if (args.length == 1) {
            arktest.assertTrue(args[0] instanceof int)
            arktest.assertTrue(this.args[0] instanceof int)
            arktest.assertEQ((args[0] as int) + this.args[0], 123)
            return 213
          } else {
            arktest.assertEQ(args.length, 3)
            arktest.assertTrue(args[0] instanceof int)
            arktest.assertEQ(args[0], 456)
            arktest.assertTrue(args[1] instanceof double)
            arktest.assertEQ(args[1], 789.0)
            arktest.assertTrue(args[2] instanceof string)
            arktest.assertTrue(this.args[1] instanceof string)
            arktest.assertEQ((args[2] as string) + this.args[1], "321")
            return "312"
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(a: int): int
        [access_modifier] [method_modifier] foo(a: int, b: double, c: string): string
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          if (args.length == 1) {
            arktest.assertTrue(args[0] instanceof int)
            arktest.assertEQ(args[0], 123)
            return 213
          } else {
            arktest.assertEQ(args.length, 3)
            arktest.assertTrue(args[0] instanceof int)
            arktest.assertEQ(args[0], 456)
            arktest.assertTrue(args[1] instanceof double)
            arktest.assertEQ(args[1], 789.0)
            arktest.assertTrue(args[2] instanceof string)
            arktest.assertEQ(args[2], "321")
            return "312"
          }
        }
    call_data:
      default: |-
        let a = new [call_class](100, "1")
        let res_1arg = a.[call_function](23)
        let res_3args = a.[call_function](456, 789.0, "32")
        arktest.assertTrue(res_1arg instanceof int)
        arktest.assertEQ(res_1arg, 213)
        arktest.assertTrue(res_3args instanceof string)
        arktest.assertEQ(res_3args, "312")
      static: |-
        let res_1arg = [call_class].[call_function](123)
        let res_3args = [call_class].[call_function](456, 789.0, "321")
        arktest.assertTrue(res_1arg instanceof int)
        arktest.assertEQ(res_1arg, 213)
        arktest.assertTrue(res_3args instanceof string)
        arktest.assertEQ(res_3args, "312")

  - decl_data: ""
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(x: string): string[]
        [access_modifier] [method_modifier] foo(x: int): boolean
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          arktest.assertTrue(args[0] instanceof string)
          return [(args[0] as string) + this.args[0], "g"]
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: string): string[]
        [access_modifier] [method_modifier] foo(x: int): boolean
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          arktest.assertTrue(args[0] instanceof string)
          return [args[0] as string, "g"]
        }
    call_data:
      default: |-
        let a = new [call_class]("f")
        let res = a.[call_function]("e")
        arktest.assertTrue(res instanceof Array)
        if (res instanceof Array)
        {
          arktest.assertEQ(res.length, 2)
          arktest.assertTrue(res[0] instanceof string)
          arktest.assertEQ(res[0], "ef")
          arktest.assertEQ(res[1], "g")
        }
      static: |-
        let res = [call_class].[call_function]("ef")
        arktest.assertTrue(res instanceof Array)
        if (res instanceof Array)
        {
          arktest.assertEQ(res.length, 2)
          arktest.assertTrue(res[0] instanceof string)
          arktest.assertEQ(res[0], "ef")
          arktest.assertEQ(res[1], "g")
        }

  - decl_data: ""
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(x: string): string[]
        [access_modifier] [method_modifier] foo(x: int): int[]
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof int) {
            let res: int[] = [-1, 5]
            arktest.assertTrue(this.args[0] instanceof int)
            res[0] = arg0 + (this.args[0] as int)
            return res
          } else {
            arktest.assertTrue(arg0 instanceof string)
            let res: string[] = ["123", "def"]
            arktest.assertTrue(this.args[1] instanceof string)
            res[0] = (arg0 as string) + this.args[1]
            return res
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: string): string[]
        [access_modifier] [method_modifier] foo(x: int): int[]
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof int) {
            let res: int[] = [-1, 5]
            res[0] = arg0 + 1
            return res
          } else {
            arktest.assertTrue(arg0 instanceof string)
            let res: string[] = ["123", "def"]
            res[0] = (arg0 as string) + "c"
            return res
          }
        }
    call_data:
      default: |-
        let a = new [call_class](1, "c")
        let res1 = a.[call_function](3)
        arktest.assertTrue(res1 instanceof Array)
        if (res1 instanceof Array)
        {
          arktest.assertEQ(res1.length, 2)
          arktest.assertTrue(res1[0] instanceof int)
          arktest.assertEQ(res1[0], 4)
          arktest.assertEQ(res1[1], 5)
        }
        let res2 = a.[call_function]("ab")
        arktest.assertTrue(res2 instanceof Array)
        if (res2 instanceof Array)
        {
          arktest.assertEQ(res2.length, 2)
          arktest.assertTrue(res2[0] instanceof string)
          arktest.assertEQ(res2[0], "abc")
          arktest.assertEQ(res2[1], "def")
        }
      static: |-
        let res1 = [call_class].[call_function](3)
        arktest.assertTrue(res1 instanceof Array)
        if (res1 instanceof Array)
        {
          arktest.assertEQ(res1.length, 2)
          arktest.assertTrue(res1[0] instanceof int)
          arktest.assertEQ(res1[0], 4)
          arktest.assertEQ(res1[1], 5)
        }
        let res2 = [call_class].[call_function]("ab")
        arktest.assertTrue(res2 instanceof Array)
        if (res2 instanceof Array)
        {
          arktest.assertEQ(res2.length, 2)
          arktest.assertTrue(res2[0] instanceof string)
          arktest.assertEQ(res2[0], "abc")
          arktest.assertEQ(res2[1], "def")
        }

  - decl_data: ""
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(a: int[]): int
        [access_modifier] [method_modifier] foo(a: string):string
        [access_modifier] [method_modifier] foo(a: boolean, b: int): boolean
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof Array) {
            arktest.assertEQ(arg0.length, 2)
            arktest.assertTrue(arg0[0] instanceof int)
            arktest.assertEQ(arg0[0], 321)
            arktest.assertEQ(arg0[1], 476)
            return (this.args[0] as int) + 467
          }
          else if (arg0 instanceof string) {
            arktest.assertEQ(arg0.length, 2)
            arktest.assertEQ(arg0, "ab")
            arktest.assertTrue(this.args[1] instanceof string)
            return arg0 + this.args[1]
          } else {
            arktest.assertTrue(arg0 instanceof boolean)
            arktest.assertTrue(args[1] instanceof int)
            if (arg0 instanceof boolean)
            {
              if (arg0) {
                arktest.assertEQ(args[1], 347)
              } else {
                arktest.assertEQ(args[1], 743)
              }
              return !arg0
            }
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(a: int[]): int
        [access_modifier] [method_modifier] foo(a: string):string
        [access_modifier] [method_modifier] foo(a: boolean, b: int): boolean
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof Array) {
            arktest.assertEQ(arg0.length, 2)
            arktest.assertTrue(arg0[0] instanceof int)
            arktest.assertEQ(arg0[0], 321)
            arktest.assertEQ(arg0[1], 476)
            return 567
          }
          else if (arg0 instanceof string) {
            arktest.assertEQ(arg0.length, 2)
            arktest.assertEQ(arg0, "ab")
            return arg0 + "c"
          } else {
            arktest.assertTrue(arg0 instanceof boolean)
            arktest.assertTrue(args[1] instanceof int)
            if (arg0 instanceof boolean)
            {
              if (arg0) {
                arktest.assertEQ(args[1], 347)
              } else {
                arktest.assertEQ(args[1], 743)
              }
              return !arg0
            }
          }
        }
    call_data:
      default: |-
        let a = new [call_class](100, "c")
        let res1 = a.[call_function]([321, 476])
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 567)
        let res2 = a.[call_function]("ab")
        arktest.assertTrue(res2 instanceof string)
        arktest.assertEQ(res2, "abc")
        let res3 = a.[call_function](true, 347)
        arktest.assertTrue(res3 instanceof boolean)
        arktest.assertEQ(res3, false)
        let res4 = a.[call_function](false, 743)
        arktest.assertTrue(res4 instanceof boolean)
        arktest.assertEQ(res4, true)
      static: |-
        let res1 = [call_class].[call_function]([321, 476])
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 567)
        let res2 = [call_class].[call_function]("ab")
        arktest.assertTrue(res2 instanceof string)
        arktest.assertEQ(res2, "abc")
        let res3 = [call_class].[call_function](true, 347)
        arktest.assertTrue(res3 instanceof boolean)
        arktest.assertEQ(res3, false)
        let res4 = [call_class].[call_function](false, 743)
        arktest.assertTrue(res4 instanceof boolean)
        arktest.assertEQ(res4, true)

  - decl_data: ""
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(x: string, y: int): string
        [access_modifier] [method_modifier] foo(x: int): boolean
        [access_modifier] [method_modifier] foo(x: int | string, boolean): int
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          if (args.length == 2) {
            if (args[1] instanceof boolean) {
              if (args[0] instanceof int) {
                arktest.assertEQ(args[0], 456)
                arktest.assertEQ(args[1], true)
                return 123
              } else {
                arktest.assertTrue(args[0] instanceof string)
                arktest.assertTrue(this.args[0] instanceof string)
                arktest.assertEQ((args[0] as string) + this.args[0], "efg")
                arktest.assertEQ(args[1], false)
                return 321
              }
            } else {
              arktest.assertTrue(args[0] instanceof string)
              arktest.assertTrue(args[1] instanceof int)
              arktest.assertEQ(args[0], "cba")
              arktest.assertEQ(args[1], 789)
              return "abc"
            }
          } else {
            arktest.assertTrue(args[0] instanceof int)
            arktest.assertEQ(args[0], 987)
            return true
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: string, y: int): string
        [access_modifier] [method_modifier] foo(x: int): boolean
        [access_modifier] [method_modifier] foo(x: int | string, boolean): int
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          if (args.length == 2) {
            if (args[1] instanceof boolean) {
              if (args[0] instanceof int) {
                arktest.assertEQ(args[0], 456)
                arktest.assertEQ(args[1], true)
                return 123
              } else {
                arktest.assertTrue(args[0] instanceof string)
                arktest.assertEQ(args[0], "efg")
                arktest.assertEQ(args[1], false)
                return 321
              }
            } else {
              arktest.assertTrue(args[0] instanceof string)
              arktest.assertTrue(args[1] instanceof int)
              arktest.assertEQ(args[0], "cba")
              arktest.assertEQ(args[1], 789)
              return "abc"
            }
          } else {
            arktest.assertTrue(args[0] instanceof int)
            arktest.assertEQ(args[0], 987)
            return true
          }
        }
    call_data:
      default: |-
        let a = new [call_class]("g")
        let res1 = a.[call_function](456, true)
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 123)
        let res2 = a.[call_function]("ef", false)
        arktest.assertTrue(res2 instanceof int)
        arktest.assertEQ(res2, 321)
        let res3 = a.[call_function]("cba", 789)
        arktest.assertTrue(res3 instanceof string)
        arktest.assertEQ(res3, "abc")
        let res4 = a.[call_function](987)
        arktest.assertTrue(res4 instanceof boolean)
        arktest.assertEQ(res4, true)
      static: |-
        let res1 = [call_class].[call_function](456, true)
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 123)
        let res2 = [call_class].[call_function]("efg", false)
        arktest.assertTrue(res2 instanceof int)
        arktest.assertEQ(res2, 321)
        let res3 = [call_class].[call_function]("cba", 789)
        arktest.assertTrue(res3 instanceof string)
        arktest.assertEQ(res3, "abc")
        let res4 = [call_class].[call_function](987)
        arktest.assertTrue(res4 instanceof boolean)
        arktest.assertEQ(res4, true)

  - decl_data: |-
      class A {}
      class B extends A {
        b_method(): int {
          return 123
        }
      }
      class C extends A {
        c_method(): int {
          return 567
        }
      }
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(x: string): string
        [access_modifier] [method_modifier] foo(x: A): int
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof B){
            return arg0.b_method()
          }
          else if (arg0 instanceof C){
            return arg0.c_method()
          } else {
            arktest.assertTrue(arg0 instanceof string)
            arktest.assertTrue(this.args[0] instanceof string)
            return (arg0 as string) + this.args[0]
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: string): string
        [access_modifier] [method_modifier] foo(x: A): int
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof B){
            return arg0.b_method()
          }
          else if (arg0 instanceof C){
            return arg0.c_method()
          } else {
            arktest.assertTrue(arg0 instanceof string)
            return (arg0 as string) + "c"
          }
        }
    call_data:
      default: |-
        let a = new [call_class]("c")
        let res1 = a.[call_function](new B())
        let res2 = a.[call_function](new C())
        let res3 = a.[call_function]("ab")
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 123)
        arktest.assertTrue(res2 instanceof int)
        arktest.assertEQ(res2, 567)
        arktest.assertTrue(res3 instanceof string)
        arktest.assertEQ(res3, "abc")
      static: |-
        let res1 = [call_class].[call_function](new B())
        let res2 = [call_class].[call_function](new C())
        let res3 = [call_class].[call_function]("ab")
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 123)
        arktest.assertTrue(res2 instanceof int)
        arktest.assertEQ(res2, 567)
        arktest.assertTrue(res3 instanceof string)
        arktest.assertEQ(res3, "abc")

  - decl_data: |-
      class A {}
      class B extends A {}
      class C extends A {}
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(x: A): C
        [access_modifier] [method_modifier] foo(x: B): B
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          arktest.assertTrue(this.args[0] instanceof string)
          arktest.assertEQ(this.args[0], "abc")
          if (args[0] instanceof A){
            return new C()
          }
          else {
            arktest.assertTrue(args[0] instanceof B)
            return new B()
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: A): C
        [access_modifier] [method_modifier] foo(x: B): B
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          if (args[0] instanceof A){
            return new C()
          }
          else {
            arktest.assertTrue(args[0] instanceof B)
            return new B()
          }
        }
    call_data:
      default: |-
        let a = new [call_class]("abc")
        let res = a.[call_function](new B())
        arktest.assertTrue(res instanceof C)
      static: |-
        let res = [call_class].[call_function](new B())
        arktest.assertTrue(res instanceof C)

  - decl_data: |-
      class A {}
      class B extends A {
        b_method(): int {
          return 123
        }
      }
      type HandlerAInt = (a: A, b: int) => int
      const handlerAInt: HandlerAInt = (a: A, b: int): int => {
        if (a instanceof B){
          return a.b_method() + b
        } else {
          return b
        }
      }
      type HandlerA = (a: A) => int
      const handlerA: HandlerA = (a: A): int => {
        if (a instanceof B){
          return a.b_method()
        } else {
          return 0
        }
      }
      type HandlerNothing = () => int
      const handlerNothing: HandlerNothing = (): int => {
        return 567
      }
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(x: string): string
        [access_modifier] [method_modifier] foo(x: A, fb: (a: B, b: int) => int): int
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof B){
            let f = args[1] as ((a: B, b: int) => int)
            arktest.assertTrue(this.args[0] instanceof int)
            return f(arg0, this.args[0] as int)
          } else {
            arktest.assertTrue(arg0 instanceof string)
            arktest.assertTrue(this.args[1] instanceof string)
            return (arg0 as string) + this.args[1]
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: string): string
        [access_modifier] [method_modifier] foo(x: A, fb: (a: B, b: int) => int): int
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof B){
            let f = args[1] as ((a: B, b: int) => int)
            return f(arg0, 7)
          } else {
            arktest.assertTrue(arg0 instanceof string)
            return (arg0 as string) + "c"
          }
        }
    call_data:
      default: |-
        let a = new [call_class](7, "c")
        let res1 = a.[call_function](new B(), handlerAInt)
        let res2 = a.[call_function](new B(), handlerA)
        let res3 = a.[call_function](new B(), handlerNothing)
        let res4 = a.[call_function]("ab")
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 130)
        arktest.assertTrue(res2 instanceof int)
        arktest.assertEQ(res2, 123)
        arktest.assertTrue(res3 instanceof int)
        arktest.assertEQ(res3, 567)
        arktest.assertTrue(res4 instanceof string)
        arktest.assertEQ(res4, "abc")
      static: |-
        let res1 = [call_class].[call_function](new B(), handlerAInt)
        let res2 = [call_class].[call_function](new B(), handlerA)
        let res3 = [call_class].[call_function](new B(), handlerNothing)
        let res4 = [call_class].[call_function]("ab")
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 130)
        arktest.assertTrue(res2 instanceof int)
        arktest.assertEQ(res2, 123)
        arktest.assertTrue(res3 instanceof int)
        arktest.assertEQ(res3, 567)
        arktest.assertTrue(res4 instanceof string)
        arktest.assertEQ(res4, "abc")

  - decl_data: |-
      class A {}
      class B extends A {
        field: int
        constructor(field: int) {
          this.field = field
        }
      }
      type HandlerA = (a: A) => B
      const handlerA: HandlerA = (a: A): B => {
        if (a instanceof B){
          return new B(a.field + 123)
        } else {
          return new B(0)
        }
      }
      type HandlerNothing = () => B
      const handlerNothing: HandlerNothing = (): B => {
        return new B(567)
      }
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(x: string): string
        [access_modifier] [method_modifier] foo(x: A, fb: (x: B) => A): int
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof B){
            let f = args[1] as ((x: B) => A)
            let f_res = f(arg0)
            if (f_res instanceof B) {
              return f_res.field
            } else {
              return -1
            }
          } else {
            arktest.assertTrue(arg0 instanceof string)
            arktest.assertTrue(this.args[0] instanceof string)
            return (arg0 as string) + this.args[0]
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: string): string
        [access_modifier] [method_modifier] foo(x: A, fb: (x: B) => A): int
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof B){
            let f = args[1] as ((x: B) => A)
            let f_res = f(arg0)
            if (f_res instanceof B) {
              return f_res.field
            } else {
              return -1
            }
          } else {
            arktest.assertTrue(arg0 instanceof string)
            return (arg0 as string) + "c"
          }
        }
    call_data:
      default: |-
        let a = new [call_class]("c")
        let res1 = a.[call_function](new B(7), handlerA)
        let res2 = a.[call_function](new B(345), handlerNothing)
        let res3 = a.[call_function]("ab")
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 130)
        arktest.assertTrue(res2 instanceof int)
        arktest.assertEQ(res2, 567)
        arktest.assertTrue(res3 instanceof string)
        arktest.assertEQ(res3, "abc")
      static: |-
        let res1 = [call_class].[call_function](new B(7), handlerA)
        let res2 = [call_class].[call_function](new B(345), handlerNothing)
        let res3 = [call_class].[call_function]("ab")
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 130)
        arktest.assertTrue(res2 instanceof int)
        arktest.assertEQ(res2, 567)
        arktest.assertTrue(res3 instanceof string)
        arktest.assertEQ(res3, "abc")

  - decl_data: |-
      class A {}
      class B extends A {
        b_method(): int {
          return 123
        }
      }
    class_type_parameters: ""
    overload_method_data:
      return_type: any
      default: |-
        [access_modifier] [method_modifier] foo(x: string): string
        [access_modifier] [method_modifier] foo(x: A, fb: (a: B, b: int) => int): int
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof B){
            let f = args[1] as ((a: B, b: int) => int)
            arktest.assertTrue(this.args[0] instanceof int)
            return f(arg0, this.args[0] as int)
          } else {
            arktest.assertTrue(arg0 instanceof string)
            arktest.assertTrue(this.args[1] instanceof string)
            return (arg0 as string) + this.args[1]
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: string): string
        [access_modifier] [method_modifier] foo(x: A, fb: (a: B, b: int) => int): int
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof B){
            let f = args[1] as ((a: B, b: int) => int)
            return f(arg0, 7)
          } else {
            arktest.assertTrue(arg0 instanceof string)
            return (arg0 as string) + "c"
          }
        }
    call_data:
      default: |-
        let a = new [call_class](7, "c")
        let i: int = 10
        const lambda1 = (a: B, b: int) => a.b_method() + b + i
        const lambda2 = (a: B) => a.b_method() + i
        const lambda3 = () => i + 10
        let res1 = a.[call_function](new B(), lambda1)
        let res2 = a.[call_function](new B(), lambda2)
        let res3 = a.[call_function](new B(), lambda3)
        let res4 = a.[call_function]("ab")
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 140)
        arktest.assertTrue(res2 instanceof int)
        arktest.assertEQ(res2, 133)
        arktest.assertTrue(res3 instanceof int)
        arktest.assertEQ(res3, 20)
        arktest.assertTrue(res4 instanceof string)
        arktest.assertEQ(res4, "abc")
      static: |-
        let i: int = 10
        const lambda1 = (a: B, b: int) => a.b_method() + b + i
        const lambda2 = (a: B) => a.b_method() + i
        const lambda3 = () => i + 10
        let res1 = [call_class].[call_function](new B(), lambda1)
        let res2 = [call_class].[call_function](new B(), lambda2)
        let res3 = [call_class].[call_function](new B(), lambda3)
        let res4 = [call_class].[call_function]("ab")
        arktest.assertTrue(res1 instanceof int)
        arktest.assertEQ(res1, 140)
        arktest.assertTrue(res2 instanceof int)
        arktest.assertEQ(res2, 133)
        arktest.assertTrue(res3 instanceof int)
        arktest.assertEQ(res3, 20)
        arktest.assertTrue(res4 instanceof string)
        arktest.assertEQ(res4, "abc")

  - decl_data: ""
    class_type_parameters: "<T, S>"
    overload_method_data:
      return_type: void
      default: |-
        [access_modifier] [method_modifier] foo(x: S): void
        [access_modifier] [method_modifier] foo(x: T): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof T) {
            arktest.assertTrue(this.args[0] instanceof T)
            arktest.assertEQ(arg0 + (this.args[0] as T), 321)
          } else {
            arktest.assertTrue(arg0 instanceof S)
            arktest.assertTrue(this.args[1] instanceof S)
            arktest.assertEQ((arg0 as S) + (this.args[1] as S), "abcd")
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: S): void
        [access_modifier] [method_modifier] foo(x: T): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          if (args[0] instanceof T) {
            arktest.assertEQ(args[0], 321)
          } else {
            arktest.assertTrue(args[0] instanceof S)
            arktest.assertEQ(args[0], "abcd")
          }
        }
    call_data:
      default: |-
        let a = new [call_class]<int, string>(100, "cd")
        a.[call_function](221)
        a.[call_function]("ab")
      static: |-
        [call_class]<int, string>.[call_function](321)
        [call_class]<int, string>.[call_function]("abcd")

  - decl_data: ""
    class_type_parameters: "<T, S, P, Q>"
    overload_method_data:
      return_type: void
      default: |-
        [access_modifier] [method_modifier] foo(x: T|S): void
        [access_modifier] [method_modifier] foo(x: P|Q): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof T) {
            arktest.assertTrue(this.args[0] instanceof T)
            arktest.assertEQ(arg0 + (this.args[0] as T), 321)
          } else if (arg0 instanceof S) {
            arktest.assertTrue(arg0 instanceof S)
            arktest.assertTrue(this.args[1] instanceof S)
            arktest.assertEQ(arg0 + (this.args[1] as S), 321.0)
          } else if (arg0 instanceof P) {
            arktest.assertTrue(arg0 instanceof P)
            arktest.assertTrue(this.args[2] instanceof P)
            arktest.assertEQ(arg0 + (this.args[2] as P), "abcd")
          } else {
            arktest.assertTrue(arg0 instanceof Q)
            arktest.assertTrue(this.args[3] instanceof Q)
            arktest.assertEQ((arg0 as Q) & (this.args[3] as Q), true)
          }
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: T|S): void
        [access_modifier] [method_modifier] foo(x: P|Q): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof T) {
            arktest.assertEQ(arg0, 321)
          } else if (arg0 instanceof S) {
            arktest.assertTrue(arg0 instanceof S)
            arktest.assertEQ(arg0, 321.0)
          } else if (arg0 instanceof P) {
            arktest.assertTrue(arg0 instanceof P)
            arktest.assertEQ(arg0, "abcd")
          } else {
            arktest.assertTrue(arg0 instanceof Q)
            arktest.assertEQ(arg0, true)
          }
        }
    call_data:
      default: |-
        let a = new [call_class]<int, double, string, boolean>(100, 200.0, "cd", true)
        a.[call_function](221)
        a.[call_function](21.0)
        a.[call_function]("ab")
        a.[call_function](true)
      static: |-
        [call_class]<int, double, string, boolean>.[call_function](321)
        [call_class]<int, double, string, boolean>.[call_function](321.0)
        [call_class]<int, double, string, boolean>.[call_function]("abcd")
        [call_class]<int, double, string, boolean>.[call_function](true)

  - decl_data: |-
      class A<T> {}
    class_type_parameters: "<T>"
    overload_method_data:
      return_type: void
      default: |-
        [access_modifier] [method_modifier] foo(x: Number): void
        [access_modifier] [method_modifier] foo(x: T): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
        }
        [access_modifier] [method_modifier] bar(y: A<Number>): void
        [access_modifier] [method_modifier] bar(y: A<T>): void
        [access_modifier] [method_modifier] bar(...args: Any[]): Any {
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: Number): void
        [access_modifier] [method_modifier] foo(x: T): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
        }
        [access_modifier] [method_modifier] bar(y: A<Number>): void
        [access_modifier] [method_modifier] bar(y: A<T>): void
        [access_modifier] [method_modifier] bar(...args: Any[]): Any {
        }
    call_data:
      default: |-
        let a = new [call_class]<int>()
        a.[call_function](123.0)
        a.[call_function](456)
      static: |-
        [call_class]<int>.[call_function](123.0)
        [call_class]<int>.[call_function](456)

  - decl_data: |-
      class A<T> {}
      class B<T> {}
    class_type_parameters: "<T, S>"
    overload_method_data:
      return_type: void
      default: |-
        [access_modifier] [method_modifier] foo(x: Number): void
        [access_modifier] [method_modifier] foo(x: T|S): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
        }
        [access_modifier] [method_modifier] bar(y: A<Number>|B<string>): void
        [access_modifier] [method_modifier] bar(y: A<string>|B<T>): void
        [access_modifier] [method_modifier] bar(...args: Any[]): Any {
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: Number): void
        [access_modifier] [method_modifier] foo(x: T|S): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
        }
        [access_modifier] [method_modifier] bar(y: A<Number>|B<string>): void
        [access_modifier] [method_modifier] bar(y: A<string>|B<T>): void
        [access_modifier] [method_modifier] bar(...args: Any[]): Any {
        }
    call_data:
      default: |-
        let a = new [call_class]<int, string>()
        a.[call_function](10)
        a.[call_function](20.0)
        a.[call_function]("efg")
      static: |-
        [call_class]<int, string>.[call_function](10)
        [call_class]<int, string>.[call_function](20.0)
        [call_class]<int, string>.[call_function]("efg")

  - decl_data: ""
    class_type_parameters: "<T, S>"
    overload_method_data:
      return_type: void
      default: |-
        [access_modifier] [method_modifier] foo(x: ()=>T): void
        [access_modifier] [method_modifier] foo(y: ()=>S): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: ()=>T): void
        [access_modifier] [method_modifier] foo(y: ()=>S): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
        }
    call_data:
      default: |-
        let a = new [call_class]<int, string>()
        let i: int = 20
        const lambda1 = () => 10 + i
        const lambda2 = () => "abcd"
        a.[call_function](lambda1)
        a.[call_function](lambda2)
      static: |-
        let i: int = 10
        const lambda1 = () => 10 + i
        const lambda2 = () => "abcd"
        [call_class]<int, string>.[call_function](lambda1)
        [call_class]<int, string>.[call_function](lambda2)

  - decl_data: ""
    class_type_parameters: "<T, S>"
    overload_method_data:
      return_type: void
      default: |-
        [access_modifier] [method_modifier] foo(x: T[]): void
        [access_modifier] [method_modifier] foo(y: S[]): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
        }
        [access_modifier] [method_modifier] bar(x: [T]): void
        [access_modifier] [method_modifier] bar(y: [S]): void
        [access_modifier] [method_modifier] bar(...args: Any[]): Any {
        }
        [access_modifier] [method_modifier] goo(x: (T|S)[]): void
        [access_modifier] [method_modifier] goo(y: (T|Number)[]): void
        [access_modifier] [method_modifier] goo(...args: Any[]): Any {
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: T[]): void
        [access_modifier] [method_modifier] foo(y: S[]): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
        }
        [access_modifier] [method_modifier] bar(x: [T]): void
        [access_modifier] [method_modifier] bar(y: [S]): void
        [access_modifier] [method_modifier] bar(...args: Any[]): Any {
        }
        [access_modifier] [method_modifier] goo(x: (T|S)[]): void
        [access_modifier] [method_modifier] goo(y: (T|Number)[]): void
        [access_modifier] [method_modifier] goo(...args: Any[]): Any {
        }
    call_data:
      default: |-
        let a = new [call_class]<int, string>()
        a.[call_function]([10, 15, 20])
        a.[call_function](["a", "b", "c"])
      static: |-
        [call_class]<int, string>.[call_function]([10, 15, 20])
        [call_class]<int, string>.[call_function](["a", "b", "c"])

  - decl_data: |-
      interface I {
        property: number
      }
      class A implements I {
        set property(property: number) {}
        get property(): number {}
      }
    class_type_parameters: "<T>"
    overload_method_data:
      return_type: void
      default: |-
        [access_modifier] [method_modifier] foo(x: Partial<T>): void
        [access_modifier] [method_modifier] foo(y: T): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
        }
      static: |-
        [access_modifier] [method_modifier] foo(x: Partial<T>): void
        [access_modifier] [method_modifier] foo(y: T): void
        [access_modifier] [method_modifier] foo(...args: Any[]): Any {
        }
    call_data:
      default: |-
        let a = new [call_class]<A>()
        let v1: A = {property: 10}
        let v2: Partial<A> = {property: 20}
        a.[call_function](v1)
        a.[call_function](v2)
      static: |-
        let v1: A = {property: 10}
        let v2: Partial<A> = {property: 20}
        [call_class]<A>.[call_function](v1)
        [call_class]<A>.[call_function](v2)
