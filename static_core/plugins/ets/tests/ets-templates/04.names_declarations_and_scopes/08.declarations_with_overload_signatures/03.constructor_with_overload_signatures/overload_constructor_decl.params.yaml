# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
global_tests_data:
  access_modifiers:
    - ""
    - "public"
    - "private"
    - "protected"
  class_modifiers:
    - ""
    - "abstract"
    - "final"
  global_decl_data: |-
    class AddArgClass {}

    [class_modifier] class Base[class_type_parameters] {
      was_checked: boolean = false
      [overload_constructor_data]
      [modifiers_constructor_variants]
    }
    [modifiers_decl_data]
  modifiers_constructor_variants:
    private_constructor: |-
      constructor(add_arg: AddArgClass, [overload_constructor_args_decl_variant]) {
        this([overload_constructor_args_call_variant])
      }
    protected_constructor:
      final_class: |-
        constructor(add_arg: AddArgClass, [overload_constructor_args_decl_variant]) {
          this([overload_constructor_args_call_variant])
        }
  modifiers_decl_data:
    derived_class_decl: |-
      class Derived[class_type_parameters] extends Base[class_type_parameters] {
        [derived_class_constructor_variants]
      }
    derived_class_constructor_variants:
      abstract_class:
        private_constructor: |-
          constructor([overload_constructor_args_decl_variant]) {
            super(new AddArgClass(), [overload_constructor_args_call_variant])
          }
        not_private_constructor: |-
          constructor([overload_constructor_args_decl_variant]) {
            super([overload_constructor_args_call_variant])
          }
      class_without_class_modifiers:
        protected_constructor: |-
          constructor([overload_constructor_args_decl_variant]) {
            super([overload_constructor_args_call_variant])
          }
  call_class:
    default: Base
    abstract_class: Derived
    class_without_class_modifiers:
        protected_constructor: Derived
  # add_args: used only if overloaded constructor can't be called directly, in other
  # case '[add_args], ' or '[add_args]' will be automatically removed from 'call_data'
  add_args:
    private_constructor:
      not_abstract_class: "new AddArgClass()"
    protected_constructor:
      final_class: "new AddArgClass()"
tests_data:
  - decl_data: ""
    class_type_parameters: ""
    overload_constructor_data: |-
      [access_modifier] constructor()
      [access_modifier] constructor(x: string)
      [access_modifier] constructor(...args: Any[]) {
        arktest.assertEQ(args.length, 0)
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "", call: ""}
      - {decl: "x: string", call: "x"}
    call_data: |-
      let a = new [call_class]([add_args])
      arktest.assertEQ(a.was_checked, true)

  - decl_data: ""
    class_type_parameters: ""
    overload_constructor_data: |-
      [access_modifier] constructor()
      [access_modifier] constructor(x: string)
      [access_modifier] constructor(...args: Any[]) {
        arktest.assertEQ(args.length, 1)
        arktest.assertTrue(args[0] instanceof string)
        arktest.assertEQ(args[0], "abcd")
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "", call: ""}
      - {decl: "x: string", call: "x"}
    call_data: |-
      let a = new [call_class]([add_args], "abcd")
      arktest.assertEQ(a.was_checked, true)

  - decl_data: ""
    class_type_parameters: ""
    overload_constructor_data: |-
      [access_modifier] constructor(x: string)
      [access_modifier] constructor(x: int)
      [access_modifier] constructor(...args: Any[]) {
        let arg0 = args[0]
        if (arg0 instanceof int) {
          arktest.assertEQ(arg0, 321)
        } else {
          arktest.assertTrue(arg0 instanceof string)
          arktest.assertEQ(arg0, "abc")
        }
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: string", call: "x"}
      - {decl: "x: int", call: "x"}
    call_data: |-
      let a = new [call_class]([add_args], 321)
      let b = new [call_class]([add_args], "abc")
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)

  - decl_data: ""
    class_type_parameters: ""
    overload_constructor_data: |-
      [access_modifier] constructor(a: int)
      [access_modifier] constructor(a: int, b: double, c: string)
      [access_modifier] constructor(...args: Any[]) {
        if (args.length == 1) {
          arktest.assertTrue(args[0] instanceof int)
          arktest.assertEQ(args[0], 123)
        } else {
          arktest.assertEQ(args.length, 3)
          arktest.assertTrue(args[0] instanceof int)
          arktest.assertEQ(args[0], 456)
          arktest.assertTrue(args[1] instanceof double)
          arktest.assertEQ(args[1], 789.0)
          arktest.assertTrue(args[2] instanceof string)
          arktest.assertEQ(args[2], "321")
        }
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "a: int", call: "a"}
      - {decl: "a: int, b: double, c: string", call: "a, b, c"}
    call_data: |-
      let a = new [call_class]([add_args], 123)
      let b = new [call_class]([add_args], 456, 789.0, "321")
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)

  - decl_data: ""
    class_type_parameters: ""
    overload_constructor_data: |-
      [access_modifier] constructor(a: int[])
      [access_modifier] constructor(a: string)
      [access_modifier] constructor(a: boolean, b: int)
      [access_modifier] constructor(...args: Any[]) {
        let arg0 = args[0]
        if (arg0 instanceof Array) {
          arktest.assertEQ(arg0.length, 2)
          arktest.assertTrue(arg0[0] instanceof int)
          arktest.assertEQ(arg0[0], 321)
          arktest.assertEQ(arg0[1], 476)
        }
        else if (arg0 instanceof string) {
          arktest.assertEQ(arg0, "ab")
        } else {
          arktest.assertTrue(arg0 instanceof boolean)
          arktest.assertTrue(args[1] instanceof int)
          if (arg0 instanceof boolean)
          {
            if (arg0) {
              arktest.assertEQ(args[1], 347)
            } else {
              arktest.assertEQ(args[1], 743)
            }
          }
        }
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "a: int[]", call: "a"}
      - {decl: "a: string", call: "a"}
      - {decl: "a: boolean, b: int", call: "a, b"}
    call_data: |-
      let a = new [call_class]([add_args], [321, 476])
      let b = new [call_class]([add_args], "ab")
      let c = new [call_class]([add_args], true, 347)
      let d = new [call_class]([add_args], false, 743)
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)
      arktest.assertEQ(c.was_checked, true)
      arktest.assertEQ(d.was_checked, true)

  - decl_data: ""
    class_type_parameters: ""
    overload_constructor_data: |-
      [access_modifier] constructor(x: string, y: int)
      [access_modifier] constructor(x: int)
      [access_modifier] constructor(x: int | string, y: boolean)
      [access_modifier] constructor(...args: Any[]) {
        if (args.length == 2) {
          if (args[1] instanceof boolean) {
            if (args[0] instanceof int) {
              arktest.assertEQ(args[0], 456)
              arktest.assertEQ(args[1], true)
            } else {
              arktest.assertTrue(args[0] instanceof string)
              arktest.assertEQ(args[0], "efg")
              arktest.assertEQ(args[1], false)
            }
          } else {
            arktest.assertTrue(args[0] instanceof string)
            arktest.assertTrue(args[1] instanceof int)
            arktest.assertEQ(args[0], "cba")
            arktest.assertEQ(args[1], 789)
          }
        } else {
          arktest.assertTrue(args[0] instanceof int)
          arktest.assertEQ(args[0], 987)
        }
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: string, y: int", call: "x, y"}
      - {decl: "x: int", call: "x"}
      - {decl: "x: int | string, y: boolean", call: "x, y"}
    call_data: |-
      let a = new [call_class]([add_args], 456, true)
      let b = new [call_class]([add_args], "efg", false)
      let c = new [call_class]([add_args], "cba", 789)
      let d = new [call_class]([add_args], 987)
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)
      arktest.assertEQ(c.was_checked, true)
      arktest.assertEQ(d.was_checked, true)

  - decl_data: |-
      class A {
        val: int
      }
      class B extends A {}
    class_type_parameters: ""
    overload_constructor_data: |-
      [access_modifier] constructor(x: A)
      [access_modifier] constructor(x: B, y: int)
      [access_modifier] constructor(...args: Any[]) {
        let arg0 = args[0]
        if (arg0 instanceof B){
          arktest.assertEQ(args.length, 2)
          arktest.assertTrue(args[1] instanceof int)
          arktest.assertEQ(arg0.val, 321)
          arktest.assertEQ(args[1], 476)
        }
        else {
          arktest.assertTrue(arg0 instanceof A)
          arktest.assertEQ(args.length, 1)
          arktest.assertEQ((arg0 as A).val, 123)
        }
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: A", call: "x"}
      - {decl: "x: B, y: int", call: "x, y"}
    call_data: |-
      let v1: A = {val: 123}
      let v2: B = {val: 321}
      let a = new [call_class]([add_args], v1)
      let b = new [call_class]([add_args], v2, 476)
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)

  - decl_data: |-
      class A {}
      class B extends A {
        b_method(): int {
          return 120
        }
      }
      type HandlerAInt = (a: A, b: int) => int
      const handlerAInt: HandlerAInt = (a: A, b: int): int => {
        if (a instanceof B){
          return a.b_method() + b
        } else {
          return b
        }
      }
      type HandlerA = (a: A) => int
      const handlerA: HandlerA = (a: A): int => {
        if (a instanceof B){
          return a.b_method()
        } else {
          return 0
        }
      }
      type HandlerNothing = () => int
      const handlerNothing: HandlerNothing = (): int => {
        return 567
      }
    class_type_parameters: ""
    overload_constructor_data: |-
      [access_modifier] constructor(x: string)
      [access_modifier] constructor(x: A, fb: (a: B, b: int) => int, check_res: int)
      [access_modifier] constructor(...args: Any[]) {
        let arg0 = args[0]
        if (arg0 instanceof B){
          arktest.assertEQ(args.length, 3)
          let f = args[1] as ((a: B, b: int) => int)
          let res: int = f(arg0, 10)
          arktest.assertTrue(args[2] instanceof int)
          arktest.assertEQ(res, args[2] as int)
        } else {
          arktest.assertTrue(arg0 instanceof string)
          arktest.assertEQ(arg0, "abc")
        }
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: string", call: "x"}
      - {decl: "x: A, fb: (a: B, b: int) => int, check_res: int", call: "x, fb, check_res"}
    call_data: |-
      let a = new [call_class]([add_args], new B(), handlerAInt, 130)
      let b = new [call_class]([add_args], new B(), handlerA, 120)
      let c = new [call_class]([add_args], new B(), handlerNothing, 567)
      let d = new [call_class]([add_args], "abc")
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)
      arktest.assertEQ(c.was_checked, true)
      arktest.assertEQ(d.was_checked, true)

  - decl_data: |-
      class A {}
      class B extends A {
        field: int
        constructor(field: int) {
          this.field = field
        }
      }
      type HandlerA = (a: A) => B
      const handlerA: HandlerA = (a: A): B => {
        if (a instanceof B){
          return new B(a.field + 123)
        } else {
          return new B(0)
        }
      }
      type HandlerNothing = () => B
      const handlerNothing: HandlerNothing = (): B => {
        return new B(567)
      }
    class_type_parameters: ""
    overload_constructor_data: |-
      [access_modifier] constructor(x: string)
      [access_modifier] constructor(x: A, fb: (x: B) => A, check_res: int)
      [access_modifier] constructor(...args: Any[]) {
        let arg0 = args[0]
        if (arg0 instanceof B){
          arktest.assertEQ(args.length, 3)
          let f = args[1] as ((x: B) => A)
          let f_res = f(arg0)
          arktest.assertTrue(f_res instanceof B)
          arktest.assertTrue(args[2] instanceof int)
          arktest.assertEQ((f_res as B).field, args[2] as int)
        } else {
          arktest.assertTrue(arg0 instanceof string)
          arktest.assertEQ(arg0, "abc")
        }
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: string", call: "x"}
      - {decl: "x: A, fb: (x: B) => A, check_res: int", call: "x, fb, check_res"}
    call_data: |-
      let a = new [call_class]([add_args], new B(7), handlerA, 130)
      let b = new [call_class]([add_args], new B(345), handlerNothing, 567)
      let c = new [call_class]([add_args], "abc")
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)
      arktest.assertEQ(c.was_checked, true)

  - decl_data: |-
      class A {}
      class B extends A {
        b_method(): int {
          return 123
        }
      }
    class_type_parameters: ""
    overload_constructor_data: |-
      [access_modifier] constructor(x: string)
      [access_modifier] constructor(x: A, fb: (a: B, b: int) => int, check_res: int)
      [access_modifier] constructor(...args: Any[]) {
        let arg0 = args[0]
        if (arg0 instanceof B){
          arktest.assertEQ(args.length, 3)
          let f = args[1] as ((a: B, b: int) => int)
          let f_res: int = f(arg0, 7)
          arktest.assertTrue(args[2] instanceof int)
          arktest.assertEQ(f_res, args[2] as int)
        } else {
          arktest.assertTrue(arg0 instanceof string)
          arktest.assertEQ(arg0, "abc")
        }
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: string", call: "x"}
      - {decl: "x: A, fb: (a: B, b: int) => int, check_res: int", call: "x, fb, check_res"}
    call_data: |-
      let i: int = 10
      const lambda1 = (a: B, b: int) => a.b_method() + b + i
      const lambda2 = (a: B) => a.b_method() + i
      const lambda3 = () => i + 10
      let a = new [call_class]([add_args], new B(), lambda1, 140)
      let b = new [call_class]([add_args], new B(), lambda2, 133)
      let c = new [call_class]([add_args], new B(), lambda3, 20)
      let d = new [call_class]([add_args], "abc")
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)
      arktest.assertEQ(c.was_checked, true)
      arktest.assertEQ(d.was_checked, true)

  - decl_data: ""
    class_type_parameters: "<T, S>"
    overload_constructor_data: |-
      [access_modifier] constructor(x: S)
      [access_modifier] constructor(x: T)
      [access_modifier] constructor(...args: Any[]) {
        let arg0 = args[0]
        if (arg0 instanceof T) {
          arktest.assertEQ(arg0, 321)
        } else {
          arktest.assertTrue(arg0 instanceof S)
          arktest.assertEQ(arg0, "abcd")
        }
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: S", call: "x"}
      - {decl: "x: T", call: "x"}
    call_data: |-
      let a = new [call_class]<int, string>([add_args], 321)
      let b = new [call_class]<int, string>([add_args], "abcd")
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)

  - decl_data: ""
    class_type_parameters: "<T, S, P, Q>"
    overload_constructor_data: |-
      [access_modifier] constructor(x: T|S)
      [access_modifier] constructor(x: P|Q)
      [access_modifier] constructor(...args: Any[]) {
        let arg0 = args[0]
        if (arg0 instanceof T) {
          arktest.assertEQ(arg0, 321)
        } else if (arg0 instanceof S) {
          arktest.assertTrue(arg0 instanceof S)
          arktest.assertEQ(arg0, 567.0)
        } else if (arg0 instanceof P) {
          arktest.assertTrue(arg0 instanceof P)
          arktest.assertEQ(arg0, "abcd")
        } else {
          arktest.assertTrue(arg0 instanceof Q)
          arktest.assertEQ(arg0, true)
        }
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: T|S", call: "x"}
      - {decl: "x: P|Q", call: "x"}
    call_data: |-
      let a = new [call_class]<int, double, string, boolean>([add_args], 321)
      let b = new [call_class]<int, double, string, boolean>([add_args], 567.0)
      let c = new [call_class]<int, double, string, boolean>([add_args], "abcd")
      let d = new [call_class]<int, double, string, boolean>([add_args], true)
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)
      arktest.assertEQ(c.was_checked, true)
      arktest.assertEQ(d.was_checked, true)

  - decl_data: ""
    class_type_parameters: "<T>"
    overload_constructor_data: |-
      [access_modifier] constructor(x: Number)
      [access_modifier] constructor(x: T)
      [access_modifier] constructor(...args: Any[]) {
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: Number", call: "x"}
      - {decl: "x: T", call: "x"}
    call_data: |-
      let a = new [call_class]<int>([add_args], 123.0)
      let b = new [call_class]<int>([add_args], 456)
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)

  - decl_data: |-
      class A<T> {}
    class_type_parameters: "<T>"
    overload_constructor_data: |-
      [access_modifier] constructor(y: A<Number>)
      [access_modifier] constructor(y: A<T>)
      [access_modifier] constructor(...args: Any[]) {
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "y: A<Number>", call: "y"}
      - {decl: "y: A<T>", call: "y"}
    call_data: |-
      let a = new [call_class]<int>([add_args], new A<Number>)
      let b = new [call_class]<int>([add_args], new A<int>)
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)

  - decl_data: ""
    class_type_parameters: "<T, S>"
    overload_constructor_data: |-
      [access_modifier] constructor(x: Number)
      [access_modifier] constructor(x: T|S)
      [access_modifier] constructor(...args: Any[]) {
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: Number", call: "x"}
      - {decl: "x: T|S", call: "x"}
    call_data: |-
      let a = new [call_class]<int, string>([add_args], 10)
      let b = new [call_class]<int, string>([add_args], 20.0)
      let c = new [call_class]<int, string>([add_args], "efg")
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)
      arktest.assertEQ(c.was_checked, true)

  - decl_data: |-
      class A<T> {}
      class B<T> {}
    class_type_parameters: "<T>"
    overload_constructor_data: |-
      [access_modifier] constructor(y: A<Number>|B<string>)
      [access_modifier] constructor(y: A<string>|B<T>)
      [access_modifier] constructor(...args: Any[]) {
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "y: A<Number>|B<string>", call: "y"}
      - {decl: "y: A<string>|B<T>", call: "y"}
    call_data: |-
      let a = new [call_class]<boolean>([add_args], new A<Number>())
      let b = new [call_class]<boolean>([add_args], new B<string>())
      let c = new [call_class]<boolean>([add_args], new A<string>())
      let d = new [call_class]<boolean>([add_args], new B<boolean>())
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)
      arktest.assertEQ(c.was_checked, true)
      arktest.assertEQ(d.was_checked, true)

  - decl_data: ""
    class_type_parameters: "<T, S>"
    overload_constructor_data: |-
      [access_modifier] constructor(x: ()=>T)
      [access_modifier] constructor(y: ()=>S)
      [access_modifier] constructor(...args: Any[]) {
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: ()=>T", call: "x"}
      - {decl: "y: ()=>S", call: "y"}
    call_data: |-
      let i: int = 20
      const lambda1 = () => 10 + i
      const lambda2 = () => "abcd"
      let a = new [call_class]<int, string>([add_args], lambda1)
      let b = new [call_class]<int, string>([add_args], lambda2)
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)

  - decl_data: ""
    class_type_parameters: "<T, S>"
    overload_constructor_data: |-
      [access_modifier] constructor(x: T[])
      [access_modifier] constructor(y: S[])
      [access_modifier] constructor(...args: Any[]) {
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: T[]", call: "x"}
      - {decl: "y: S[]", call: "y"}
    call_data: |-
      let a = new [call_class]<int, string>([add_args], [10, 15, 20])
      let b = new [call_class]<int, string>([add_args], ["ab", "cd", "ef"])
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)

  - decl_data: ""
    class_type_parameters: "<T, S>"
    overload_constructor_data: |-
      [access_modifier] constructor(x: [T])
      [access_modifier] constructor(y: [S])
      [access_modifier] constructor(...args: Any[]) {
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: [T]", call: "x"}
      - {decl: "y: [S]", call: "y"}
    call_data: |-
      let t1: [int] = [10]
      let t2: [string] = ["abc"]
      let a = new [call_class]<int, string>([add_args], t1)
      let b = new [call_class]<int, string>([add_args], t2)
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)

  - decl_data: ""
    class_type_parameters: "<T, S>"
    overload_constructor_data: |-
      [access_modifier] constructor(x: (T|S)[])
      [access_modifier] constructor(y: (T|Number)[])
      [access_modifier] constructor(...args: Any[]) {
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: (T|S)[]", call: "x"}
      - {decl: "y: (T|Number)[]", call: "y"}
    call_data: |-
      let v1: (int|string)[] = [10, 20, "abc"]
      let v2: (int|Number)[] = [10, 20.0, 30.5]
      let a = new [call_class]<int, string>([add_args], v1)
      let b = new [call_class]<int, string>([add_args], v2)
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)

  - decl_data: |-
      interface I {
        property: number
      }
      class A implements I {
        set property(property: number) {
          this.property = property
        }
        get property(): number {
          return this.property
        }
      }
    class_type_parameters: "<T>"
    overload_constructor_data: |-
      [access_modifier] constructor(x: Partial<T>)
      [access_modifier] constructor(y: T)
      [access_modifier] constructor(...args: Any[]) {
        this.was_checked = true
      }
    overload_constructor_args_variants:
      - {decl: "x: Partial<T>", call: "x"}
      - {decl: "y: T", call: "y"}
    call_data: |-
      let v1: A = {property: 10.0}
      let v2: Partial<A> = {property: 20.0}
      let a = new [call_class]<A>([add_args], v1)
      let b = new [call_class]<A>([add_args], v2)
      arktest.assertEQ(a.was_checked, true)
      arktest.assertEQ(b.was_checked, true)
