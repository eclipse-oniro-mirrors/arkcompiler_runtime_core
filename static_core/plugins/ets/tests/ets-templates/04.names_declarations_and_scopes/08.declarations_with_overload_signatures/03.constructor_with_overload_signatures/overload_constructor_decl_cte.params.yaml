# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

overload_constructor_decls:
  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class TestClass {
        constructor()
        constructor(x: string)
        constructor(...args: Any[]) {
        }
      }
    calls:
      - |-
        let a = new TestClass(undefined)
      - |-
        let a = new TestClass(null)
      - |-
        let a = new TestClass(123)
      - |-
        let a = new TestClass(true)
      - |-
        let a = new TestClass("ab", "cd")
      - |-
        let a = new TestClass(["ab", "cd"])
      - |-
        let a = new TestClass(["ab", 123, true])

  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class TestClass {
        constructor(a: int)
        constructor(a: int, b: double, c: string)
        constructor(...args: Any[]) {
        }
      }
    calls:
      - |-
        let a = new TestClass()
      - |-
        let a = new TestClass(456, 789.0)

  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class A {}
      class B extends A {}
      class C extends A {}
      class TestClass {
        constructor(x: string)
        constructor(x: C)
        constructor(...args: Any[]) {
        }
      }
    calls:
      - |-
        let a = new TestClass()
      - |-
        let a = new TestClass(new A())
      - |-
        let a = new TestClass(new B())

  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class A {}
      class B extends A {}
      class C extends A {}
      type HandlerBInt = (a: B, b: int) => int
      const handlerBInt: HandlerBInt = (a: B, b: int): int => {
        return 10
      }
      type HandlerB = (a: B) => int
      const handlerB: HandlerB = (a: B): int => {
        return 10
      }
      type HandlerCIntInt = (a: C, b: int, c: int) => int
      const handlerCIntInt: HandlerCIntInt = (a: C, b: int, c: int): int => {
        return 10
      }
      class TestClass {
        constructor(x: string)
        constructor(x: A, fb: (a: C, b: int) => int)
        constructor(...args: Any[]) {
        }
      }
    calls:
      - |-
        let a = new TestClass()
      - |-
        let a = new TestClass(new A(), handlerBInt)
      - |-
        let a = new TestClass(new A(), handlerB)
      - |-
        let a = new TestClass(new A(), handlerCIntInt)

  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class A {}
      class B extends A {}
      type HandlerB = (a: B) => A
      const handlerB: HandlerB = (a: B): A => {
        return new B()
      }
      type HandlerNothing = () => A
      const handlerNothing: HandlerNothing = (): A => {
        return new B()
      }
      class TestClass {
        constructor(x: string)
        constructor(x: A, fb: (x: B) => B)
        constructor(...args: Any[]) {
        }
      }
    calls:
      - |-
        let a = new TestClass()
      - |-
        let a = new TestClass(new A(), handlerB)
      - |-
        let a = new TestClass(new A(), handlerNothing)

  - desc: |-
      Implementation body is missing
    decl: |-
      class TestClass {
        constructor()
        constructor(x: string)
      }
    calls:
      - ""

  - desc: |-
      Implementation body fails to follow a signature immediately
    decl: |-
      class TestClass {
        constructor()
        constructor(x: string)

        constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Implementation body must have a signature as follows:
      (...args: Any[])
      Otherwise, a compile-time error occurs.
    decl: |-
      class TestClass {
        constructor(a: int)
        constructor(a: int, b: int, c: int)
        constructor(a: int, b?: int, c?: int) {
        }
      }
    calls:
      - ""

  - desc: |-
      Implementation body must have a signature as follows:
      (...args: Any[])
      Otherwise, a compile-time error occurs.
    decl: |-
      class TestClass {
        constructor(a: string)
        constructor(a: number)
        constructor(a: string|number) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        constructor()
        private constructor(x: string)
        protected constructor(x: boolean)
        internal constructor(x: Object)
        constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        private constructor()
        private constructor(x: string)
        constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        constructor()
        private constructor(x: string)
        constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        constructor()
        constructor(x: string)
        private constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        protected constructor()
        protected constructor(x: string)
        constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        constructor()
        protected constructor(x: string)
        constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        constructor()
        constructor(x: string)
        protected constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        internal constructor()
        internal constructor(x: string)
        constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        constructor()
        internal constructor(x: string)
        constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        constructor()
        constructor(x: string)
        internal constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        private constructor()
        private constructor(x: string)
        protected constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        protected constructor()
        private constructor(x: string)
        private constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        private constructor()
        private constructor(x: string)
        internal constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      Two or more signatures of an implementation body have different access modifiers.
    decl: |-
      class TestClass {
        internal constructor()
        private constructor(x: string)
        private constructor(...args: Any[]) {
        }
      }
    calls:
      - ""

  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class TestClass {
        private constructor()
        private constructor(x: string)
        private constructor(...args: Any[]) {
        }
      }
    calls:
      - |-
        let a = new TestClass()
      - |-
        let a = new TestClass("abc")

  - desc: |-
      compile-time error, implementation signature is not accessible
    decl: |-
      class TestClass {
        protected constructor()
        protected constructor(x: string)
        protected constructor(...args: Any[]) {
        }
      }
    calls:
      - |-
        let a = new TestClass()
      - |-
        let a = new TestClass("abc")
