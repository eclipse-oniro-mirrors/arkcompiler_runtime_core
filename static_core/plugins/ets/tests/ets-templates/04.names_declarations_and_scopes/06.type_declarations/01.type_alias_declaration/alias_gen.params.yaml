# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # arrays
  - defs: |-
      type LongArray = Long[];
    use: |-
      let v: LongArray[] = new Long[1][1];
      let ok = v.length == 1;

  - defs: |-
      type Matrix3D = Byte[][][];
    use: |-
      let v: Matrix3D = new Byte[1][1][1];
      let ok = v.length == 1;

  - defs: |-
      enum Axis { X, Y, Z };
      type Fields = Axis[];
    use: |-
      let v: Fields = new Axis[6];
      let ok = v.length == 6;

  # functions
  - defs: |-
      type Func<T> = (p: int) => T;
    use: |-
      let v: Func<Int> = (p: int): Int => { return new Int(p); };
      let ok = v(1).unboxed() == 1;

  - defs: |-
      type Func<T> = (p: int) => T;
      type NullableFunc<T> = Func<T>|null;
    use: |-
      let v: NullableFunc<Int> = (p: int): Int => { return new Int(p); };
      let ok = v(1).unboxed() == 1;

  - defs: |-
      type Func<T> = (p: int) => T;
      type NullableFunc<T> = Func<T>|null;
    use: |-
      let v: NullableFunc<Int> = null;
      let ok = v === null;

  # classes
  - defs: |-
      class B<T> {
          public ok = true;
      }
      type BetterB<T> = B<T>;
    use: |-
      let v: BetterB<Int> = new BetterB<Int>();
      let ok: boolean = v.ok;

  - defs: |-
      class B<T> {
          public ok = true;
      }
      type BetterB = B<Int>;
    use: |-
      let v: BetterB = new BetterB();
      let ok: boolean = v.ok;

  - defs: |-
      class B<T, V> {
          public ok = true;
      }
      type BetterB<T> = B<T, Boolean>;
    use: |-
      let v: BetterB<Long> = new B<Long, Boolean>();
      let ok: boolean = v.ok;

  - defs: |-
      class B<out T, in U, V extends Error> {
          public ok = true;
      }
      type BetterB<T, U> = B<T, U, NullPointerError>;
    use: |-
      let v: BetterB<Int, Long> = new BetterB<Int, Long>();
      let ok: boolean = v.ok;

  - defs: |-
      class Outer {
          class Inner {
              public ok = true;
          }
      }
      type Shortcut = Outer.Inner;
    use: |-
      let v: Shortcut = new Shortcut();
      let ok: boolean = v.ok;

  # interfaces
  - defs: |-
      interface I<T> {}
      class A<T> implements I<T> {
          public ok = true;
      }
      type Intf<T> = I<T>;
    use: |-
      let v: Intf<Exception> = new A<Exception>();
      let ok: boolean = v.ok;

  - defs: |-
      interface I<T, V> {}
      class A<T> implements I<T, Int> {
          public ok = true;
      }
      type Intf<T> = I<T, Int>;
    use: |-
      let v: Intf<Boolean> = new A<Boolean>();
      let ok: boolean = v.ok;

  - defs: |-
      interface I<out T, in V, U extends Error> {}
      type Intf = I<Int, Long, NullPointerError>;
      class A implements Intf {
          public ok = true;
      }
    use: |-
      let v: Intf = new A();
      let ok: boolean = v.ok;

  # enums
  - defs: |-
      enum Color { Red, Green, Blue };
      type BaseColor = Color;
    use: |-
      let v: BaseColor = BaseColor.Red;
      let ok = v.toString() == Color.Red.toString();
