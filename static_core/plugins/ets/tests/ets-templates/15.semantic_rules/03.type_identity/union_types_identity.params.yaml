# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

global_tests_data:
  check_variants_for_predefined_types:
    - {check_type_a: "Object | undefined",
      check_type_b: "undefined | Object",
      check_value_0: "5n",
      check_value_1: "undefined",
      check_value_2: "\"abc\""}
    - {check_type_a: "Object | undefined | null",
      check_type_b: "undefined | null | Object",
      check_value_0: "5n",
      check_value_1: "null",
      check_value_2: "undefined"}
    - {check_type_a: "number | boolean",
      check_type_b: "boolean | number",
      check_value_0: "true",
      check_value_1: "7.9",
      check_value_2: "false"}
    - {check_type_a: "int | string | boolean",
      check_type_b: "string | boolean | int",
      check_value_0: "true",
      check_value_1: "5",
      check_value_2: "\"abc\""}
    - {check_type_a: "\"Done\" | \"In Progress\" | \"On Review\"",
      check_type_b: "\"In Progress\" | \"On Review\" | \"Done\"",
      check_value_0: "\"On Review\"",
      check_value_1: "\"In Progress\"",
      check_value_2: "\"Done\""}

  check_variants_for_custom_types:
    - check_type_a: "Cat | Dog | Frog | number"
      check_type_b: "number | Dog | Cat | Frog"
      set_value_0: "new Cat()"
      check_func_0: "check_cat"
      set_value_1: "7.8"
      check_func_1: "check_number"
      set_value_2: "new Dog()"
      check_func_2: "check_dog"
      set_value_3: "new Frog()"
      check_func_3: "check_frog"
      cv_decl_data: |-
        class Cat {v: string = "cat"}
        class Dog {v: bigint = 123n}
        class Frog {v: int = 5}
        function check_cat(a: Any) {
          arktest.assertTrue(a instanceof Cat)
          arktest.assertEQ((a as Cat).v, "cat")
        }
        function check_dog(a: Any) {
          arktest.assertTrue(a instanceof Dog)
          arktest.assertEQ((a as Dog).v, 123n)
        }
        function check_frog(a: Any) {
          arktest.assertTrue(a instanceof Frog)
          arktest.assertEQ((a as Frog).v, 5)
        }
        function check_number(a: Any) {
          arktest.assertTrue(a instanceof number)
          arktest.assertEQ(a as number, 7.8)
        }

cases:
  - desc: |-
      >-
        Checking Union types A and B are identical
        on predefined types on assign operations and instanceof.
    check_variants: check_variants_for_predefined_types
    sub_cases_logic:
      - |-
        let a: [check_type_a] = [check_value_0]
        let b: [check_type_b] = a
        [common_logic]
      - |-
        let a: [check_type_b] = [check_value_0]
        let b: [check_type_a] = a
        [common_logic]
    common_logic: |-
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      arktest.assertEQ(a, [check_value_0])
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      arktest.assertEQ(b, [check_value_0])
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      arktest.assertEQ(a, [check_value_0])
      b = [check_value_1]
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      arktest.assertEQ(b, [check_value_1])
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      arktest.assertEQ(a, [check_value_1])
      b = [check_value_2]
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      arktest.assertEQ(b, [check_value_2])
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      arktest.assertEQ(a, [check_value_2])

  - desc: |-
      >-
        Checking Union types A and B are identical
        on custom types on assign operations and instanceof.
    check_variants: check_variants_for_custom_types
    decl_variants:
      - |-
        [cv_decl_data]
    sub_cases_logic:
      - |-
        let a: [check_type_a] = [set_value_0]
        let b: [check_type_b] = a
        [common_logic]
      - |-
        let a: [check_type_b] = [set_value_0]
        let b: [check_type_a] = a
        [common_logic]
    common_logic: |-
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_0](a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      [check_func_0](b)
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_0](a)
      b = [set_value_1]
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      [check_func_1](b)
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_1](a)
      b = [set_value_2]
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      [check_func_2](b)
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_2](a)
      b = [set_value_3]
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      [check_func_3](b)
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_3](a)

  - desc: |-
      >-
        Checking Union types A and B are identical
        on predefined types by using cast expression.
    check_variants: check_variants_for_predefined_types
    decl_variants:
      - |-
        function cast(p: Any) {
          return p as [check_type_a]
        }
      - |-
        function cast(p: Any) {
          return p as [check_type_b]
        }
      - |-
        function cast(p: Any): [check_type_a] {
          return p as [check_type_a]
        }
      - |-
        function cast(p: Any): [check_type_a] {
          return p as [check_type_b]
        }
      - |-
        function cast(p: Any): [check_type_b] {
          return p as [check_type_b]
        }
      - |-
        function cast(p: Any): [check_type_b] {
          return p as [check_type_a]
        }
    sub_cases_logic:
      - |-
        let a: [check_type_a] = [check_value_0]
        let b: [check_type_b] = cast(a)
        [common_logic]
      - |-
        let a: [check_type_b] = [check_value_0]
        let b: [check_type_a] = cast(a)
        [common_logic]
    common_logic: |-
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      arktest.assertEQ(a, [check_value_0])
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      arktest.assertEQ(b, [check_value_0])
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      arktest.assertEQ(a, [check_value_0])
      a = [check_value_1]
      b = cast(a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      arktest.assertEQ(b, [check_value_1])
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      arktest.assertEQ(a, [check_value_1])
      a = [check_value_2]
      b = cast(a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      arktest.assertEQ(b, [check_value_2])
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      arktest.assertEQ(a, [check_value_2])

  - desc: |-
      >-
        Checking Union types A and B are identical
        on custom types by using cast expression.
    check_variants: check_variants_for_custom_types
    decl_variants:
      - |-
        [cv_decl_data]
        function cast(p: Any) {
          return p as [check_type_a]
        }
      - |-
        [cv_decl_data]
        function cast(p: Any) {
          return p as [check_type_b]
        }
      - |-
        [cv_decl_data]
        function cast(p: Any): [check_type_a] {
          return p as [check_type_a]
        }
      - |-
        [cv_decl_data]
        function cast(p: Any): [check_type_a] {
          return p as [check_type_b]
        }
      - |-
        [cv_decl_data]
        function cast(p: Any): [check_type_b] {
          return p as [check_type_b]
        }
      - |-
        [cv_decl_data]
        function cast(p: Any): [check_type_b] {
          return p as [check_type_a]
        }
    sub_cases_logic:
      - |-
        let a: [check_type_a] = [set_value_0]
        let b: [check_type_b] = cast(a)
        [common_logic]
      - |-
        let a: [check_type_b] = [set_value_0]
        let b: [check_type_a] = cast(a)
        [common_logic]
    common_logic: |-
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_0](a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      [check_func_0](b)
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_0](a)
      a = [set_value_1]
      b = cast(a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      [check_func_1](b)
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_1](a)
      a = [set_value_2]
      b = cast(a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      [check_func_2](b)
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_2](a)
      a = [set_value_3]
      b = cast(a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      [check_func_3](b)
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_3](a)

  - desc: |-
      >-
        Checking Union types A and B are identical
        on predefined types on function call.
    check_variants: check_variants_for_predefined_types
    decl_variants:
      - |-
        function foo(p: [check_type_a]): [check_type_a] {
          return p
        }
      - |-
        function foo(p: [check_type_a]): [check_type_b] {
          return p
        }
      - |-
        function foo(p: [check_type_b]): [check_type_a] {
          return p
        }
      - |-
        function foo(p: [check_type_b]): [check_type_b] {
          return p
        }
    sub_cases_logic:
      - |-
        let a: [check_type_a] = [check_value_0]
        let b: [check_type_b] = foo(a)
        [common_logic]
      - |-
        let a: [check_type_b] = [check_value_0]
        let b: [check_type_a] = foo(a)
        [common_logic]
    common_logic: |-
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      arktest.assertEQ(a, [check_value_0])
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      arktest.assertEQ(b, [check_value_0])
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      arktest.assertEQ(a, [check_value_0])
      a = [check_value_1]
      b = foo(a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      arktest.assertEQ(b, [check_value_1])
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      arktest.assertEQ(a, [check_value_1])
      a = [check_value_2]
      b = foo(a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      arktest.assertEQ(b, [check_value_2])
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      arktest.assertEQ(a, [check_value_2])

  - desc: |-
      >-
        Checking Union types A and B are identical
        on custom types on function call.
    check_variants: check_variants_for_custom_types
    decl_variants:
      - |-
        [cv_decl_data]
        function foo(p: [check_type_a]): [check_type_a] {
          return p
        }
      - |-
        [cv_decl_data]
        function foo(p: [check_type_a]): [check_type_b] {
          return p
        }
      - |-
        [cv_decl_data]
        function foo(p: [check_type_b]): [check_type_a] {
          return p
        }
      - |-
        [cv_decl_data]
        function foo(p: [check_type_b]): [check_type_b] {
          return p
        }
    sub_cases_logic:
      - |-
        let a: [check_type_a] = [set_value_0]
        let b: [check_type_b] = foo(a)
        [common_logic]
      - |-
        let a: [check_type_b] = [set_value_0]
        let b: [check_type_a] = foo(a)
        [common_logic]
    common_logic: |-
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_0](a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      [check_func_0](b)
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_0](a)
      a = [set_value_1]
      b = foo(a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      [check_func_1](b)
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_1](a)
      a = [set_value_2]
      b = foo(a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      [check_func_2](b)
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_2](a)
      a = [set_value_3]
      b = foo(a)
      arktest.assertTrue(b instanceof [check_type_a])
      arktest.assertTrue(b instanceof [check_type_b])
      [check_func_3](b)
      a = b
      arktest.assertTrue(a instanceof [check_type_a])
      arktest.assertTrue(a instanceof [check_type_b])
      [check_func_3](a)
