# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

global_tests_data:
  check_variants_for_predefined_types:
    - {check_type: "int",
      init_lit: "[[1, 3], [5, 7]]",
      check_value_0_0: "1",
      check_value_0_1: "3",
      check_value_1_0: "5",
      check_value_1_1: "7"}
    - {check_type: "long",
      init_lit: "[[1, 3], [5, 7]]",
      check_value_0_0: "1",
      check_value_0_1: "3",
      check_value_1_0: "5",
      check_value_1_1: "7"}
    - {check_type: "byte",
      init_lit: "[[1, 3], [5, 7]]",
      check_value_0_0: "1",
      check_value_0_1: "3",
      check_value_1_0: "5",
      check_value_1_1: "7"}
    - {check_type: "short",
      init_lit: "[[1, 3], [5, 7]]",
      check_value_0_0: "1",
      check_value_0_1: "3",
      check_value_1_0: "5",
      check_value_1_1: "7"}
    - {check_type: "double",
      init_lit: "[[1.5, 3.7], [5.4, 7.8]]",
      check_value_0_0: "1.5",
      check_value_0_1: "3.7",
      check_value_1_0: "5.4",
      check_value_1_1: "7.8"}
    - {check_type: "number",
      init_lit: "[[1.5, 3.7], [5.4, 7.8]]",
      check_value_0_0: "1.5",
      check_value_0_1: "3.7",
      check_value_1_0: "5.4",
      check_value_1_1: "7.8"}
    - {check_type: "float",
      init_lit: "[[1.5f, 3.7f], [5.4f, 7.8f]]",
      check_value_0_0: "1.5f",
      check_value_0_1: "3.7f",
      check_value_1_0: "5.4f",
      check_value_1_1: "7.8f"}
    - {check_type: "bigint",
      init_lit: "[[1n, 3n], [5n, 7n]]",
      check_value_0_0: "1n",
      check_value_0_1: "3n",
      check_value_1_0: "5n",
      check_value_1_1: "7n"}
    - {check_type: "string",
      init_lit: "[[\"ab\", \"c\"], [\"de\", \"f\"]]",
      check_value_0_0: "\"ab\"",
      check_value_0_1: "\"c\"",
      check_value_1_0: "\"de\"",
      check_value_1_1: "\"f\""}
    - {check_type: "char",
      init_lit: "[[c'a', c'b'], [c'c', c'd']]",
      check_value_0_0: "c'a'",
      check_value_0_1: "c'b'",
      check_value_1_0: "c'c'",
      check_value_1_1: "c'd'"}
    - {check_type: "boolean",
      init_lit: "[[false, true], [true, false]]",
      check_value_0_0: "false",
      check_value_0_1: "true",
      check_value_1_0: "true",
      check_value_1_1: "false"}
    - {check_type: "Object",
      init_lit: "[[1, 5n], [\"abc\", 17.6]]",
      check_value_0_0: "1",
      check_value_0_1: "5n",
      check_value_1_0: "\"abc\"",
      check_value_1_1: "17.6"}
    - {check_type: "(Object | undefined)",
      init_lit: "[[undefined, 5n], [\"abc\", 17.6]]",
      check_value_0_0: "undefined",
      check_value_0_1: "5n",
      check_value_1_0: "\"abc\"",
      check_value_1_1: "17.6"}
    - {check_type: "(Object | undefined | null)",
      init_lit: "[[undefined, 5n], [null, 17.6]]",
      check_value_0_0: "undefined",
      check_value_0_1: "5n",
      check_value_1_0: "null",
      check_value_1_1: "17.6"}
    - {check_type: "Any",
      init_lit: "[[undefined, 5n], [null, 17.6]]",
      check_value_0_0: "undefined",
      check_value_0_1: "5n",
      check_value_1_0: "null",
      check_value_1_1: "17.6"}

  check_variants_for_custom_types:
    - {check_type: "C",
      data_type: "int",
      init_lit: "[[{data: 1}, {data: 3}], [{data: 5}, {data: 7}]]",
      check_value_0_0: "1",
      check_value_0_1: "3",
      check_value_1_0: "5",
      check_value_1_1: "7",
      cv_decl_data: "class C {data: int = 0}"}

cases:
  - desc: |-
      >-
        Checking for 2d Arrays with mix of types T[] and Array<T>
        are identical on predefined types on assign operations.
    check_variants: check_variants_for_predefined_types
    sub_cases_logic:
      - |-
        let a: [check_type][][] = [init_lit]
        let b: Array<Array<[check_type]>> = a
        [common_logic]
      - |-
        let a: Array<Array<[check_type]>> = [init_lit]
        let b: [check_type][][] = a
        [common_logic]
      - |-
        let a: Array<[check_type][]> = [init_lit]
        let b: Array<[check_type]>[] = a
        [common_logic]
      - |-
        let a: Array<[check_type]>[] = [init_lit]
        let b: Array<[check_type][]> = a
        [common_logic]
    common_logic: |-
      arktest.assertTrue(a instanceof Array)
      arktest.assertTrue(a[0] instanceof Array)
      arktest.assertTrue(a[1] instanceof Array)
      arktest.assertTrue(b instanceof Array)
      arktest.assertTrue(b[0] instanceof Array)
      arktest.assertTrue(b[1] instanceof Array)
      arktest.assertEQ(b.length, 2)
      arktest.assertEQ(b[0].length, 2)
      arktest.assertEQ(b[1].length, 2)
      arktest.assertTrue(b[0][0] instanceof [check_type])
      arktest.assertEQ(b[0][0], [check_value_0_0])
      arktest.assertTrue(b[0][1] instanceof [check_type])
      arktest.assertEQ(b[0][1], [check_value_0_1])
      arktest.assertTrue(b[1][0] instanceof [check_type])
      arktest.assertEQ(b[1][0], [check_value_1_0])
      arktest.assertTrue(b[1][1] instanceof [check_type])
      arktest.assertEQ(b[1][1], [check_value_1_1])
      a = b
      arktest.assertTrue(a instanceof Array)
      arktest.assertTrue(a[0] instanceof Array)
      arktest.assertTrue(a[1] instanceof Array)
      arktest.assertEQ(a.length, 2)
      arktest.assertEQ(a[0].length, 2)
      arktest.assertEQ(a[1].length, 2)
      arktest.assertTrue(a[0][0] instanceof [check_type])
      arktest.assertEQ(a[0][0], [check_value_0_0])
      arktest.assertTrue(a[0][1] instanceof [check_type])
      arktest.assertEQ(a[0][1], [check_value_0_1])
      arktest.assertTrue(a[1][0] instanceof [check_type])
      arktest.assertEQ(a[1][0], [check_value_1_0])
      arktest.assertTrue(a[1][1] instanceof [check_type])
      arktest.assertEQ(a[1][1], [check_value_1_1])

  - desc: |-
      >-
        Checking for 2d Arrays with mix of types T[] and Array<T>
        are identical on custom types on assign operations.
    check_variants: check_variants_for_custom_types
    decl_variants:
      - |-
        [cv_decl_data]
    sub_cases_logic:
      - |-
        let a: [check_type][][] = [init_lit]
        let b: Array<Array<[check_type]>> = a
        [common_logic]
      - |-
        let a: Array<Array<[check_type]>> = [init_lit]
        let b: [check_type][][] = a
        [common_logic]
      - |-
        let a: Array<[check_type][]> = [init_lit]
        let b: Array<[check_type]>[] = a
        [common_logic]
      - |-
        let a: Array<[check_type]>[] = [init_lit]
        let b: Array<[check_type][]> = a
        [common_logic]
    common_logic: |-
      arktest.assertTrue(a instanceof Array)
      arktest.assertTrue(a[0] instanceof Array)
      arktest.assertTrue(a[1] instanceof Array)
      arktest.assertTrue(b instanceof Array)
      arktest.assertTrue(b[0] instanceof Array)
      arktest.assertTrue(b[1] instanceof Array)
      arktest.assertEQ(b.length, 2)
      arktest.assertEQ(b[0].length, 2)
      arktest.assertEQ(b[1].length, 2)
      arktest.assertTrue(b[0][0] instanceof [check_type])
      arktest.assertTrue(b[0][0].data instanceof [data_type])
      arktest.assertEQ(b[0][0].data, [check_value_0_0])
      arktest.assertTrue(b[0][1] instanceof [check_type])
      arktest.assertTrue(b[0][1].data instanceof [data_type])
      arktest.assertEQ(b[0][1].data, [check_value_0_1])
      arktest.assertTrue(b[1][0] instanceof [check_type])
      arktest.assertTrue(b[1][0].data instanceof [data_type])
      arktest.assertEQ(b[1][0].data, [check_value_1_0])
      arktest.assertTrue(b[1][1] instanceof [check_type])
      arktest.assertTrue(b[1][1].data instanceof [data_type])
      arktest.assertEQ(b[1][1].data, [check_value_1_1])
      a = b
      arktest.assertTrue(a instanceof Array)
      arktest.assertTrue(a[0] instanceof Array)
      arktest.assertTrue(a[1] instanceof Array)
      arktest.assertEQ(a.length, 2)
      arktest.assertEQ(a[0].length, 2)
      arktest.assertEQ(a[1].length, 2)
      arktest.assertTrue(a[0][0] instanceof [check_type])
      arktest.assertTrue(a[0][0].data instanceof [data_type])
      arktest.assertEQ(a[0][0].data, [check_value_0_0])
      arktest.assertTrue(a[0][1] instanceof [check_type])
      arktest.assertTrue(a[0][1].data instanceof [data_type])
      arktest.assertEQ(a[0][1].data, [check_value_0_1])
      arktest.assertTrue(a[1][0] instanceof [check_type])
      arktest.assertTrue(a[1][0].data instanceof [data_type])
      arktest.assertEQ(a[1][0].data, [check_value_1_0])
      arktest.assertTrue(a[1][1] instanceof [check_type])
      arktest.assertTrue(a[1][1].data instanceof [data_type])
      arktest.assertEQ(a[1][1].data, [check_value_1_1])

  - desc: |-
      >-
        Checking for 2d Arrays with mix of types T[] and Array<T>
        are identical on predefined types by using cast expression.
    check_variants: check_variants_for_predefined_types
    decl_variants:
      - |-
        function cast(p: Object) {
          return p as Array<Array<[check_type]>>
        }
      - |-
        function cast(p: Object) {
          return p as [check_type][][]
        }
      - |-
        function cast(p: Object) {
          return p as Array<[check_type]>[]
        }
      - |-
        function cast(p: Object) {
          return p as Array<[check_type][]>
        }
      - |-
        function cast(p: Object): Array<[check_type][]> {
          return p as Array<[check_type]>[]
        }
      - |-
        function cast(p: Object): Array<[check_type]>[] {
          return p as Array<[check_type][]>
        }
    sub_cases_logic:
      - |-
        let a: [check_type][][] = [init_lit]
        let b: Array<Array<[check_type]>> = cast(a)
        [common_logic]
      - |-
        let a: Array<Array<[check_type]>> = [init_lit]
        let b: [check_type][][] = cast(a)
        [common_logic]
      - |-
        let a: Array<[check_type][]> = [init_lit]
        let b: Array<[check_type]>[] = cast(a)
        [common_logic]
      - |-
        let a: Array<[check_type]>[] = [init_lit]
        let b: Array<[check_type][]> = cast(a)
        [common_logic]
    common_logic: |-
      arktest.assertTrue(a instanceof Array)
      arktest.assertTrue(a[0] instanceof Array)
      arktest.assertTrue(a[1] instanceof Array)
      arktest.assertTrue(b instanceof Array)
      arktest.assertTrue(b[0] instanceof Array)
      arktest.assertTrue(b[1] instanceof Array)
      arktest.assertEQ(b.length, 2)
      arktest.assertEQ(b[0].length, 2)
      arktest.assertEQ(b[1].length, 2)
      arktest.assertTrue(b[0][0] instanceof [check_type])
      arktest.assertEQ(b[0][0], [check_value_0_0])
      arktest.assertTrue(b[0][1] instanceof [check_type])
      arktest.assertEQ(b[0][1], [check_value_0_1])
      arktest.assertTrue(b[1][0] instanceof [check_type])
      arktest.assertEQ(b[1][0], [check_value_1_0])
      arktest.assertTrue(b[1][1] instanceof [check_type])
      arktest.assertEQ(b[1][1], [check_value_1_1])
      a = b
      arktest.assertTrue(a instanceof Array)
      arktest.assertTrue(a[0] instanceof Array)
      arktest.assertTrue(a[1] instanceof Array)
      arktest.assertEQ(a.length, 2)
      arktest.assertEQ(a[0].length, 2)
      arktest.assertEQ(a[1].length, 2)
      arktest.assertTrue(a[0][0] instanceof [check_type])
      arktest.assertEQ(a[0][0], [check_value_0_0])
      arktest.assertTrue(a[0][1] instanceof [check_type])
      arktest.assertEQ(a[0][1], [check_value_0_1])
      arktest.assertTrue(a[1][0] instanceof [check_type])
      arktest.assertEQ(a[1][0], [check_value_1_0])
      arktest.assertTrue(a[1][1] instanceof [check_type])
      arktest.assertEQ(a[1][1], [check_value_1_1])

  - desc: |-
      >-
        Checking for 2d Arrays with mix of types T[] and Array<T>
        are identical on custom types by using cast expression.
    check_variants: check_variants_for_custom_types
    decl_variants:
      - |-
        [cv_decl_data]
        function cast(p: Object) {
          return p as Array<Array<[check_type]>>
        }
      - |-
        [cv_decl_data]
        function cast(p: Object) {
          return p as [check_type][][]
        }
      - |-
        [cv_decl_data]
        function cast(p: Object) {
          return p as Array<[check_type]>[]
        }
      - |-
        [cv_decl_data]
        function cast(p: Object) {
          return p as Array<[check_type][]>
        }
      - |-
        [cv_decl_data]
        function cast(p: Object): Array<[check_type][]> {
          return p as Array<[check_type]>[]
        }
      - |-
        [cv_decl_data]
        function cast(p: Object): Array<[check_type]>[] {
          return p as Array<[check_type][]>
        }
    sub_cases_logic:
      - |-
        let a: [check_type][][] = [init_lit]
        let b: Array<Array<[check_type]>> = cast(a)
        [common_logic]
      - |-
        let a: Array<Array<[check_type]>> = [init_lit]
        let b: [check_type][][] = cast(a)
        [common_logic]
      - |-
        let a: Array<[check_type][]> = [init_lit]
        let b: Array<[check_type]>[] = cast(a)
        [common_logic]
      - |-
        let a: Array<[check_type]>[] = [init_lit]
        let b: Array<[check_type][]> = cast(a)
        [common_logic]
    common_logic: |-
      arktest.assertTrue(a instanceof Array)
      arktest.assertTrue(a[0] instanceof Array)
      arktest.assertTrue(a[1] instanceof Array)
      arktest.assertTrue(b instanceof Array)
      arktest.assertTrue(b[0] instanceof Array)
      arktest.assertTrue(b[1] instanceof Array)
      arktest.assertEQ(b.length, 2)
      arktest.assertEQ(b[0].length, 2)
      arktest.assertEQ(b[1].length, 2)
      arktest.assertTrue(b[0][0] instanceof [check_type])
      arktest.assertTrue(b[0][0].data instanceof [data_type])
      arktest.assertEQ(b[0][0].data, [check_value_0_0])
      arktest.assertTrue(b[0][1] instanceof [check_type])
      arktest.assertTrue(b[0][1].data instanceof [data_type])
      arktest.assertEQ(b[0][1].data, [check_value_0_1])
      arktest.assertTrue(b[1][0] instanceof [check_type])
      arktest.assertTrue(b[1][0].data instanceof [data_type])
      arktest.assertEQ(b[1][0].data, [check_value_1_0])
      arktest.assertTrue(b[1][1] instanceof [check_type])
      arktest.assertTrue(b[1][1].data instanceof [data_type])
      arktest.assertEQ(b[1][1].data, [check_value_1_1])
      a = b
      arktest.assertTrue(a instanceof Array)
      arktest.assertTrue(a[0] instanceof Array)
      arktest.assertTrue(a[1] instanceof Array)
      arktest.assertEQ(a.length, 2)
      arktest.assertEQ(a[0].length, 2)
      arktest.assertEQ(a[1].length, 2)
      arktest.assertTrue(a[0][0] instanceof [check_type])
      arktest.assertTrue(a[0][0].data instanceof [data_type])
      arktest.assertEQ(a[0][0].data, [check_value_0_0])
      arktest.assertTrue(a[0][1] instanceof [check_type])
      arktest.assertTrue(a[0][1].data instanceof [data_type])
      arktest.assertEQ(a[0][1].data, [check_value_0_1])
      arktest.assertTrue(a[1][0] instanceof [check_type])
      arktest.assertTrue(a[1][0].data instanceof [data_type])
      arktest.assertEQ(a[1][0].data, [check_value_1_0])
      arktest.assertTrue(a[1][1] instanceof [check_type])
      arktest.assertTrue(a[1][1].data instanceof [data_type])
      arktest.assertEQ(a[1][1].data, [check_value_1_1])

  - desc: |-
      >-
        Checking for 2d Arrays with mix of types T[] and Array<T>
        are identical on predefined types on function call.
    check_variants: check_variants_for_predefined_types
    decl_variants:
      - |-
        function foo(p: Array<Array<[check_type]>>): Array<Array<[check_type]>> {
          return p
        }
      - |-
        function foo(p: Array<Array<[check_type]>>): [check_type][][] {
          return p
        }
      - |-
        function foo(p: [check_type][][]): [check_type][][] {
          return p
        }
      - |-
        function foo(p: [check_type][][]): Array<Array<[check_type]>> {
          return p
        }
      - |-
        function foo(p: Array<[check_type]>[]): Array<[check_type][]> {
          return p
        }
      - |-
        function foo(p: Array<[check_type][]>): Array<[check_type]>[] {
          return p
        }
    sub_cases_logic:
      - |-
        let a: [check_type][][] = [init_lit]
        let b: Array<Array<[check_type]>> = foo(a)
        [common_logic]
      - |-
        let a: Array<Array<[check_type]>> = [init_lit]
        let b: [check_type][][] = foo(a)
        [common_logic]
      - |-
        let a: Array<[check_type][]> = [init_lit]
        let b: Array<[check_type]>[] = foo(a)
        [common_logic]
      - |-
        let a: Array<[check_type]>[] = [init_lit]
        let b: Array<[check_type][]> = foo(a)
        [common_logic]
    common_logic: |-
      arktest.assertTrue(a instanceof Array)
      arktest.assertTrue(a[0] instanceof Array)
      arktest.assertTrue(a[1] instanceof Array)
      arktest.assertTrue(b instanceof Array)
      arktest.assertTrue(b[0] instanceof Array)
      arktest.assertTrue(b[1] instanceof Array)
      arktest.assertEQ(b.length, 2)
      arktest.assertEQ(b[0].length, 2)
      arktest.assertEQ(b[1].length, 2)
      arktest.assertTrue(b[0][0] instanceof [check_type])
      arktest.assertEQ(b[0][0], [check_value_0_0])
      arktest.assertTrue(b[0][1] instanceof [check_type])
      arktest.assertEQ(b[0][1], [check_value_0_1])
      arktest.assertTrue(b[1][0] instanceof [check_type])
      arktest.assertEQ(b[1][0], [check_value_1_0])
      arktest.assertTrue(b[1][1] instanceof [check_type])
      arktest.assertEQ(b[1][1], [check_value_1_1])
      a = b
      arktest.assertTrue(a instanceof Array)
      arktest.assertTrue(a[0] instanceof Array)
      arktest.assertTrue(a[1] instanceof Array)
      arktest.assertEQ(a.length, 2)
      arktest.assertEQ(a[0].length, 2)
      arktest.assertEQ(a[1].length, 2)
      arktest.assertTrue(a[0][0] instanceof [check_type])
      arktest.assertEQ(a[0][0], [check_value_0_0])
      arktest.assertTrue(a[0][1] instanceof [check_type])
      arktest.assertEQ(a[0][1], [check_value_0_1])
      arktest.assertTrue(a[1][0] instanceof [check_type])
      arktest.assertEQ(a[1][0], [check_value_1_0])
      arktest.assertTrue(a[1][1] instanceof [check_type])
      arktest.assertEQ(a[1][1], [check_value_1_1])

  - desc: |-
      >-
        Checking for 2d Arrays with mix of types T[] and Array<T>
        are identical on custom types on function call.
    check_variants: check_variants_for_custom_types
    decl_variants:
      - |-
        [cv_decl_data]
        function foo(p: Array<Array<[check_type]>>): Array<Array<[check_type]>> {
          return p
        }
      - |-
        [cv_decl_data]
        function foo(p: Array<Array<[check_type]>>): [check_type][][] {
          return p
        }
      - |-
        [cv_decl_data]
        function foo(p: [check_type][][]): [check_type][][] {
          return p
        }
      - |-
        [cv_decl_data]
        function foo(p: [check_type][][]): Array<Array<[check_type]>> {
          return p
        }
      - |-
        [cv_decl_data]
        function foo(p: Array<[check_type]>[]): Array<[check_type][]> {
          return p
        }
      - |-
        [cv_decl_data]
        function foo(p: Array<[check_type][]>): Array<[check_type]>[] {
          return p
        }
    sub_cases_logic:
      - |-
        let a: [check_type][][] = [init_lit]
        let b: Array<Array<[check_type]>> = foo(a)
        [common_logic]
      - |-
        let a: Array<Array<[check_type]>> = [init_lit]
        let b: [check_type][][] = foo(a)
        [common_logic]
      - |-
        let a: Array<[check_type][]> = [init_lit]
        let b: Array<[check_type]>[] = foo(a)
        [common_logic]
      - |-
        let a: Array<[check_type]>[] = [init_lit]
        let b: Array<[check_type][]> = foo(a)
        [common_logic]
    common_logic: |-
      arktest.assertTrue(a instanceof Array)
      arktest.assertTrue(a[0] instanceof Array)
      arktest.assertTrue(a[1] instanceof Array)
      arktest.assertTrue(b instanceof Array)
      arktest.assertTrue(b[0] instanceof Array)
      arktest.assertTrue(b[1] instanceof Array)
      arktest.assertEQ(b.length, 2)
      arktest.assertEQ(b[0].length, 2)
      arktest.assertEQ(b[1].length, 2)
      arktest.assertTrue(b[0][0] instanceof [check_type])
      arktest.assertTrue(b[0][0].data instanceof [data_type])
      arktest.assertEQ(b[0][0].data, [check_value_0_0])
      arktest.assertTrue(b[0][1] instanceof [check_type])
      arktest.assertTrue(b[0][1].data instanceof [data_type])
      arktest.assertEQ(b[0][1].data, [check_value_0_1])
      arktest.assertTrue(b[1][0] instanceof [check_type])
      arktest.assertTrue(b[1][0].data instanceof [data_type])
      arktest.assertEQ(b[1][0].data, [check_value_1_0])
      arktest.assertTrue(b[1][1] instanceof [check_type])
      arktest.assertTrue(b[1][1].data instanceof [data_type])
      arktest.assertEQ(b[1][1].data, [check_value_1_1])
      a = b
      arktest.assertTrue(a instanceof Array)
      arktest.assertTrue(a[0] instanceof Array)
      arktest.assertTrue(a[1] instanceof Array)
      arktest.assertEQ(a.length, 2)
      arktest.assertEQ(a[0].length, 2)
      arktest.assertEQ(a[1].length, 2)
      arktest.assertTrue(a[0][0] instanceof [check_type])
      arktest.assertTrue(a[0][0].data instanceof [data_type])
      arktest.assertEQ(a[0][0].data, [check_value_0_0])
      arktest.assertTrue(a[0][1] instanceof [check_type])
      arktest.assertTrue(a[0][1].data instanceof [data_type])
      arktest.assertEQ(a[0][1].data, [check_value_0_1])
      arktest.assertTrue(a[1][0] instanceof [check_type])
      arktest.assertTrue(a[1][0].data instanceof [data_type])
      arktest.assertEQ(a[1][0].data, [check_value_1_0])
      arktest.assertTrue(a[1][1] instanceof [check_type])
      arktest.assertTrue(a[1][1].data instanceof [data_type])
      arktest.assertEQ(a[1][1].data, [check_value_1_1])
