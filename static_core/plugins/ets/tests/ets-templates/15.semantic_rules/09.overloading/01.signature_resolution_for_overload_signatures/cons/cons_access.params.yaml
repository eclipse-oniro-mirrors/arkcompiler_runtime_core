# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          class A {
              f: Any

              constructor(p: string)
              constructor(p: number)
              constructor(...p: Any[]) {
                  this.f = "A " + p[0]
              }
          }

          class B extends A {
              constructor(p: string)
              constructor(p: number)
              constructor(...p: Any[]) {
                  super(p[0])
                  this.f += "B " + p[0]
              }
          }
      use: |-
          arktest.assertEQ(new B(42.0).f, "A 42B 42")
          arktest.assertEQ(new B("XX").f, "A XXB XX")
          arktest.assertEQ(new A(42.0).f, "A 42")
          arktest.assertEQ(new A("XX").f, "A XX")

    - decl: |-
          class A {
              f: Any

              protected constructor(p: string)
              protected constructor(p: number)
              protected constructor(...p: Any[]) {
                  this.f = "A " + p[0]
              }
          }

          class B extends A {
              constructor(p: string)
              constructor(p: number)
              constructor(...p: Any[]) {
                  super(p[0])
              }
          }
      use: |-
          arktest.assertEQ(new B("XX").f, "A XX")
          arktest.assertEQ(new B(42.0).f, "A 42")

    - tags: 'compile-only, negative'
      decl: |-
          class A {
              f: Any

              private constructor(p: string)
              private constructor(p: number)
              private constructor(...p: Any[]) {
                  this.f = "A " + p[0]
              }

              constructor(p: string, x: number)
              constructor(p: number, x: number)
              constructor(...p: Any[]) {
                  this(p[0])
              }
          }
      use: |-
          new A(42.0, 0) // CTE: Multiple constructor implementations are not allowed
