# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          class A {
              m(p: string): string
              m(p: number): string
              m(...p: Any[]): Any {
                  return "A " + p[0]
              }
          }

          class B extends A {
              m(p: string): string
              m(p: number): string
              m(...p: Any[]): Any {
                  return "B " + p[0]
              }
          }
      use: |-
          arktest.assertEQ(new B().m(42.0), "B 42")
          arktest.assertEQ(new B().m("XX"), "B XX")
          arktest.assertEQ(new A().m(42.0), "A 42")
          arktest.assertEQ(new A().m("XX"), "A XX")

    - decl: |-
          class A {
              m(p: string): string
              m(p: number): string
              m(...p: Any[]): Any {
                  return "A " + p[0]
              }
          }

          class B extends A {}
      use: |-
          arktest.assertEQ(new B().m(42.0), "A 42")
          arktest.assertEQ(new B().m("XX"), "A XX")
          arktest.assertEQ(new A().m(42.0), "A 42")
          arktest.assertEQ(new A().m("XX"), "A XX")

    - decl: |-
          class A {
              protected m(p: string): string
              protected m(p: number): string
              protected m(...p: Any[]): Any {
                  return "A " + p[0]
              }
          }

          class B extends A {
              ms(p: string): string { return this.m(p) }
              mn(p: number): string { return this.m(p) }
          }
      use: |-
          arktest.assertEQ(new B().ms("XX"), "A XX")
          arktest.assertEQ(new B().mn(42.0), "A 42")

    - decl: |-
          class A {
              protected m(p: string): string
              protected m(p: number): string
              protected m(...p: Any[]): Any {
                  return "A " + p[0]
              }
          }

          class B extends A {
              m(p: string): string
              m(p: number): string
              m(...p: Any[]): Any {
                  return "B " + p[0] + super.m(p[0])
              }
          }
      use: |-
          arktest.assertEQ(new B().m(42.0), "B 42A 42")
          arktest.assertEQ(new B().m("XX"), "B XXA XX")

    - decl: |-
          class A {
              private _m(p: string): string
              private _m(p: number): string
              private _m(...p: Any[]): Any {
                  return "A " + p[0]
              }

              m(p: string): string
              m(p: number): string
              m(...p: Any[]): Any {
                  return this._m(p[0])
              }

          }
      use: |-
          arktest.assertEQ(new A().m(42.0), "A 42")
          arktest.assertEQ(new A().m("XX"), "A XX")

    - decl: |-
          class A {
              private _m(p: string): string
              private _m(p: number): string
              private _m(...p: Any[]): Any {
                  return "A " + p[0]
              }

              protected m(p: string): string
              protected m(p: number): string
              protected m(...p: Any[]): Any {
                  return this._m(p[0])
              }
          }

          class B extends A {
              public m(p: string): string
              m(p: number): string
              public m(...p: Any[]): Any {
                  return "B " + super.m(p[0])
              }
          }
      use: |-
          arktest.assertEQ(new B().m(42.0), "B A 42")
          arktest.assertEQ(new B().m("XX"), "B A XX")
