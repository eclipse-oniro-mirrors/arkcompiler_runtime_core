# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Checking that difference type A - B is a subtype of Object
        if A is a subtype of Object on literal union types
    check_variants:
      - check_data:
          check_type_A:
            "\"Done\" | \"In Progress\" | \"On Review\""
          check_type_B: "\"In Progress\""
          check_type_B_expression: "v === \"In Progress\""
          cv_decl_data: |-
            function check_value_from_type_A(v: Any): boolean {
              if (v instanceof string) {
                return v === "Done" ||
                v === "In Progress" ||
                v ==="On Review"
              }
              else {
                return false
              }
            }
        check_values_groups:
          - check_values_group_data:
            - check_value_1: "\"In Progress\""
              check_value_2: "\"On Review\""
              check_type_T: "Object"
              check_type_T_expression: "v instanceof Object"
    decl_variants:
      - |-
        [cv_decl_data]
        function foo(v: [check_type_T]): void {
          arktest.assertTrue(check_value_from_type_A(v))
        }
        function f1(v: [check_type_A]): int {
          arktest.assertTrue([check_type_T_expression])
          foo(v)
          return f2(v)
        }
        function f2(v: [check_type_A]): int {
          if ([check_type_B_expression]) {
            arktest.assertEQ(v, [check_value_1])
            return 1
          }
          else {
            arktest.assertTrue(check_value_from_type_A(v))
            arktest.assertTrue([check_type_T_expression])
            foo(v)
            arktest.assertEQ(v, [check_value_2])
            return 2
          }
        }
      - |-
        [cv_decl_data]
        function foo(v: [check_type_T]): void {
          arktest.assertTrue(check_value_from_type_A(v))
        }
        function f1(v: [check_type_A]): int {
          if ([check_type_T_expression]) {
            foo(v)
            return f2(v)
          }
          else {
            return 0
          }
        }
        function f2(v: [check_type_A]): int {
          if ([check_type_B_expression]) {
            arktest.assertEQ(v, [check_value_1])
            return 1
          }
          else {
            arktest.assertTrue(check_value_from_type_A(v))
            arktest.assertTrue([check_type_T_expression])
            foo(v)
            arktest.assertEQ(v, [check_value_2])
            return 2
          }
        }
    sub_cases_logic:
      - |-
        let res: int = f1([check_value_1])
        arktest.assertEQ(res, 1)
        res = f1([check_value_2])
        arktest.assertEQ(res, 2)
