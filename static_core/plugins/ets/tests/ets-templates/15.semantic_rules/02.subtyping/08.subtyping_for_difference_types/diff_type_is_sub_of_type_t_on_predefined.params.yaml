# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Checking that difference type A - B is a subtype of T
        if A is a subtype of T in case of usage instanceof
        on predefined types
    check_variants:
      - check_data:
          check_type_A: "Object | undefined"
          check_type_B: "undefined"
        check_values_groups:
          - check_values_group_data:
            - { check_value_1: "undefined", check_value_2: "5n",
                check_type_T:  "Object | undefined | null" }
            - { check_value_1: "undefined", check_value_2: "10.7",
                check_type_T:  "Any" }
            - { check_value_1: "undefined", check_value_2: "\"abc\"",
                check_type_T:  "Object | undefined | Any" }
      - check_data:
          check_type_A: "Object | undefined"
          check_type_B: "bigint | undefined"
        check_values_groups:
          - check_values_group_data:
            - { check_value_1: "undefined", check_value_2: "7",
                check_type_T:  "Object | undefined | null" }
            - { check_value_1: "5n", check_value_2: "10.7",
                check_type_T:  "Any" }
            - { check_value_1: "123n", check_value_2: "\"abc\"",
                check_type_T:  "Object | undefined | Any" }
      - check_data:
          check_type_A: "Object | undefined | null"
          check_type_B: "undefined"
        check_values_groups:
          - check_values_group_data:
            - { check_value_1: "undefined", check_value_2: "5n",
                check_type_T:  "Any" }
            - { check_value_1: "undefined", check_value_2: "null",
                check_type_T:  "Object | undefined | Any" }
            - { check_value_1: "undefined", check_value_2: "10.7",
                check_type_T:  "Object | Any | undefined" }
      - check_data:
          check_type_A: "Object | undefined | null"
          check_type_B: "null"
        check_values_groups:
          - check_values_group_data:
            - { check_value_1: "null", check_value_2: "5n",
                check_type_T:  "Any" }
            - { check_value_1: "null", check_value_2: "undefined",
                check_type_T:  "Object | undefined | Any" }
            - { check_value_1: "null", check_value_2: "10.7",
                check_type_T:  "Object | null | undefined" }
      - check_data:
          check_type_A: "Object | undefined | null"
          check_type_B: "undefined | null"
        check_values_groups:
          - check_values_group_data:
            - { check_value_1: "null", check_value_2: "5n",
                check_type_T:  "Any" }
            - { check_value_1: "undefined", check_value_2: "\"abc\"",
                check_type_T:  "Object | undefined | Any" }
            - { check_value_1: "null", check_value_2: "10.7",
                check_type_T:  "Object | null | undefined" }
      - check_data:
          check_type_A: "Object | undefined | null"
          check_type_B: "bigint | undefined | null"
        check_values_groups:
          - check_values_group_data:
            - { check_value_1: "null", check_value_2: "5",
                check_type_T:  "Any" }
            - { check_value_1: "undefined", check_value_2: "\"abc\"",
                check_type_T:  "Object | undefined | Any" }
            - { check_value_1: "5n", check_value_2: "10.7",
                check_type_T:  "Object | null | undefined" }
      - check_data:
          check_type_A: "number | boolean"
          check_type_B: "boolean"
        check_values_groups:
          - check_values_group_data:
            - { check_value_1: "true", check_value_2: "5",
                check_type_T:  "number | boolean | string" }
            - { check_value_1: "true", check_value_2: "-7",
                check_type_T:  "int | boolean | number" }
      - check_data:
          check_type_A: "number | boolean"
          check_type_B: "number"
        check_values_groups:
          - check_values_group_data:
            - { check_value_1: "5", check_value_2: "true",
                check_type_T:  "number | boolean | string" }
            - { check_value_1: "-7", check_value_2: "true",
                check_type_T:  "int | boolean | number" }
      - check_data:
          check_type_A: "int | string | boolean"
          check_type_B: "string"
        check_values_groups:
          - check_values_group_data:
            - { check_value_1: "\"abc\"", check_value_2: "5",
                check_type_T:  "number | boolean | string | int" }
            - { check_value_1: "\"cab\"", check_value_2: "false",
                check_type_T:  "Any" }
      - check_data:
          check_type_A: "int | string | boolean"
          check_type_B: "string | boolean"
        check_values_groups:
          - check_values_group_data:
            - { check_value_1: "\"abc\"", check_value_2: "5",
                check_type_T:  "int | string | boolean | char" }
            - { check_value_1: "false", check_value_2: "7",
                check_type_T:  "number | boolean | string | int" }
    decl_variants:
      - |-
        function foo(v: [check_type_T]): void {
          arktest.assertTrue(v instanceof [check_type_A])
        }
        function f1(v: [check_type_A]): int {
          arktest.assertTrue(v instanceof [check_type_T])
          foo(v)
          return f2(v)
        }
        function f2(v: [check_type_A]): int {
          if (v instanceof [check_type_B]) {
            arktest.assertEQ(v, [check_value_1])
            return 1
          }
          else {
            arktest.assertTrue(v instanceof [check_type_A])
            arktest.assertTrue(v instanceof [check_type_T])
            foo(v)
            arktest.assertEQ(v, [check_value_2])
            return 2
          }
        }
      - |-
        function foo(v: [check_type_T]): void {
          arktest.assertTrue(v instanceof [check_type_A])
        }
        function f1(v: [check_type_A]): int {
          if (v instanceof [check_type_T]) {
            foo(v)
            return f2(v)
          }
          else {
            return 0
          }
        }
        function f2(v: [check_type_A]): int {
          if (v instanceof [check_type_B]) {
            arktest.assertEQ(v, [check_value_1])
            return 1
          }
          else {
            arktest.assertTrue(v instanceof [check_type_A])
            arktest.assertTrue(v instanceof [check_type_T])
            foo(v)
            arktest.assertEQ(v, [check_value_2])
            return 2
          }
        }
    sub_cases_logic:
      - |-
        let res: int = f1([check_value_1])
        arktest.assertEQ(res, 1)
        res = f1([check_value_2])
        arktest.assertEQ(res, 2)
