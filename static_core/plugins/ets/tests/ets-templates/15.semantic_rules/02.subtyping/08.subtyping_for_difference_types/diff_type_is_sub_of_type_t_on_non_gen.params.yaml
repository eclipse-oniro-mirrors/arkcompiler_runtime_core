# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Checking that difference type A - B is a subtype of T
        if A is a subtype of T in case of usage instanceof
        on non generic custom types
    check_variants:
      - check_data:
          check_type_A: "Cat | Dog | Frog | number"
          check_type_B: "number | Dog"
          cv_decl_data: |-
            class Animal {}
            class Cat extends Animal {v: string = "cat"}
            class Dog extends Animal {v: bigint = 123n}
            class Frog extends Animal {v: int = 5}
            function check_cat(a: Any) {
              arktest.assertTrue(a instanceof Cat)
              arktest.assertEQ((a as Cat).v, "cat")
            }
            function check_dog(a: Any) {
              arktest.assertTrue(a instanceof Dog)
              arktest.assertEQ((a as Dog).v, 123n)
            }
            function check_frog(a: Any) {
              arktest.assertTrue(a instanceof Frog)
              arktest.assertEQ((a as Frog).v, 5)
            }
            function check_number(a: Any) {
              arktest.assertTrue(a instanceof number)
              arktest.assertEQ(a as number, 7.8)
            }
        check_values_groups:
          - check_values_group_data:
            - { set_value_1: "new Dog()",
                check_func_1: "check_dog",
                set_value_2: "new Cat()",
                check_func_2: "check_cat",
                check_type_T:  "Frog | number | Cat | Dog | int" }
            - { set_value_1: "7.8",
                check_func_1: "check_number",
                set_value_2: "new Frog()",
                check_func_2: "check_frog",
                check_type_T:  "Animal | number" }
      - check_data:
          check_type_A: "C1 | C2 | B2 | Other"
          check_type_B: "B1 | Other"
          cv_decl_data: |-
            abstract class A {}
            abstract class B1 extends A {}
            class B2 extends A {v: bigint = 123n}
            class C1 extends B1 {v: int = 321}
            class C2 extends B1 {v: number = 6.7}
            class Other {v: string = "other"}
            function check_C1(a: Any) {
              arktest.assertTrue(a instanceof C1)
              arktest.assertEQ((a as C1).v, 321)
            }
            function check_C2(a: Any) {
              arktest.assertTrue(a instanceof C2)
              arktest.assertEQ((a as C2).v, 6.7)
            }
            function check_B2(a: Any) {
              arktest.assertTrue(a instanceof B2)
              arktest.assertEQ((a as B2).v, 123n)
            }
            function check_Other(a: Any) {
              arktest.assertTrue(a instanceof Other)
              arktest.assertEQ((a as Other).v, "other")
            }
        check_values_groups:
          - check_values_group_data:
            - { set_value_1: "new C1()",
                check_func_1: "check_C1",
                set_value_2: "new B2()",
                check_func_2: "check_B2",
                check_type_T:  "B2 | Other | C1 | C2 | number" }
            - { set_value_1: "new C2()",
                check_func_1: "check_C2",
                set_value_2: "new B2()",
                check_func_2: "check_B2",
                check_type_T:  "B1 | B2 | Other" }
            - { set_value_1: "new Other()",
                check_func_1: "check_Other",
                set_value_2: "new B2()",
                check_func_2: "check_B2",
                check_type_T:  "A | Other" }
      - check_data:
          check_type_A: "III1 | III2 | II2"
          check_type_B: "II1"
          cv_decl_data: |-
            interface I1 {}
            interface I2 {}
            interface II1 extends I1, I2 {}
            interface II2 extends I1, I2 {}
            interface III1 extends II1 {}
            interface III2 extends II1 {}
            class C1 implements III1 {v: bigint = 123n}
            class C2 implements III2 {v: int = 321}
            class C3 implements II2 {v: number = 7.8}
            function check_C1(a: Any) {
              arktest.assertTrue(a instanceof C1)
              arktest.assertTrue(a instanceof III1)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I1)
              arktest.assertTrue(a instanceof I2)
              arktest.assertEQ((a as C1).v, 123n)
            }
            function check_C2(a: Any) {
              arktest.assertTrue(a instanceof C2)
              arktest.assertTrue(a instanceof III2)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I1)
              arktest.assertTrue(a instanceof I2)
              arktest.assertEQ((a as C2).v, 321)
            }
            function check_C3(a: Any) {
              arktest.assertTrue(a instanceof C3)
              arktest.assertTrue(a instanceof II2)
              arktest.assertTrue(a instanceof I1)
              arktest.assertTrue(a instanceof I2)
              arktest.assertEQ((a as C3).v, 7.8)
            }
        check_values_groups:
          - check_values_group_data:
            - { set_value_1: "new C1()",
                check_func_1: "check_C1",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_type_T:  "III1 | II2 | III2 | number" }
            - { set_value_1: "new C2()",
                check_func_1: "check_C2",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_type_T:  "II1 | II2" }
            - { set_value_1: "new C1()",
                check_func_1: "check_C1",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_type_T:  "I1 | I2" }
          - check_values_group_data:
            - { set_value_1: "new C2()",
                check_func_1: "check_C2",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_type_T:  "I1" }
            - { set_value_1: "new C1()",
                check_func_1: "check_C1",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_type_T:  "I2" }
      - check_data:
          check_type_A: "III1 | III2 | II2"
          check_type_B: "III2"
          cv_decl_data: |-
            interface I {}
            interface II1 extends I {}
            interface II2 extends I {}
            interface III1 extends II1 {}
            interface III2 extends II1 {}
            class C1 implements III1, III2 {v: bigint = 123n}
            class C2 implements II2, III2 {v: int = 321}
            class C3 implements III1 {v: number = 7.8}
            function check_C1(a: Any) {
              arktest.assertTrue(a instanceof C1)
              arktest.assertTrue(a instanceof III1)
              arktest.assertTrue(a instanceof III2)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I)
              arktest.assertEQ((a as C1).v, 123n)
            }
            function check_C2(a: Any) {
              arktest.assertTrue(a instanceof C2)
              arktest.assertTrue(a instanceof II2)
              arktest.assertTrue(a instanceof III2)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I)
              arktest.assertEQ((a as C2).v, 321)
            }
            function check_C3(a: Any) {
              arktest.assertTrue(a instanceof C3)
              arktest.assertTrue(a instanceof III1)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I)
              arktest.assertEQ((a as C3).v, 7.8)
            }
        check_values_groups:
          - check_values_group_data:
            - { set_value_1: "new C1()",
                check_func_1: "check_C1",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_type_T:  "III1 | II2 | III2 | number" }
            - { set_value_1: "new C2()",
                check_func_1: "check_C2",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_type_T:  "II1 | II2" }
          - check_values_group_data:
            - { set_value_1: "new C1()",
                check_func_1: "check_C1",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_type_T:  "I" }
    decl_variants:
      - |-
        [cv_decl_data]
        function foo(v: [check_type_T]): void {
          arktest.assertTrue(v instanceof [check_type_A])
        }
        function f1(v: [check_type_A]): int {
          arktest.assertTrue(v instanceof [check_type_T])
          foo(v)
          return f2(v)
        }
        function f2(v: [check_type_A]): int {
          if (v instanceof [check_type_B]) {
            [check_func_1](v)
            return 1
          }
          else {
            arktest.assertTrue(v instanceof [check_type_A])
            arktest.assertTrue(v instanceof [check_type_T])
            foo(v)
            [check_func_2](v)
            return 2
          }
        }
      - |-
        [cv_decl_data]
        function foo(v: [check_type_T]): void {
          arktest.assertTrue(v instanceof [check_type_A])
        }
        function f1(v: [check_type_A]): int {
          if (v instanceof [check_type_T]) {
            foo(v)
            return f2(v)
          }
          else {
            return 0
          }
        }
        function f2(v: [check_type_A]): int {
          if (v instanceof [check_type_B]) {
            [check_func_1](v)
            return 1
          }
          else {
            arktest.assertTrue(v instanceof [check_type_A])
            arktest.assertTrue(v instanceof [check_type_T])
            foo(v)
            [check_func_2](v)
            return 2
          }
        }
    sub_cases_logic:
      - |-
        let res: int = f1([set_value_1])
        arktest.assertEQ(res, 1)
        res = f1([set_value_2])
        arktest.assertEQ(res, 2)
