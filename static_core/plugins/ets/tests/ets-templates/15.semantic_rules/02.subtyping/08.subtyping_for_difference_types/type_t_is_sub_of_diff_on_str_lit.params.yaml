# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Checking that Type T is a subtype of the difference type A - B
        if T is a subtype of A, and no value belongs both to T and B
        in case of usage instanceof on literal union types
    check_variants:
      - check_data:
          set_type_A: "\"Done\" | \"In Progress\" | \"On Review\" | int"
          check_type_A: "string | int"
          check_type_B: "\"In Progress\""
          cv_decl_data: |-
            function check_is_subtype_of_A(a: Any): boolean {
              let res: boolean = false
              if (a instanceof string | int) {
                if (a instanceof int) {
                  res = true
                }
                else {
                  if ((a === "Done") ||
                      (a === "In Progress") ||
                      (a === "On Review")) {
                    res = true
                  }
                }
              }
              return res
            }
            function check_is_in_diff_type(v: Any): boolean {
              if (v === "In Progress") {
                let b: "In Progress"  = v as "In Progress"
                arktest.assertEQ(b, "In Progress")
                return false
              }
              else {
                return true
              }
            }
            function check_is_not_in_B_type(v: Any) {
              arktest.assertFalse(v === "In Progress")
            }
        check_values_groups:
          - check_values_group_data:
            - { check_type_T:  "int",
                is_subtype_of_diff: "true",
                check_value_1: "123",
                check_value_1_is_subtype_of_A: "true",
                check_value_2: "456",
                check_value_2_is_subtype_of_A: "true" }
            - { check_type_T:  "byte",
                is_subtype_of_diff: "false",
                check_value_1: "4",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "5",
                check_value_2_is_subtype_of_A: "false" }
            - { check_type_T:  "short",
                is_subtype_of_diff: "false",
                check_value_1: "123",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "456",
                check_value_2_is_subtype_of_A: "false" }
            - { check_type_T:  "float",
                is_subtype_of_diff: "false",
                check_value_1: "123",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "45.6",
                check_value_2_is_subtype_of_A: "false" }
            - { check_type_T:  "bigint",
                is_subtype_of_diff: "false",
                check_value_1: "123n",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "456n",
                check_value_2_is_subtype_of_A: "false" }
            - { check_type_T:  "string",
                is_subtype_of_diff: "false",
                check_value_1: "\"abc\"",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "\"defg\"",
                check_value_2_is_subtype_of_A: "false" }
            - { check_type_T:  "char",
                is_subtype_of_diff: "false",
                check_value_1: "c'a'",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "c'b'",
                check_value_2_is_subtype_of_A: "false" }
            - { check_type_T:  "Object",
                is_subtype_of_diff: "false",
                check_value_1: "5n",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "123",
                check_value_2_is_subtype_of_A: "true" }
            - { check_type_T:  "Object | undefined",
                is_subtype_of_diff: "false",
                check_value_1: "5n",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "undefined",
                check_value_2_is_subtype_of_A: "false" }
            - { check_type_T:  "Object | undefined | null",
                is_subtype_of_diff: "false",
                check_value_1: "null",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "undefined",
                check_value_2_is_subtype_of_A: "false" }
            - { check_type_T:  "undefined",
                is_subtype_of_diff: "false",
                check_value_1: "undefined",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "undefined",
                check_value_2_is_subtype_of_A: "false" }
            - { check_type_T:  "Any",
                is_subtype_of_diff: "false",
                check_value_1: "5n",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "123",
                check_value_2_is_subtype_of_A: "true" }
            - { check_type_T: "\"In Progress\"",
                is_subtype_of_diff: "false",
                check_value_1: "\"In Progress\"",
                check_value_1_is_subtype_of_A: "true",
                check_value_2: "\"In Progress\"",
                check_value_2_is_subtype_of_A: "true" }
            - { check_type_T: "\"Done\" | \"On Review\"",
                is_subtype_of_diff: "true",
                check_value_1: "\"Done\"",
                check_value_1_is_subtype_of_A: "true",
                check_value_2: "\"On Review\"",
                check_value_2_is_subtype_of_A: "true" }
            - { check_type_T: "\"Done\" | int",
                is_subtype_of_diff: "true",
                check_value_1: "\"Done\"",
                check_value_1_is_subtype_of_A: "true",
                check_value_2: "123",
                check_value_2_is_subtype_of_A: "true" }
          - check_values_group_data:
            - { check_type_T:  "long",
                is_subtype_of_diff: "false",
                check_value_1: "123",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "456",
                check_value_2_is_subtype_of_A: "false" }
            - { check_type_T:  "double",
                is_subtype_of_diff: "false",
                check_value_1: "123",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "45.6",
                check_value_2_is_subtype_of_A: "false" }
            - { check_type_T:  "number",
                is_subtype_of_diff: "false",
                check_value_1: "123",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "45.6",
                check_value_2_is_subtype_of_A: "false" }
            - { check_type_T:  "boolean",
                is_subtype_of_diff: "false",
                check_value_1: "false",
                check_value_1_is_subtype_of_A: "false",
                check_value_2: "true",
                check_value_2_is_subtype_of_A: "false" }
    decl_variants:
      - |-
        [cv_decl_data]
        function check(v: [check_type_T],
                      is_subtype_of_A: boolean, v_id: int): boolean {
          let res: boolean = check_is_subtype_of_A(v)
          arktest.assertEQ(res, is_subtype_of_A)
          if (res) {
            arktest.assertEQ(v instanceof [check_type_A], true)
            if (v instanceof [check_type_A]) {
              res = check_is_in_diff_type_with_value(v, v_id)
            }
          }
          if (res) {
            check_is_not_in_B_type_with_value(v, v_id)
          }
          return res
        }
        function check_value(v: Any, v_id: int): void {
          if (v_id == 1) {
            arktest.assertEQ(v as [check_type_T], [check_value_1])
          }
          else {
            arktest.assertEQ(v as [check_type_T], [check_value_2])
          }
        }
        function check_is_in_diff_type_with_value(v: [check_type_A],
                                      v_id: int): boolean {
          check_value(v, v_id)
          return check_is_in_diff_type(v)
        }
        function check_is_not_in_B_type_with_value(v: Any, v_id: int): void {
          check_value(v, v_id)
          check_is_not_in_B_type(v)
        }
    sub_cases_logic:
      - |-
        let v1: [check_type_T] = [check_value_1]
        let v2: [check_type_T] = [check_value_2]
        let res: boolean =
          check(v1, [check_value_1_is_subtype_of_A], 1) &
          check(v2, [check_value_2_is_subtype_of_A], 2)
        arktest.assertEQ(res, [is_subtype_of_diff])
