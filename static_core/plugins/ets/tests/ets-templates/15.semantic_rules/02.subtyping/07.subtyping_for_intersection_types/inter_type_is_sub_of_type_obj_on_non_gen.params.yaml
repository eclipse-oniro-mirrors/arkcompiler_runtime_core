# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Checking that intersection type I (defined as I1 & I2)
        is a subtype of type Object if Ii is a subtype of Object for some i
        in case of usage instanceof on non generic custom types
    check_variants:
      - check_data:
          check_type_I1: "Cat | Dog | Frog | number"
          check_type_I2: "number | Dog | bigint"
          cv_decl_data: |-
            class Animal {}
            class Cat extends Animal {v: string = "cat"}
            class Dog extends Animal {v: bigint = 123n}
            class Frog extends Animal {v: int = 5}
            function check_cat(a: Any) {
              arktest.assertTrue(a instanceof Cat)
              arktest.assertEQ((a as Cat).v, "cat")
            }
            function check_dog(a: Any) {
              arktest.assertTrue(a instanceof Dog)
              arktest.assertEQ((a as Dog).v, 123n)
            }
            function check_frog(a: Any) {
              arktest.assertTrue(a instanceof Frog)
              arktest.assertEQ((a as Frog).v, 5)
            }
            function check_number(a: Any) {
              arktest.assertTrue(a instanceof number)
              arktest.assertEQ(a as number, 7.8)
            }
            function check_bigint(a: Any) {
              arktest.assertTrue(a instanceof bigint)
              arktest.assertEQ(a as bigint, 5n)
            }
        check_values_groups:
          - check_values_group_data:
            - { check_type_T: "Object",
                set_value_from_I1_inter_I2: "new Dog()",
                check_value_from_I1_inter_I2_func: "check_dog",
                set_value_from_I1_diff_I2: "new Cat()",
                check_value_from_I1_diff_I2_func: "check_cat",
                set_value_from_I2_diff_I1: "5n",
                check_value_from_I2_diff_I1_func: "check_bigint" }
            - { check_type_T: "Object",
                set_value_from_I1_inter_I2: "7.8",
                check_value_from_I1_inter_I2_func: "check_number",
                set_value_from_I1_diff_I2: "new Frog()",
                check_value_from_I1_diff_I2_func: "check_frog",
                set_value_from_I2_diff_I1: "5n",
                check_value_from_I2_diff_I1_func: "check_bigint" }
      - check_data:
          check_type_I1: "C1 | C2 | B2 | Other"
          check_type_I2: "B1 | Other | bigint"
          cv_decl_data: |-
            abstract class A {}
            abstract class B1 extends A {}
            class B2 extends A {v: bigint = 123n}
            class C1 extends B1 {v: int = 321}
            class C2 extends B1 {v: number = 6.7}
            class Other {v: string = "other"}
            function check_C1(a: Any) {
              arktest.assertTrue(a instanceof C1)
              arktest.assertEQ((a as C1).v, 321)
            }
            function check_C2(a: Any) {
              arktest.assertTrue(a instanceof C2)
              arktest.assertEQ((a as C2).v, 6.7)
            }
            function check_B2(a: Any) {
              arktest.assertTrue(a instanceof B2)
              arktest.assertEQ((a as B2).v, 123n)
            }
            function check_Other(a: Any) {
              arktest.assertTrue(a instanceof Other)
              arktest.assertEQ((a as Other).v, "other")
            }
            function check_bigint(a: Any) {
              arktest.assertTrue(a instanceof bigint)
              arktest.assertEQ(a as bigint, 5n)
            }
        check_values_groups:
          - check_values_group_data:
            - { check_type_T: "Object",
                set_value_from_I1_inter_I2: "new C1()",
                check_value_from_I1_inter_I2_func: "check_C1",
                set_value_from_I1_diff_I2: "new B2()",
                check_value_from_I1_diff_I2_func: "check_B2",
                set_value_from_I2_diff_I1: "5n",
                check_value_from_I2_diff_I1_func: "check_bigint" }
            - { check_type_T: "Object",
                set_value_from_I1_inter_I2: "new C2()",
                check_value_from_I1_inter_I2_func: "check_C2",
                set_value_from_I1_diff_I2: "new B2()",
                check_value_from_I1_diff_I2_func: "check_B2",
                set_value_from_I2_diff_I1: "5n",
                check_value_from_I2_diff_I1_func: "check_bigint" }
            - { check_type_T: "Object",
                set_value_from_I1_inter_I2: "new Other()",
                check_value_from_I1_inter_I2_func: "check_Other",
                set_value_from_I1_diff_I2: "new B2()",
                check_value_from_I1_diff_I2_func: "check_B2",
                set_value_from_I2_diff_I1: "5n",
                check_value_from_I2_diff_I1_func: "check_bigint" }
      - check_data:
          check_type_I1: "III1 | III2 | II2"
          check_type_I2: "II1 | bigint"
          cv_decl_data: |-
            interface I1 {}
            interface I2 {}
            interface II1 extends I1, I2 {}
            interface II2 extends I1, I2 {}
            interface III1 extends II1 {}
            interface III2 extends II1 {}
            class C1 implements III1 {v: bigint = 123n}
            class C2 implements III2 {v: int = 321}
            class C3 implements II2 {v: number = 7.8}
            function check_C1(a: Any) {
              arktest.assertTrue(a instanceof C1)
              arktest.assertTrue(a instanceof III1)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I1)
              arktest.assertTrue(a instanceof I2)
              arktest.assertEQ((a as C1).v, 123n)
            }
            function check_C2(a: Any) {
              arktest.assertTrue(a instanceof C2)
              arktest.assertTrue(a instanceof III2)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I1)
              arktest.assertTrue(a instanceof I2)
              arktest.assertEQ((a as C2).v, 321)
            }
            function check_C3(a: Any) {
              arktest.assertTrue(a instanceof C3)
              arktest.assertTrue(a instanceof II2)
              arktest.assertTrue(a instanceof I1)
              arktest.assertTrue(a instanceof I2)
              arktest.assertEQ((a as C3).v, 7.8)
            }
            function check_bigint(a: Any) {
              arktest.assertTrue(a instanceof bigint)
              arktest.assertEQ(a as bigint, 5n)
            }
        check_values_groups:
          - check_values_group_data:
            - { check_type_T: "Object",
                set_value_from_I1_inter_I2: "new C1()",
                check_value_from_I1_inter_I2_func: "check_C1",
                set_value_from_I1_diff_I2: "new C3()",
                check_value_from_I1_diff_I2_func: "check_C3",
                set_value_from_I2_diff_I1: "5n",
                check_value_from_I2_diff_I1_func: "check_bigint" }
            - { check_type_T: "Object",
                set_value_from_I1_inter_I2: "new C2()",
                check_value_from_I1_inter_I2_func: "check_C2",
                set_value_from_I1_diff_I2: "new C3()",
                check_value_from_I1_diff_I2_func: "check_C3",
                set_value_from_I2_diff_I1: "5n",
                check_value_from_I2_diff_I1_func: "check_bigint" }
      - check_data:
          check_type_I1: "III1 | III2 | II2"
          check_type_I2: "III2 | bigint"
          cv_decl_data: |-
            interface I {}
            interface II1 extends I {}
            interface II2 extends I {}
            interface III1 extends II1 {}
            interface III2 extends II1 {}
            class C1 implements III1, III2 {v: bigint = 123n}
            class C2 implements II2, III2 {v: int = 321}
            class C3 implements III1 {v: number = 7.8}
            function check_C1(a: Any) {
              arktest.assertTrue(a instanceof C1)
              arktest.assertTrue(a instanceof III1)
              arktest.assertTrue(a instanceof III2)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I)
              arktest.assertEQ((a as C1).v, 123n)
            }
            function check_C2(a: Any) {
              arktest.assertTrue(a instanceof C2)
              arktest.assertTrue(a instanceof II2)
              arktest.assertTrue(a instanceof III2)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I)
              arktest.assertEQ((a as C2).v, 321)
            }
            function check_C3(a: Any) {
              arktest.assertTrue(a instanceof C3)
              arktest.assertTrue(a instanceof III1)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I)
              arktest.assertEQ((a as C3).v, 7.8)
            }
            function check_bigint(a: Any) {
              arktest.assertTrue(a instanceof bigint)
              arktest.assertEQ(a as bigint, 5n)
            }
        check_values_groups:
          - check_values_group_data:
            - { check_type_T: "Object",
                set_value_from_I1_inter_I2: "new C1()",
                check_value_from_I1_inter_I2_func: "check_C1",
                set_value_from_I1_diff_I2: "new C3()",
                check_value_from_I1_diff_I2_func: "check_C3",
                set_value_from_I2_diff_I1: "5n",
                check_value_from_I2_diff_I1_func: "check_bigint" }
            - { check_type_T: "Object",
                set_value_from_I1_inter_I2: "new C2()",
                check_value_from_I1_inter_I2_func: "check_C2",
                set_value_from_I1_diff_I2: "new C3()",
                check_value_from_I1_diff_I2_func: "check_C3",
                set_value_from_I2_diff_I1: "5n",
                check_value_from_I2_diff_I1_func: "check_bigint" }
    decl_variants:
      - |-
        [cv_decl_data]
        function check_value(v: Any, v_id: int): void {
          if (v_id == 1) {
            [check_value_from_I1_inter_I2_func](v)
            [check_value_from_I1_inter_I2_func](v as [check_type_I1])
            [check_value_from_I1_inter_I2_func](v as [check_type_I2])
          }
          else if (v_id == 2) {
            [check_value_from_I1_diff_I2_func](v)
            [check_value_from_I1_diff_I2_func](v as [check_type_I1])
          }
          else {
            [check_value_from_I2_diff_I1_func](v)
            [check_value_from_I2_diff_I1_func](v as [check_type_I2])
          }
        }
        function check_value_as_type_T(v: [check_type_T], v_id: int): void {
          arktest.assertTrue(v instanceof [check_type_I1] ||
            v instanceof [check_type_I2])
          check_value(v, v_id)
        }
        function check_is_in_T_type(v: [check_type_I1] | [check_type_I2],
                                    v_id: int): boolean {
          check_value(v, v_id)
          if (v instanceof [check_type_I1]) {
            check_value(v, v_id)
            if (v instanceof [check_type_I2]) {
              arktest.assertEQ(v_id, 1)
              check_value(v, v_id)
              arktest.assertTrue(v instanceof [check_type_I1])
              arktest.assertTrue(v instanceof [check_type_T])
              if (v instanceof [check_type_T]) {
                check_value_as_type_T(v, v_id)
                return true
              } else {
                return false
              }
            }
            else {
              arktest.assertEQ(v_id, 2)
              check_value(v, v_id)
              if (v instanceof [check_type_T]) {
                check_value_as_type_T(v, v_id)
                return true
              } else {
                return false
              }
            }
          }
          else {
            arktest.assertEQ(v_id, 3)
            check_value(v, v_id)
            if (v instanceof [check_type_T]) {
              check_value_as_type_T(v, v_id)
              return true
            } else {
              return false
            }
          }
        }
    sub_cases_logic:
      - |-
        let res1: boolean = check_is_in_T_type(
          [set_value_from_I1_inter_I2], 1)
        let res2: boolean = check_is_in_T_type(
          [set_value_from_I1_diff_I2], 2)
        let res3: boolean = check_is_in_T_type(
          [set_value_from_I2_diff_I1], 3)
        arktest.assertTrue(res1 && (res2 || res3))
