# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Checking that type T is a subtype of intersection type (I1 & I2)
        if T is a subtype of each Ii in case of usage instanceof
        on non generic custom types
    check_variants:
      - check_data:
          check_type_I1: "Cat | Dog | number"
          check_type_I2: "number | Dog"
          cv_decl_data: |-
            class Animal {}
            class Cat extends Animal {v: string = "cat"}
            class Dog extends Animal {v: bigint = 123n}
            class Frog extends Animal {v: int = 5}
            function check_cat(a: Any) {
              arktest.assertTrue(a instanceof Cat)
              arktest.assertEQ((a as Cat).v, "cat")
            }
            function check_dog(a: Any) {
              arktest.assertTrue(a instanceof Dog)
              arktest.assertEQ((a as Dog).v, 123n)
            }
            function check_frog(a: Any) {
              arktest.assertTrue(a instanceof Frog)
              arktest.assertEQ((a as Frog).v, 5)
            }
            function check_number(a: Any) {
              arktest.assertTrue(a instanceof number)
              arktest.assertEQ(a as number, 7.8)
            }
            function check_int(a: Any) {
              arktest.assertTrue(a instanceof int)
              arktest.assertEQ(a as int, 123)
            }
        check_values_groups:
          - check_values_group_data:
            - { check_type_T:  "Cat | Dog | int",
                is_subtype_of_inter_type: "false",
                set_value_1: "123",
                check_func_1: "check_int",
                check_value_1_is_subtype_of_inter_type: "false",
                set_value_2: "new Dog()",
                check_func_2: "check_dog",
                check_value_2_is_subtype_of_inter_type: "true" }
            - { check_type_T:  "Animal | number",
                is_subtype_of_inter_type: "false",
                set_value_1: "7.8",
                check_func_1: "check_number",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new Frog()",
                check_func_2: "check_frog",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "Cat",
                is_subtype_of_inter_type: "false",
                set_value_1: "new Cat()",
                check_func_1: "check_cat",
                check_value_1_is_subtype_of_inter_type: "false",
                set_value_2: "new Cat()",
                check_func_2: "check_cat",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "Dog | Frog",
                is_subtype_of_inter_type: "false",
                set_value_1: "new Dog()",
                check_func_1: "check_dog",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new Frog()",
                check_func_2: "check_frog",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "Dog | number",
                is_subtype_of_inter_type: "true",
                set_value_1: "new Dog()",
                check_func_1: "check_dog",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "7.8",
                check_func_2: "check_number",
                check_value_2_is_subtype_of_inter_type: "true" }
      - check_data:
          check_type_I1: "C1 | B2 | Other | int"
          check_type_I2: "B1 | Other"
          cv_decl_data: |-
            abstract class A {}
            abstract class B1 extends A {}
            class B2 extends A {v: bigint = 123n}
            class C1 extends B1 {v: int = 321}
            class C2 extends B1 {v: number = 6.7}
            class Other {v: string = "other"}
            function check_C1(a: Any) {
              arktest.assertTrue(a instanceof C1)
              arktest.assertEQ((a as C1).v, 321)
            }
            function check_C2(a: Any) {
              arktest.assertTrue(a instanceof C2)
              arktest.assertEQ((a as C2).v, 6.7)
            }
            function check_B2(a: Any) {
              arktest.assertTrue(a instanceof B2)
              arktest.assertEQ((a as B2).v, 123n)
            }
            function check_Other(a: Any) {
              arktest.assertTrue(a instanceof Other)
              arktest.assertEQ((a as Other).v, "other")
            }
            function check_int(a: Any) {
              arktest.assertTrue(a instanceof int)
              arktest.assertEQ(a as int, 123)
            }
        check_values_groups:
          - check_values_group_data:
            - { check_type_T:  "B2 | Other | C1",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C1()",
                check_func_1: "check_C1",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new B2()",
                check_func_2: "check_B2",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "B1 | Other",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C1()",
                check_func_1: "check_C1",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new C2()",
                check_func_2: "check_C2",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "A | Other",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C1()",
                check_func_1: "check_C1",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new B2()",
                check_func_2: "check_B2",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "B2 | int",
                is_subtype_of_inter_type: "false",
                set_value_1: "new B2()",
                check_func_1: "check_B2",
                check_value_1_is_subtype_of_inter_type: "false",
                set_value_2: "123",
                check_func_2: "check_int",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "C1 | Other",
                is_subtype_of_inter_type: "true",
                set_value_1: "new C1()",
                check_func_1: "check_C1",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new Other()",
                check_func_2: "check_Other",
                check_value_2_is_subtype_of_inter_type: "true" }
      - check_data:
          check_type_I1: "III1 | II2 | int"
          check_type_I2: "II1"
          cv_decl_data: |-
            interface I1 {}
            interface I2 {}
            interface II1 extends I1, I2 {}
            interface II2 extends I1, I2 {}
            interface III1 extends II1 {}
            interface III2 extends II1 {}
            class C1 implements III1 {v: bigint = 123n}
            class C2 implements III2 {v: int = 321}
            class C3 implements II2 {v: number = 7.8}
            function check_C1(a: Any) {
              arktest.assertTrue(a instanceof C1)
              arktest.assertTrue(a instanceof III1)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I1)
              arktest.assertTrue(a instanceof I2)
              arktest.assertEQ((a as C1).v, 123n)
            }
            function check_C2(a: Any) {
              arktest.assertTrue(a instanceof C2)
              arktest.assertTrue(a instanceof III2)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I1)
              arktest.assertTrue(a instanceof I2)
              arktest.assertEQ((a as C2).v, 321)
            }
            function check_C3(a: Any) {
              arktest.assertTrue(a instanceof C3)
              arktest.assertTrue(a instanceof II2)
              arktest.assertTrue(a instanceof I1)
              arktest.assertTrue(a instanceof I2)
              arktest.assertEQ((a as C3).v, 7.8)
            }
            function check_int(a: Any) {
              arktest.assertTrue(a instanceof int)
              arktest.assertEQ(a as int, 123)
            }
        check_values_groups:
          - check_values_group_data:
            - { check_type_T:  "II1 | II2",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C2()",
                check_func_1: "check_C2",
                check_value_1_is_subtype_of_inter_type: "false",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "I1",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C2()",
                check_func_1: "check_C2",
                check_value_1_is_subtype_of_inter_type: "false",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "C3 | int",
                is_subtype_of_inter_type: "false",
                set_value_1: "123",
                check_func_1: "check_int",
                check_value_1_is_subtype_of_inter_type: "false",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_value_2_is_subtype_of_inter_type: "false" }
          - check_values_group_data:
            - { check_type_T:  "III1",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C1()",
                check_func_1: "check_C1",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new C1()",
                check_func_2: "check_C1",
                check_value_2_is_subtype_of_inter_type: "true" }
            - { check_type_T:  "II1",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C1()",
                check_func_1: "check_C1",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new C2()",
                check_func_2: "check_C2",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "III1 | II2 | III2",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C1()",
                check_func_1: "check_C1",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "I1 | I2",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C1()",
                check_func_1: "check_C1",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "I2",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C1()",
                check_func_1: "check_C1",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_value_2_is_subtype_of_inter_type: "false" }
      - check_data:
          check_type_I1: "III1 | III2 | II2 | int"
          check_type_I2: "III2"
          cv_decl_data: |-
            interface I {}
            interface II1 extends I {}
            interface II2 extends I {}
            interface III1 extends II1 {}
            interface III2 extends II1 {}
            class C1 implements III1, III2 {v: bigint = 123n}
            class C2 implements II2, III2 {v: int = 321}
            class C3 implements III1 {v: number = 7.8}
            function check_C1(a: Any) {
              arktest.assertTrue(a instanceof C1)
              arktest.assertTrue(a instanceof III1)
              arktest.assertTrue(a instanceof III2)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I)
              arktest.assertEQ((a as C1).v, 123n)
            }
            function check_C2(a: Any) {
              arktest.assertTrue(a instanceof C2)
              arktest.assertTrue(a instanceof II2)
              arktest.assertTrue(a instanceof III2)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I)
              arktest.assertEQ((a as C2).v, 321)
            }
            function check_C3(a: Any) {
              arktest.assertTrue(a instanceof C3)
              arktest.assertTrue(a instanceof III1)
              arktest.assertTrue(a instanceof II1)
              arktest.assertTrue(a instanceof I)
              arktest.assertEQ((a as C3).v, 7.8)
            }
            function check_int(a: Any) {
              arktest.assertTrue(a instanceof int)
              arktest.assertEQ(a as int, 123)
            }
        check_values_groups:
          - check_values_group_data:
            - { check_type_T:  "III1 | III2",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C1()",
                check_func_1: "check_C1",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "II1 | II2",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C2()",
                check_func_1: "check_C2",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "I",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C1()",
                check_func_1: "check_C1",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new C3()",
                check_func_2: "check_C3",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "C3 | int",
                is_subtype_of_inter_type: "false",
                set_value_1: "new C3()",
                check_func_1: "check_C3",
                check_value_1_is_subtype_of_inter_type: "false",
                set_value_2: "123",
                check_func_2: "check_int",
                check_value_2_is_subtype_of_inter_type: "false" }
            - { check_type_T:  "C1 | C2",
                is_subtype_of_inter_type: "true",
                set_value_1: "new C1()",
                check_func_1: "check_C1",
                check_value_1_is_subtype_of_inter_type: "true",
                set_value_2: "new C2()",
                check_func_2: "check_C2",
                check_value_2_is_subtype_of_inter_type: "true" }
    decl_variants:
      - |-
        [cv_decl_data]
        function check_value(v: Any,
                            is_subtype_of_inter_type: boolean,
                            v_id: int): void {
          arktest.assertTrue(v instanceof [check_type_T])
          if (v_id == 1) {
            [check_func_1](v as [check_type_T])
            if (is_subtype_of_inter_type) {
              arktest.assertTrue(v instanceof [check_type_I1] &&
                                v instanceof [check_type_I2])
              [check_func_1](v as [check_type_I1])
              [check_func_1](v as [check_type_I2])
            }
          }
          else {
            [check_func_2](v as [check_type_T])
            if (is_subtype_of_inter_type) {
              arktest.assertTrue(v instanceof [check_type_I1] &&
                                v instanceof [check_type_I2])
              [check_func_2](v as [check_type_I1])
              [check_func_2](v as [check_type_I2])
            }
          }
        }
        function check(v: [check_type_T],
                      is_subtype_of_inter_type: boolean,
                      v_id: int): boolean {
          let res: boolean = false
          arktest.assertEQ(v instanceof [check_type_I1] &&
                          v instanceof [check_type_I2],
                          is_subtype_of_inter_type)
          check_value(v, is_subtype_of_inter_type, v_id)
          if (v instanceof [check_type_I1]) {
            check_value(v, is_subtype_of_inter_type, v_id)
            if (v_id == 1) {
              [check_func_1](v as [check_type_I1])
            }
            else {
              [check_func_2](v as [check_type_I1])
            }
            res = check_is_in_inter_type(v, is_subtype_of_inter_type, v_id)
            if (!res) {
              arktest.assertFalse(v instanceof [check_type_I2])
              check_is_not_in_I2_type(v, is_subtype_of_inter_type, v_id)
            }
          }
          return res
        }
        function check_is_in_inter_type(v: [check_type_I1],
                                      is_subtype_of_inter_type: boolean,
                                      v_id: int): boolean {
          check_value(v, is_subtype_of_inter_type, v_id)
          if (v_id == 1) {
            [check_func_1](v as [check_type_I1])
          }
          else {
            [check_func_2](v as [check_type_I1])
          }
          if (v instanceof [check_type_I2]) {
            arktest.assertTrue(is_subtype_of_inter_type)
            check_value(v, is_subtype_of_inter_type, v_id)
            if (v_id == 1) {
              [check_func_1](v as [check_type_I2])
            }
            else {
              [check_func_2](v as [check_type_I2])
            }
            let b: [check_type_I2] = v as [check_type_I2]
            check_value(b, is_subtype_of_inter_type, v_id)
            return true
          }
          else {
            return false
          }
        }
        function check_is_not_in_I2_type(v: Any,
                                        is_subtype_of_inter_type: boolean,
                                        v_id: int): void {
          check_value(v, is_subtype_of_inter_type, v_id)
          arktest.assertFalse(v instanceof [check_type_I2])
          let expectedError = (e: Error): boolean => {
              return (e instanceof Error)
          }
          arktest.expectThrow(() => {
            let b: [check_type_I2] = v as [check_type_I2]
          }, expectedError)
        }
    sub_cases_logic:
      - |-
        let v1: [check_type_T] = [set_value_1]
        let v2: [check_type_T] = [set_value_2]
        let res: boolean =
          check(v1, [check_value_1_is_subtype_of_inter_type], 1) &
          check(v2, [check_value_2_is_subtype_of_inter_type], 2)
        arktest.assertEQ(res, [is_subtype_of_inter_type])
