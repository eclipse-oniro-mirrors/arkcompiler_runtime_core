# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - desc: |-
      >-
        Checking that intersection type I (defined as I1 & I2)
        is a subtype of type T if Ii is a subtype of T for some i
        in case of usage instanceof on literal union types
    check_variants:
      - check_data:
          set_type_I1: "\"Done\" | \"In Progress\""
          check_type_I1: "string"
          set_type_I2: "\"In Progress\" | \"On Review\""
          check_type_I2: "string"
          cv_decl_data: |-
                function check_value_from_type_I1(v: Any): boolean {
                  if (v instanceof string) {
                    return v === "Done" ||
                      v === "In Progress"
                  }
                  else {
                    return false
                  }
                }
                function check_value_from_type_I2(v: Any): boolean {
                  if (v instanceof string) {
                    return v === "In Progress" ||
                      v === "On Review"
                  }
                  else {
                    return false
                  }
                }
        check_values_groups:
          - check_values_group_data:
            - check_type_T: "string"
              cv_add_decl_data: |-
                function check_value_from_type_T(v: Any): boolean {
                  if (v instanceof string) {
                    return v === "Done" ||
                      v === "In Progress" ||
                      v === "Investigating"
                  }
                  else {
                    return false
                  }
                }
              check_value_from_I1_inter_I2: "\"In Progress\""
              check_value_from_I1_diff_I2: "\"Done\""
              check_value_from_I2_diff_I1: "\"On Review\""
            - check_type_T: "string | bigint"
              cv_add_decl_data: |-
                function check_value_from_type_T(v: Any): boolean {
                  if (v instanceof string) {
                    return v === "In Progress" ||
                    v === "On Review" ||
                    v instanceof bigint
                  }
                  else {
                    return false
                  }
                }
              check_value_from_I1_inter_I2: "\"In Progress\""
              check_value_from_I1_diff_I2: "\"Done\""
              check_value_from_I2_diff_I1: "\"On Review\""
            - check_type_T: "Any"
              cv_add_decl_data: |-
                function check_value_from_type_T(v: Any): boolean {
                  return v instanceof Any
                }
              check_value_from_I1_inter_I2: "\"In Progress\""
              check_value_from_I1_diff_I2: "\"Done\""
              check_value_from_I2_diff_I1: "\"On Review\""
      - check_data:
          set_type_I1:
            "\"Done\" | \"In Progress\" | \"Blocked\" | int"
          check_type_I1: "string | int"
          set_type_I2:
            "int | \"In Progress\" | \"On Review\""
          check_type_I2: "string | int"
          cv_decl_data: |-
                function check_value_from_type_I1(v: Any): boolean {
                  if (v instanceof string | int) {
                    return v === "Done" ||
                      v === "In Progress" ||
                      v === "Blocked" || v instanceof int
                  }
                  else {
                    return false
                  }
                }
                function check_value_from_type_I2(v: Any): boolean {
                  if (v instanceof string | int) {
                    return v instanceof int ||
                      v === "In Progress" ||
                      v === "On Review"
                  }
                  else {
                    return false
                  }
                }
        check_values_groups:
          - check_values_group_data:
            - check_type_T: "string | int"
              cv_add_decl_data: |-
                function check_value_from_type_T(v: Any): boolean {
                  if (v instanceof string | int) {
                    return v === "Done" ||
                      v === "In Progress" ||
                      v === "Blocked" ||
                      v instanceof int ||
                      v === "Investigating"
                  }
                  else {
                    return false
                  }
                }
              check_value_from_I1_inter_I2: "\"In Progress\""
              check_value_from_I1_diff_I2: "\"Done\""
              check_value_from_I2_diff_I1: "\"On Review\""
            - check_type_T: "string | int"
              cv_add_decl_data: |-
                function check_value_from_type_T(v: Any): boolean {
                  if (v instanceof string | int) {
                    return v === "Done" ||
                      v === "In Progress" ||
                      v === "Blocked" ||
                      v instanceof int ||
                      v === "Investigating"
                  }
                  else {
                    return false
                  }
                }
              check_value_from_I1_inter_I2: "123"
              check_value_from_I1_diff_I2: "\"Done\""
              check_value_from_I2_diff_I1: "\"On Review\""
            - check_type_T: "int | string | bigint"
              cv_add_decl_data: |-
                function check_value_from_type_T(v: Any): boolean {
                  if (v instanceof int | string | bigint) {
                    return v instanceof int ||
                      v === "In Progress" ||
                      v === "On Review" ||
                      v instanceof bigint
                  }
                  else {
                    return false
                  }
                }
              check_value_from_I1_inter_I2: "\"In Progress\""
              check_value_from_I1_diff_I2: "\"Done\""
              check_value_from_I2_diff_I1: "\"On Review\""
            - check_type_T: "int | string | bigint"
              cv_add_decl_data: |-
                function check_value_from_type_T(v: Any): boolean {
                  if (v instanceof int | string | bigint) {
                    return v instanceof int ||
                      v === "In Progress" ||
                      v === "On Review" ||
                      v instanceof bigint
                  }
                  else {
                    return false
                  }
                }
              check_value_from_I1_inter_I2: "123"
              check_value_from_I1_diff_I2: "\"Done\""
              check_value_from_I2_diff_I1: "\"On Review\""
            - check_type_T: "Any"
              cv_add_decl_data: |-
                function check_value_from_type_T(v: Any): boolean {
                  return v instanceof Any
                }
              check_value_from_I1_inter_I2: "\"In Progress\""
              check_value_from_I1_diff_I2: "\"Done\""
              check_value_from_I2_diff_I1: "\"On Review\""
            - check_type_T: "Any"
              cv_add_decl_data: |-
                function check_value_from_type_T(v: Any): boolean {
                  return v instanceof Any
                }
              check_value_from_I1_inter_I2: "123"
              check_value_from_I1_diff_I2: "\"Done\""
              check_value_from_I2_diff_I1: "\"On Review\""
    decl_variants:
      - |-
        [cv_decl_data]
        [cv_add_decl_data]
        function check_value(v: [set_type_I1] | [set_type_I2], v_id: int): void {
          if (v_id == 1) {
            arktest.assertEQ(v as [set_type_I1],
              [check_value_from_I1_inter_I2])
            arktest.assertEQ(v as [set_type_I2],
              [check_value_from_I1_inter_I2])
          }
          else if (v_id == 2) {
            arktest.assertEQ(v as [set_type_I1],
              [check_value_from_I1_diff_I2])
          }
          else {
            arktest.assertEQ(v as [set_type_I2],
              [check_value_from_I2_diff_I1])
          }
        }
        function check_is_in_T_type(v: [set_type_I1] | [set_type_I2],
                                    v_id: int): boolean {
          check_value(v, v_id)
          if (check_value_from_type_I1(v)) {
            check_value(v, v_id)
            arktest.assertTrue(v instanceof [check_type_I1])
            check_value(v, v_id)
            if (check_value_from_type_I2(v)) {
              arktest.assertEQ(v_id, 1)
              check_value(v, v_id)
              arktest.assertEQ(v, [check_value_from_I1_inter_I2])
              arktest.assertTrue(v instanceof [check_type_I1])
              arktest.assertTrue(v instanceof [check_type_I2])
              check_value(v, v_id)
              arktest.assertTrue(v instanceof [check_type_T])
              arktest.assertTrue(check_value_from_type_T(v))
              return true
            }
            else {
              arktest.assertEQ(v_id, 2)
              check_value(v, v_id)
              arktest.assertEQ(v, [check_value_from_I1_diff_I2])
              arktest.assertTrue(v instanceof [check_type_I1])
              if (check_value_from_type_T(v)) {
                arktest.assertTrue(v instanceof [check_type_T])
                return true
              } else {
                return false
              }
            }
          }
          else {
            arktest.assertEQ(v_id, 3)
            check_value(v, v_id)
            arktest.assertEQ(v, [check_value_from_I2_diff_I1])
            arktest.assertTrue(v instanceof [check_type_I2])
            if (check_value_from_type_T(v)) {
              arktest.assertTrue(v instanceof [check_type_T])
              return true
            } else {
              return false
            }
          }
        }
      - |-
        [cv_decl_data]
        [cv_add_decl_data]
        function check_value(v: [set_type_I1] | [set_type_I2], v_id: int): void {
          if (v_id == 1) {
            arktest.assertEQ(v as [set_type_I1],
              [check_value_from_I1_inter_I2])
            arktest.assertEQ(v as [set_type_I2],
              [check_value_from_I1_inter_I2])
          }
          else if (v_id == 2) {
            arktest.assertEQ(v as [set_type_I1],
              [check_value_from_I1_diff_I2])
          }
          else {
            arktest.assertEQ(v as [set_type_I2],
              [check_value_from_I2_diff_I1])
          }
        }
        function check_is_in_T_type(v: [set_type_I1] | [set_type_I2],
                                    v_id: int): boolean {
          check_value(v, v_id)
          if (check_value_from_type_I1(v)) {
            check_value(v, v_id)
            arktest.assertTrue(v instanceof [check_type_I1])
            if (v instanceof [check_type_I1]) {
              check_value(v, v_id)
            }
            if (check_value_from_type_I2(v)) {
              arktest.assertEQ(v_id, 1)
              check_value(v, v_id)
              arktest.assertEQ(v, [check_value_from_I1_inter_I2])
              arktest.assertTrue(v instanceof [check_type_I1])
              arktest.assertTrue(v instanceof [check_type_I2])
              if (v instanceof [check_type_I2]) {
                check_value(v, v_id)
              }
              arktest.assertTrue(v instanceof [check_type_T])
              arktest.assertTrue(check_value_from_type_T(v))
              return true
            }
            else {
              arktest.assertEQ(v_id, 2)
              check_value(v, v_id)
              arktest.assertEQ(v, [check_value_from_I1_diff_I2])
              arktest.assertTrue(v instanceof [check_type_I1])
              if (check_value_from_type_T(v)) {
                arktest.assertTrue(v instanceof [check_type_T])
                return true
              } else {
                return false
              }
            }
          }
          else {
            arktest.assertEQ(v_id, 3)
            check_value(v, v_id)
            arktest.assertEQ(v, [check_value_from_I2_diff_I1])
            arktest.assertTrue(v instanceof [check_type_I2])
            if (check_value_from_type_T(v)) {
              arktest.assertTrue(v instanceof [check_type_T])
              return true
            } else {
              return false
            }
          }
        }
    sub_cases_logic:
      - |-
        let res1: boolean = check_is_in_T_type(
          [check_value_from_I1_inter_I2], 1)
        let res2: boolean = check_is_in_T_type(
          [check_value_from_I1_diff_I2], 2)
        let res3: boolean = check_is_in_T_type(
          [check_value_from_I2_diff_I1], 3)
        arktest.assertTrue(res1 && (res2 || res3))
