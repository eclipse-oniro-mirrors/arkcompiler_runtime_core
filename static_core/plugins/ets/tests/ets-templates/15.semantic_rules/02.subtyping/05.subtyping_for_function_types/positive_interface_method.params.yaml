# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # single type param 
    - decl: |-
          foobb = foobd // OK: identical parameter types, and covariant return type
      check: |-
          arktest.assertTrue(foobb(new Base) instanceof Derived)
          arktest.assertEQ(foobb(new Base).b, 'd')
    - decl: |-
          foodb = foobd // OK: contravariant parameter types, and covariant return type
      check: |-
          arktest.assertTrue(foodb(new Base) instanceof Derived)
          arktest.assertEQ(foodb(new Base).b, 'd')
    - decl: |-
          foodb = foodd // OK: identical parameter types, and covariant return type
      check: |-
          arktest.assertTrue(foodb(new Derived) instanceof Derived)
          arktest.assertEQ(foodb(new Derived).b, 'd')
    - decl: |-
          foodd = foobd // OK: contravariant parameter types, and identical return type
      check: |-
          arktest.assertTrue(foodd(new Base) instanceof Derived)
          arktest.assertEQ(foodd(new Base).b, 'd')
    # subtype has less parameters
    - decl: |-
          foobbn = foobb
      check: |-
          arktest.assertTrue(foobbn(new Base, 1) instanceof Base)
          arktest.assertEQ(foobbn(new Base, 1).b, 'b')
    - decl: |-
          foobbo = foobb
      check: |-
          arktest.assertTrue(foobbo(new Base) instanceof Base)
          arktest.assertEQ(foobbo(new Base).b, 'b')
    - decl: |-
          foobbr = foobb
      check: |-
          arktest.assertTrue(foobbr(new Base) instanceof Base)
          arktest.assertEQ(foobbr(new Base).b, 'b')
    # subtype has less parameters, parameter is identical and return type covariant
    - decl: |-
          foobbn = foobd
      check: |-
          arktest.assertTrue(foobbn(new Base, 1) instanceof Derived)
          arktest.assertEQ(foobbn(new Base, 1).b, 'd')
    - decl: |-
          foobbo = foobd
      check: |-
          arktest.assertTrue(foobbo(new Base) instanceof Derived)
          arktest.assertEQ(foobbo(new Base).b, 'd')
    - decl: |-
          foobbr = foobd
      check: |-
          arktest.assertTrue(foobbr(new Base) instanceof Derived)
          arktest.assertEQ(foobbr(new Base).b, 'd')
    # subtype has less parameters, parameter is contravariant and return type covariant
    - decl: |-
          foodbn = foobd
      check: |-
          arktest.assertTrue(foodbn(new Derived, 1) instanceof Derived)
          arktest.assertEQ(foodbn(new Derived, 1).b, 'd')
    - decl: |-
          foodbo = foobd
      check: |-
          arktest.assertTrue(foodbo(new Derived) instanceof Derived)
          arktest.assertEQ(foodbo(new Derived).b, 'd')
    - decl: |-
          foodbr = foobd
      check: |-
          arktest.assertTrue(foodbr(new Derived) instanceof Derived)
          arktest.assertEQ(foodbr(new Derived).b, 'd')
    # parameter types identical and return type covariant
    - decl: |-
          foodbn = fooddn
      check: |-
          arktest.assertTrue(foodbn(new Derived, 1) instanceof Derived)
          arktest.assertEQ(foodbn(new Derived, 1).b, 'd')
    - decl: |-
          foodbo = fooddo
      check: |-
          arktest.assertTrue(foodbo(new Derived) instanceof Derived)
          arktest.assertEQ(foodbo(new Derived).b, 'd')
    - decl: |-
          foodbr = fooddr
      check: |-
          arktest.assertTrue(foodbr(new Derived, 1, 2, 3) instanceof Derived)
          arktest.assertEQ(foodbr(new Derived, 1, 2, 3).b, 'd')
    # rest or optional in param, another param contravariant and return type covariant
    - decl: |-
          foodbn = foobdn
      check: |-
          arktest.assertTrue(foodbn(new Derived, 1) instanceof Derived)
          arktest.assertEQ(foodbn(new Derived, 1).b, 'd')
    - decl: |-
          foodbo = foobdo
      check: |-
          arktest.assertTrue(foodbo(new Derived) instanceof Derived)
          arktest.assertEQ(foodbo(new Derived).b, 'd')
    - decl: |-
          foodbr = foobdr
      check: |-
          arktest.assertTrue(foodbr(new Derived, 1, 2, 3) instanceof Derived)
          arktest.assertEQ(foodbr(new Derived, 1, 2, 3).b, 'd')
    # rest or optional in param, another param contravariant and return type identical
    - decl: |-
          foodbn = foobbn
      check: |-
          arktest.assertTrue(foodbn(new Base, 1) instanceof Base)
          arktest.assertEQ(foodbn(new Base, 1).b, 'b')
    - decl: |-
          foodbo = foobbo
      check: |-
          arktest.assertTrue(foodbo(new Base) instanceof Base)
          arktest.assertEQ(foodbo(new Base).b, 'b')
    - decl: |-
          foodbr = foobbr
      check: |-
          arktest.assertTrue(foodbr(new Base, 1, 2, 3) instanceof Base)
          arktest.assertEQ(foodbr(new Base, 1, 2, 3).b, 'b')
