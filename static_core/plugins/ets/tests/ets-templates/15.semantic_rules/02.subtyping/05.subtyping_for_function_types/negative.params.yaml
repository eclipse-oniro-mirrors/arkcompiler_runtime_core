# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          let f: () => Base = bb // Compile-time error: too few parameters
      compileonly: |-
          negative, compile-only
    - decl: |-
          bb = dd // Compile-time error: parameter type are not contravariant
      compileonly: |-
          negative, compile-only
    - decl: |-
          bd = db // Compile-time error: return types are not covariant
      compileonly: |-
          negative, compile-only
    - decl: |-
          function foo(p: Base): void {}
          let f: (p?: Base) => void = foo // Compile-time error: subtype parameter isn't optional
      compileonly: |-
          negative, compile-only
    - decl: |-
          function foo(p: Base[]): void {}
          let f: (...p: Base[]) => void = foo // Compile-time error: subtype parameter isn't rest
      compileonly: |-
          negative, compile-only
    - decl: |-  
          let fn = (n: number) : number => { return n }
          let f = fn as ((n: Object) => number)
      check: |-
          arktest.expectThrow(() => { f(new Object()); }, exceptionCheck);
    - decl: |-
          let fn = (n: number) : number => { return n }
          let f = fn as ((...n: number[]) => number)
      compileonly: |-
          negative, compile-only
    - decl: |-
          let fn = (d: Derived) : Base => { return d }
      check: |-
          fn(new Base())
      compileonly: |-
          negative, compile-only
    - decl: |-
          let fn = (d: Derived) : Base => { return d }
          let f = fn as ((b : Base) => Base)
      check: |-
          arktest.expectThrow(() => { f(new Base()); }, exceptionCheck);
    - decl: |-
          let fn = (d: Derived) : Base => { return d }
          let f = fn as ((b: Base) => Derived) 
      check: |-
          arktest.expectThrow(() => { f(new Base()); }, exceptionCheck);
