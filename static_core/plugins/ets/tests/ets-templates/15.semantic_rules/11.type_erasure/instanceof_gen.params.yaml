# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # generic function
    - tags: compile-only, negative
      decl: |-
          function test<T>(p: Object) {
              return p instanceof T
          }

    - tags: compile-only, negative
      decl: |-
          function test<T>(p: Object) {
              return p instanceof Array<T>
          }

    - tags: compile-only, negative
      decl: |-
          function test<T>(p: Object) {
              return p instanceof Array<string>
          }

    - tags: compile-only, negative
      decl: |-
          function test<T extends Error>(p: Object) {
              return p instanceof T
          }

    - tags: compile-only, negative
      decl: |-
          function test<T extends Error>(p: Object) {
              return p instanceof Array<T>
          }

    - tags: compile-only, negative
      decl: |-
          function test<T extends string>(p: Object) {
              return p instanceof Array<string>
          }

    # generic class
    - tags: compile-only, negative
      decl: |-
          class A<T> {
              test(p: Object) {
                  return p instanceof T
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A<T> {
              test(p: Object) {
                  return p instanceof A<T>
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A<T> {
              test(p: Object) {
                  return p instanceof Array<number>
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A<T extends Error> {
              test(p: Object) {
                  return p instanceof T
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A<T extends Error> {
              test(p: Object) {
                  return p instanceof Array<T>
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A<T extends number> {
              test(p: Object) {
                  return p instanceof A<number>
              }
          }

    # generic class method
    - tags: compile-only, negative
      decl: |-
          class A {
              test<T>(p: Object) {
                  return p instanceof T
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A {
              test<T>(p: Object) {
                  return p instanceof A<T>
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A {
              test<T>(p: Object) {
                  return p instanceof Array<number>
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A {
              test<T extends Error>(p: Object) {
                  return p instanceof T
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A {
              test<T extends Error>(p: Object) {
                  return p instanceof Array<T>
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A {
              test<T extends number>(p: Object) {
                  return p instanceof A<number>
              }
          }

    # generic interface
    - tags: compile-only, negative
      decl: |-
          interface I<T> {
              test(p: Object) {
                  return p instanceof T
              }
          }

    - tags: compile-only, negative
      decl: |-
          interface I<T> {
              test(p: Object) {
                  return p instanceof I<T>
              }
          }

    - tags: compile-only, negative
      decl: |-
          interface I<T> {
              test(p: Object) {
                  return p instanceof I<number>
              }
          }

    - tags: compile-only, negative
      decl: |-
          interface I<T extends Error> {
              test(p: Object) {
                  return p instanceof T
              }
          }

    - tags: compile-only, negative
      decl: |-
          interface I<T extends Error> {
              test(p: Object) {
                  return p instanceof I<T>
              }
          }

    - tags: compile-only, negative
      decl: |-
          interface I<T extends string> {
              test(p: Object) {
                  return p instanceof I<string>
              }
          }

    # generic tuple
    - tags: compile-only, negative
      decl: |-
          class A<T, U> {
              test(p: Object) {
                  p instanceof [T, U]
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A<T> {
              test(p: Object) {
                  p instanceof [T, string]
              }
          }

    # generic function
    - tags: compile-only, negative
      decl: |-
          function test<T, U>(p: Object) {
              return p instanceof (p: T) => U
          }

    - tags: compile-only, negative
      decl: |-
          function test<T>(p: Object) {
              return p instanceof (p: T) => void
          }

    # generic class, covariant type parameter
    - tags: compile-only, negative
      decl: |-
          class X {}
          class Y extends X {}
          class A<out T> {
              readonly fld: T
              constructor(p: T) {
                  this.fld = p
              }
              test() {
                  return p instanceof T
              }
          }
      use: |-
          let x = new A<X>(new X)
          console.log(x.fld instanceof Any)


    - tags: compile-only, negative
      decl: |-
          class A<out T> {
              test(p: Object) {
                  return p instanceof A<T>
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A<out T> {
              test(p: Object) {
                  return p instanceof Array<Any>
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A<out T extends Error> {
              test(p: Object) {
                  return p instanceof T
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A<out T extends Error> {
              test(p: Object) {
                  return p instanceof Array<T>
              }
          }

    - tags: compile-only, negative
      decl: |-
          class A<out T extends number> {
              test(p: Object) {
                  return p instanceof A<number>
              }
          }
