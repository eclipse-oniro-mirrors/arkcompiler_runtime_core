# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # assignment
    - decl: |-
          let sup: FixedArray<A|string|null>|null|string|undefined = supArr
          let sub: FixedArray<B|string|null>|null|string|undefined = subArr
      use: |-
          sup = sub
          arktest.assertEQ(sup, subArr)

    - decl: |-
          let sup: FixedArray<A|string|null>|null|string|undefined = supArr
          let sub: FixedArray<B|string|null>|null|string|undefined = subArr
      use: |-
          sub = sup
      tags: 'compile-only, negative'

    # class literal
    - decl: |-
          class X {
              f: FixedArray<A|string|null>|null|string|undefined = supArr
          }
          let sub: FixedArray<B|string|null>|null|string|undefined = subArr
      use: |-
          let x: X = { f: sub }
          arktest.assertEQ(x.f, subArr)

    - decl: |-
          class X {
              f: FixedArray<B|string|null>|null|string|undefined = subArr
          }
          let sup: FixedArray<A|string|null>|null|string|undefined = supArr
      use: |-
          let x: X = { f: sup }
      tags: 'compile-only, negative'

    # interface literal
    - decl: |-
          interface I {
              f: FixedArray<A|string|null>|null|string|undefined
          }
          let sub: FixedArray<B|string|null>|null|string|undefined = subArr
      use: |-
          let i: I = { f: sub }
          arktest.assertEQ(i.f, subArr)

    - decl: |-
          interface I {
              f: FixedArray<B|string|null>|null|string|undefined
          }
          let sup: FixedArray<A|string|null>|null|string|undefined = supArr
      use: |-
          let i: I = { f: sup }
      tags: 'compile-only, negative'

    # array literal
    - decl: |-
          let sub: FixedArray<B|string|null>|null|string|undefined = subArr
      use: |-
          let arr: Array<FixedArray<A|string|null>|null|string|undefined> = [sub]
          arktest.assertEQ(arr[0], subArr)

    - decl: |-
          let sup: FixedArray<A|string|null>|null|string|undefined = supArr
      use: |-
          let arr: Array<FixedArray<B|string|null>|null|string|undefined> = [sup]
      tags: 'compile-only, negative'

    # tuple literal
    - decl: |-
          let sub: FixedArray<B|string|null>|null|string|undefined = subArr
      use: |-
          let tup: [FixedArray<A|string|null>|null|string|undefined, FixedArray<A|string|null>|null|string|undefined] = [sub, sub]
          arktest.assertEQ(tup[0], subArr)
          arktest.assertEQ(tup[1], subArr)

    - decl: |-
          let sup: FixedArray<A|string|null>|null|string|undefined = supArr
      use: |-
          let tup: [FixedArray<B|string|null>|null|string|undefined, FixedArray<B|string|null>|null|string|undefined] = [sup, sup]
      tags: 'compile-only, negative'

    # call context
    - decl: |-
          let sup: FixedArray<A|string|null>|null|string|undefined = supArr
          let sub: FixedArray<B|string|null>|null|string|undefined = subArr
      use: |-
          ((p: FixedArray<A|string|null>|null|string|undefined) => {
              arktest.assertEQ(p, subArr)
          })(sub)

    - decl: |-
          let sup: FixedArray<A|string|null>|null|string|undefined = supArr
          let sub: FixedArray<B|string|null>|null|string|undefined = subArr
      use: |-
          ((p: FixedArray<B|string|null>|null|string|undefined) => {})(sup)
      tags: 'compile-only, negative'
