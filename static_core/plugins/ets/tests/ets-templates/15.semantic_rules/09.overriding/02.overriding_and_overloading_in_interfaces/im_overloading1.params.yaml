# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          interface K extends I {} // CTE: missing overload signatures from I
          class X implements K {
              meth(p: B, q: A, w: string): A
              meth(p: Array<B>, q: Array<A>, w: Array<string>): Array<A>
              meth(...p: Any[]): Any {
                  return p[1]
              }
          }
      use: |-
          return
      tags: 'compile-only, negative'

    - decl: |-
          class X implements I {
              meth(p: B, q: A, w: string): A
              meth(p: Array<B>, q: Array<A>, w: Array<string>): Array<A>
              meth(...p: Any[]): Any {
                  return p[1]
              }
          }

          let a = new A
          let arrA = [a]
          let i: I = new X
      use: |-
          arktest.assertEQ(i.meth(new B, a, "abc"), a)
          arktest.assertEQ(i.meth([new B], arrA, ["abc"]), arrA)

    - decl: |-
          class X implements I {
              meth(p: B, q: A, w: string): A
              meth(p: Array<B>, q: Array<A>, w: Array<string>): Array<A>
              meth(...p: Any[]): Any {
                  return p[1]
              }
          }
          let i: I = new X
      use: |-
          let v = i.meth(new B, new A, "abc", undefined)  // CTE: Unknown signature
      tags: 'compile-only, negative'

    - decl: |-
          class X implements I {
              meth(...p: Any[]): Any {
                  return p[1]
              }
          }

          let a = new A
          let arrA = [a]
          let i: I = new X
      use: |-
          arktest.assertEQ(i.meth(new B, a, "abc"), a)
          arktest.assertEQ(i.meth([new B], arrA, ["abc"]), arrA)

    - decl: |-
          class X implements I {
              meth(...p: Any[]): Any {
                  return p[1]
              }
          }
          let i: I = new X
      use: |-
          let v = i.meth(new B, new A, "abc", undefined)  // CTE: Unknown signature
      tags: 'compile-only, negative'
