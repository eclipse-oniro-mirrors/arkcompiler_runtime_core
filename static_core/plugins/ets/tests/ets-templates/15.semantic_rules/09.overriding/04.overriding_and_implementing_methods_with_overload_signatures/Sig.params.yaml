# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
declarations:
    - sig0: |-
        foo(): void
      sig1: |-
        foo(p: string): void
      impl: |-
        foo(...p: Any[]): Any {}
      extra: |- 
        //Extra data inserted here
      calls:
        - test.foo()

    - sig0: |-
        foo(): void
        foo(...p: Any[]): Any {} // default implementation in base interface
      sig1: |-
        foo (p: string): void
      impl: |-

      extra: |-
        //Extra data inserted here
      calls:
        - test.foo()

    - sig0: |-
        foo(): void
      sig1: |-
        foo(p: string): void
        foo(...p: Any[]): Any {} // default implementation in derived interface
      impl: |-

      extra: |-
        //Extra data inserted here
      calls:
        - test.foo()

    - sig0: |-
        foo (): void
      sig1: |-
        foo (p: string): void
      impl: |-
        foo(...args: Any[]): Any {
          arktest.assertEQ(args.length, 1)
          arktest.assertTrue(args[0] instanceof string)
          arktest.assertEQ(args[0], 'abcd')
        }
      extra: |-
        //Extra data inserted here
      calls:
        - test.foo('abcd')

    - sig0: |-
        foo(x: string): void
      sig1: |-
        foo(x: int): void
      impl: |-
        foo(...args: Any[]): Any {
          if (args[0] instanceof int) {
            arktest.assertEQ(args[0], 321)
          } else {
            arktest.assertTrue(args[0] instanceof string)
            arktest.assertEQ(args[0], 'abcd')
          }
        }
      extra: |-
        //Extra data inserted here
      calls:
        - test.foo(321)
        - test.foo('abcd')

    - sig0: |-
        foo(x: string): boolean
      sig1: |-
        foo(x: int): boolean
      impl: |-
        foo(...args: Any[]): Any {
          if (args[0] instanceof int) {
            arktest.assertEQ(args[0], 231)
            return true
          } else {
            arktest.assertTrue(args[0] instanceof string)
            arktest.assertEQ(args[0], 'efg')
            return false
          }
        }
      extra: |-
        //Extra data inserted here
      calls:
        - |- 
          let result = test.foo(231)
          arktest.assertTrue(result instanceof boolean)
          arktest.assertTrue(result)
        - |-
          let result = test.foo('efg')
          arktest.assertTrue(result instanceof boolean)
          arktest.assertFalse(result)

    - sig0: |-
        foo(x: string): int
      sig1: |-
        foo(x: string): string
      impl: |-
        foo(...args: Any[]): Any {
          arktest.assertTrue(args[0] instanceof string)
          if (args[0] == 'abc') {
            return 123
          } else {
            arktest.assertEQ(args[0], 'efg')
            return '321'
          }
        }
      extra: |-
        //Extra data inserted here
      calls:
        - |-
          let result = test.foo('abc')
          arktest.assertTrue(result instanceof int)
          arktest.assertEQ(123, result)
        - |-
          let result = test.foo('efg')
          arktest.assertTrue(result instanceof string)
          arktest.assertEQ('321', result)


    - sig0: |-
        foo(x: string): Results
      sig1: |-
        foo(x: int): Results
      impl: |-
        foo(...args: Any[]): Any {
          if (args[0] instanceof int) {
            arktest.assertEQ(args[0], 123)
            return Results.Num
          } else {
            arktest.assertTrue(args[0] instanceof string)
            arktest.assertEQ(args[0], "defg")
            return Results.Str
          }
        }
      extra: |-
        enum Results {Str, Num}
      calls:
        - |-
          let result = test.foo(123)
          arktest.assertTrue(result instanceof Results)
          arktest.assertEQ(Results.Num, result)
        - |-
          let result = test.foo('efg')
          arktest.assertTrue(result instanceof Results)
          arktest.assertEQ(Results.Str, result)

    - sig0: |-
        foo(a: int): int
      sig1: |-
        foo(a: int, b: double, c: string): string
      impl: |-
        foo(...args: Any[]): Any {
          if (args.length == 1) {
            arktest.assertTrue(args[0] instanceof int)
            arktest.assertEQ(args[0], 123)
            return 213
          } else {
            arktest.assertEQ(args.length, 3)
            arktest.assertTrue(args[0] instanceof int)
            arktest.assertEQ(args[0], 456)
            arktest.assertTrue(args[1] instanceof double)
            arktest.assertEQ(args[1], 789.0)
            arktest.assertTrue(args[2] instanceof string)
            arktest.assertEQ(args[2], '321')
            return '312'
          }
        }
      extra: |-
        //Extra data inserted here
      calls:
        - |-
          let result = test.foo(123)
          arktest.assertTrue(result instanceof int)
          arktest.assertEQ(213, result)
        - |-
          let result = test.foo(456, 789.0, '321')
          arktest.assertTrue(result instanceof string)
          arktest.assertEQ('312', result)          


    - sig0: |-
        foo(x: string): string[]
      sig1: |-
        foo(x: int): boolean
      impl: |-
        foo(...args: Any[]): Any {
          arktest.assertTrue(args[0] instanceof string)
          return ['ef', 'g']
        }
      extra: |-
        //Extra data inserted here
      calls:
        - |-
          let result = test.foo('abcd')
          arktest.assertTrue(result instanceof Array)
          arktest.assertEQ(213, result)
          arktest.assertEQ(result.length, 2)
          arktest.assertTrue(result[0] instanceof string)
          arktest.assertEQ(result[0], 'ef')
          arktest.assertEQ(result[1], 'g')


    - sig0: |-
        foo(x: string): string[]
      sig1: |-
        foo(x: int): int[]
      impl: |-
        foo(...args: Any[]): Any {
          if (args[0] instanceof int) {
            let res: int[] = [-1, 5]
            res[0] = args[0] + 1
            return res
          } else {
            arktest.assertTrue(args[0] instanceof string)
            let res: string[] = ['123', 'def']
            res[0] = args[0] + 'c'
            return res
          }
        }
      extra: |-
        //Extra data inserted here
      calls:
        - |-
          let result = test.foo(3)
          arktest.assertTrue(result instanceof Array)
          arktest.assertEQ(result.length, 2)
          arktest.assertTrue(result[0] instanceof int)
          arktest.assertEQ(result[0], 4)
          arktest.assertEQ(result[1], 5)
        - |-
          let result = test.foo('ab')
          arktest.assertTrue(result instanceof Array)
          arktest.assertEQ(result.length, 2)
          arktest.assertTrue(result[0] instanceof string)
          arktest.assertEQ(result[0], 'abc')
          arktest.assertEQ(result[1], 'def')

    - sig0: |-
        foo(a: int[]): int
        foo(a: string):string
      sig1: |-
        foo(a: boolean, b: int): boolean
      impl: |-
        foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof Array) {
            arktest.assertEQ(arg0.length, 2)
            arktest.assertTrue(arg0[0] instanceof int)
            arktest.assertEQ(arg0[0], 321)
            arktest.assertEQ(arg0[1], 476)
            return 567
          }
          else if (arg0 instanceof string) {
            arktest.assertEQ(arg0.length, 2)
            arktest.assertEQ(arg0, 'ab')
            return arg0 + 'c'
          } else {
            arktest.assertTrue(args[0] instanceof boolean)
            arktest.assertTrue(args[1] instanceof int)
            if (args[0]) {
              arktest.assertEQ(args[1], 347)
            } else {
              arktest.assertEQ(args[1], 743)
            }
            return !args[0]
          }
        }
      extra: |-
        //Extra data inserted here
      calls:
        - |-
          let result = test.foo([321, 476])
          arktest.assertTrue(result instanceof int)
          arktest.assertEQ(result, 567)
        - |-
          let result = test.foo('ab')
          arktest.assertTrue(result instanceof string)
          arktest.assertEQ(result, 'abc')
        - |-
          let result = test.foo(true, 347)
          arktest.assertTrue(result instanceof boolean)
          arktest.assertFalse(result)
        - |-
          let result = test.foo(false, 743)
          arktest.assertTrue(result instanceof boolean)
          arktest.assertTrue(result)


    - sig0: |-
        foo(x: string, y: int): string
        foo(x: int | string, y: boolean): int
      sig1: |-
        foo(x: int): boolean
      impl: |-
        foo(...args: Any[]): Any {
          if (args.length == 2) {
            if (args[1] instanceof boolean) {
              if (args[0] instanceof int) {
                arktest.assertEQ(args[0], 456)
                arktest.assertEQ(args[1], true)
                return 123
              } else {
                arktest.assertTrue(args[0] instanceof string)
                arktest.assertEQ(args[0], 'efg')
                arktest.assertEQ(args[1], false)
                return 321
              }
            } else {
              arktest.assertTrue(args[0] instanceof string)
              arktest.assertTrue(args[1] instanceof int)
              arktest.assertEQ(args[0], 'cba')
              arktest.assertEQ(args[1], 789)
              return "abc"
            }
          } else {
            arktest.assertTrue(args[0] instanceof int)
            arktest.assertEQ(args[0], 987)
            return true
          }
        }
      extra: |-
        //Extra data inserted here
      calls:
        - |-
          let result = test.foo(456, true)
          arktest.assertTrue(result instanceof int)
          arktest.assertEQ(result, 123)
        - |-
          let result = test.foo('efg', false)
          arktest.assertTrue(result instanceof int)
          arktest.assertEQ(result, 321)
        - |-
          let result = test.foo('cba', 789)
          arktest.assertTrue(result instanceof string)
          arktest.assertEQ(result, "abc")
        - |-
          let result = test.foo(987)
          arktest.assertTrue(result instanceof boolean)
          arktest.assertTrue(result)


    - sig0: |-
        foo(x: A): int
      sig1: |-
        foo(x: string): string
      impl: |-
        foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof B){
            return arg0.b_method()
          }
          else if (arg0 instanceof C){
            return arg0.c_method()
          } else {
            arktest.assertTrue(arg0 instanceof string)
            return arg0 + "c"
          }
        }
      extra: |-
        class A {}
        class B extends A {
          b_method(): int {
            return 123
          }
        }
        class C extends A {
          c_method(): int {
            return 567
          }
        }
      calls:
        - |-
          let result = test.foo(new B())
          arktest.assertTrue(result instanceof int)
          arktest.assertEQ(result, 123)

        - |-
          let result = test.foo(new C())
          arktest.assertTrue(result instanceof int)
          arktest.assertEQ(result, 567)
        - |-
          let result = test.foo('ab')
          arktest.assertTrue(result instanceof string)
          arktest.assertEQ(result, 'abc')


    - sig0: |-
        foo(x: A): C
      sig1: |-
        foo(x: B): B
      impl: |-
        foo(...args: Any[]): Any {
          if (args[0] instanceof A){
            return new C()
          }
          else {
            arktest.assertTrue(args[0] instanceof B)
            return new B()
          }
        }
      extra: |-
        class A {}
        class B extends A {}
        class C extends A {}
      calls:
        - |-
          let result = test.foo(new B())
          arktest.assertTrue(result instanceof C)

    - sig0: |-
        foo(x: string): string
      sig1: |-
        foo(x: A, fb: (a: B, b: int) => int): int
      impl: |-
        foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof B){
            let f = args[1] as ((a: B, b: int) => int)
            return f(arg0, 7)
          } else {
            arktest.assertTrue(arg0 instanceof string)
            return arg0 + 'c'
          }
        }
      extra: |-
          class A {}
          class B extends A {
            b_method(): int {
              return 123
            }
          }
          type HandlerAInt = (a: A, b: int) => int
          const handlerAInt: HandlerAInt = (a: A, b: int): int => {
          if (a instanceof B) {
             return a.b_method() + b
           } else {
             return b
           }
          }
          type HandlerA = (a: A) => int
          const handlerA: HandlerA = (a: A): int => {
            if (a instanceof B) {
              return a.b_method()
            } else {
              return 0
            }
          }
          type HandlerNothing = () => int
          const handlerNothing: HandlerNothing = (): int => { return 567 }
      calls:
        - |-
          let result = test.foo(new B(), handlerAInt)
          arktest.assertTrue(result instanceof int)
          arktest.assertEQ(result, 130)
        - |-
          let result = test.foo(new B(), handlerA)
          arktest.assertTrue(result instanceof int)
          arktest.assertEQ(result, 123)
        - |-
          let result = test.foo(new B(), handlerNothing)
          arktest.assertTrue(result instanceof int)
          arktest.assertEQ(result, 567)
        - |-
          let result = test.foo('ab')
          arktest.assertTrue(result instanceof string)
          arktest.assertEQ(result, 'abc')

    - sig0: |-
        foo(x: string): string
      sig1: |-
        foo(x: A, fb: (x: B) => A): int
      impl: |-
        foo(...args: Any[]): Any {
          let arg0 = args[0]
          if (arg0 instanceof B){
            let f = args[1] as ((x: B) => A)
            let f_res = f(arg0)
            if (f_res instanceof B) {
              return f_res.field
            } else {
              return -1
            }
          } else {
            arktest.assertTrue(arg0 instanceof string)
            return arg0 + "c"
          }
        }
      extra: |-
        class A {}
        class B extends A {
          field: int
          constructor(field: int) {
            this.field = field
          }
        }
        type HandlerA = (a: A) => B
        const handlerA: HandlerA = (a: A): B => {
          if (a instanceof B){
            return new B(a.field + 123)
          } else {
            return new B(0)
          }
        }
        type HandlerNothing = () => B
        const handlerNothing: HandlerNothing = (): B => {
          return new B(567)
        }
      calls:
        - |-
          let result = test.foo(new B(7), handlerA)
          arktest.assertTrue(result instanceof int)
          arktest.assertEQ(result, 130)
        - |-
          let result = test.foo(new B(345), handlerNothing)
          arktest.assertTrue(result instanceof int)
          arktest.assertEQ(result, 567)
        - |-
          let result = test.foo('ab')
          arktest.assertTrue(result instanceof string)
          arktest.assertEQ(result, 'abc')

          
