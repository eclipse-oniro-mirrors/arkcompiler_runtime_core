# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # ENUM, PARAMETER
    - base: |-
          foo(i: SHIPYARD) {
              res = 1
          }
      derived: |-
          foo(i: SHIPYARD) {
              res = 2
          }
      call: |-
          new Base().foo(SHIPYARD.Flippers)
          arktest.assertEQ(res, 1)
          new Derived().foo(SHIPYARD.Flippers)
          arktest.assertEQ(res, 2)
      params: override-compatible, same parameter type

    - tags: 'negative, compile-only'
      base: |-
          foo(i: SHIPYARD) {
              res = 1
          }
      derived: |-
          foo(i: HARBOUR) {  // overriding assumed
              res = 2
          }
      params: parameter is override-incompatible

    - tags: 'negative, compile-only'
      base: |-
          foo(i: SHIPYARD) {
              res = 1
          }
      derived: |-
          override foo(i: HARBOUR) {
              res = 2
          }
      params: parameter is override-incompatible

    # ENUM, RETURN TYPE
    - base: |-
          foo(): SHIPYARD {
              return SHIPYARD.Flippers
          }
      derived: |-
          foo(): SHIPYARD {
              return SHIPYARD.SwimRing
          }
      call: |-
          arktest.assertEQ(new Base().foo(), SHIPYARD.Flippers)
          arktest.assertEQ(new Derived().foo(), SHIPYARD.SwimRing)
      params: override-compatible with same type

    - tags: 'negative, compile-only'
      base: |-
          foo(): SHIPYARD {
              return SHIPYARD.Flippers
          }
      derived: |-
          foo(): HARBOUR {
              return HARBOUR.Boat
          }
      params: override-incompatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): SHIPYARD {
              return SHIPYARD.Flippers
          }
      derived: |-
          override foo(): HARBOUR {
              return HARBOUR.Boat
          }
      params: override-incompatible return type
