# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - assertions:
      - call: foo()
        result: 1

      - call: foo(1)
        result: 0

    definition: |-
      function foo(a?: number, ...rest: string[]) {
          if (a == undefined && rest.length == 0) {
              return 1
          }
          else {
              return 0
          }
      }

  - assertions:
      - call: foo("mandatory")
        result: 1

      - call: foo("mandatory", 1)
        result: 0

    definition: |-
      function foo(x: string, a?: number, ...rest: string[]) {
          if (a == undefined && rest.length == 0) {
              return 1
          }
          else {
              return 0
          }
      }

  - assertions:
      - call: foo()
        result: 2

      - call: foo(1)
        result: 1

      - call: foo(1, "asdsad")
        result: 0

    definition: |-
      function foo(a?: number, b?: string, ...rest: string[]) {
          if (a == undefined && b == undefined && rest.length == 0) {
            return 2;
          }
          else if (b == undefined && rest.length == 0) {
            return 1;
          }
          else {
            return 0;
          }
      }

  - assertions:
      - call: foo("mandatory")
        result: 2

      - call: foo("mandatory", 1)
        result: 1

      - call: foo("mandatory", 1, "asdsad")
        result: 0

    definition: |-
      function foo(x: string, a?: number, b?: string, ...rest: string[]) {
          if (a == undefined && b == undefined && rest.length == 0) {
            return 2;
          }
          else if (b == undefined && rest.length == 0) {
            return 1;
          }
          else {
            return 0;
          }
      }

  - assertions:
      - call: foo()
        result: 3

      - call: foo(1)
        result: 2

      - call: foo(1, "asdasd")
        result: 1

      - call: foo(1, "asdsad", 2)
        result: 0

    definition: |-
      function foo(a?: number, b?: string, c?: number, ...rest: string[]) {
          if (a == undefined && b == undefined && c == undefined && rest.length == 0) {
            return 3;
          }
          else if (b == undefined && c == undefined && rest.length == 0) {
            return 2;
          }
          else if (c == undefined && rest.length == 0) {
            return 1;
          }
          else {
            return 0;
          }
      }

  - assertions:
      - call: foo("mandatory")
        result: 3

      - call: foo("mandatory", 1)
        result: 2

      - call: foo("mandatory", 1, "asdasd")
        result: 1

      - call: foo("mandatory", 1, "asdsad", 2)
        result: 0

    definition: |-
      function foo(x: string, a?: number, b?: string, c?: number, ...rest: string[]) {
          if (a == undefined && b == undefined && c == undefined && rest.length == 0) {
            return 3;
          }
          else if (b == undefined && c == undefined && rest.length == 0) {
            return 2;
          }
          else if (c == undefined && rest.length == 0) {
            return 1;
          }
          else {
            return 0;
          }
      }

  - assertions:
      - call: foo("mandatory", "mandatory")
        result: 3

      - call: foo("mandatory", "mandatory", 1)
        result: 2

      - call: foo("mandatory", "mandatory", 1, "asdasd")
        result: 1

      - call: foo("mandatory", "mandatory", 1, "asdsad", 2)
        result: 0

    definition: |-
      function foo(x: string, y: string, a?: number, b?: string, c?: number, ...rest: string[]) {
          if (a == undefined && b == undefined && c == undefined && rest.length == 0) {
            return 3;
          }
          else if (b == undefined && c == undefined && rest.length == 0) {
            return 2;
          }
          else if (c == undefined && rest.length == 0) {
            return 1;
          }
          else {
            return 0;
          }
      }
