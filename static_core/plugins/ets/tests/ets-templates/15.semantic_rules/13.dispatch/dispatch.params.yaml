# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # List of predefined types
cases: 
  - decl: |
      class T1 {
        fld1: 'abc'
        fld2: string
      }
      class T2 {
        fld1: 'def'
        fld3: number
      }
      type T3 = T1 | T2

      function foo(p: T3) {
        if (p.fld1 === 'abc') {
          p.fld2
        } else {
          p.fld3
        }
      }
    use: |
      foo(new T1())
      foo(new T2())
    tags: [compile-only, negative]

  - decl: | 
      class A {}
      class B extends A {
        fld: int = 1
      }
      type T1 = (p: B) => void
      let a: T1
      let b = (p: A) => { p.fld }
      a = b
      let c = (p: B) => { console.log(p.fld) }
    use: |
      a = c
    tags: [compile-only, negative]

  - decl: | 
      class A {
        fld: int = 0
      }
      class B extends A {
        fld: int = 1
      }
    use: |
      let a: A = new A()
      let b: B = new B()
      arktest.assertEQ(a.fld, 0)
      arktest.assertEQ(b.fld, 1)
      a = new B()
      arktest.assertEQ(a.fld, 1)

  - decl: |
      interface Point {
        x: number
        y: number
      }
    use: |
      let p: Point = { x: 10, y: 20, z: 30 }
    tags: [compile-only, negative]
  
  - decl: |
      let n: Any = 10 as short
    use: |
      let result = n + 10
      arktest.assertTrue(result instanceof short)
    tags: [compile-only, negative]

  - decl: |
      interface I {
        fld1: string
        fld2: int
      }
      class A implements I {
        fld1: string = "abc"
        fld2: int = 1
      }
      class B implements I {
        fld1: string = "def"
        fld2: int = 2
      }
    use: |
      let a: A = new A()
      let b: B = new B()
      arktest.assertEQ(a.fld1, "abc")
      arktest.assertEQ(a.fld2, 1)
      arktest.assertEQ(b.fld1, "def")
      arktest.assertEQ(b.fld2, 2)

  - decl: |
      class A<T> {
        foo<T>(): this { return this }
      }
      class B {}
    use: |
      let a: A<B> = new A<B>()
      let b = a.foo().foo()

  - decl: |
      interface I {
        fld1: string
        fld2: number
      }
    use: |
      let i: I | null = {fld1: 'dfgd', fld2: 5}
      i.fld1

  - decl: |
      interface I {
        fld1: string
        fld2: number
      }
    use: |
      let i: I | null = null
      i.fld1
    tags: [compile-only, negative]

  - decl: |
      class A {
        fld1: string = "abc"
      }
      class B {
        fld1: number = 1
      }
    use: |
      let a: A | B = new A()
      a.fld1
      let b: A | B = new B()
      b.fld1

