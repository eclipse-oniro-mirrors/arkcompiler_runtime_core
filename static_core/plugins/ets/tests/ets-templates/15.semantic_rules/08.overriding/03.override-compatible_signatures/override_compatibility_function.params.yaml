# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # FUNCTION, PARAMETER
    - base: |-
          foo(i: (j: Base) => Base): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Base) => Base): void {
              res = 2
          }
      call: |-
          new Base().foo((i:Base): Base => { return new Base() })
          arktest.assertEQ(res, 1)
          new Base().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 1)

          new Derived().foo((i:Base): Base => { return new Base() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
      params: override-compatible with same type parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Base) => Base): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Base) => Derived): void {
              res = 2
          }
      params: override-incompatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Base) => Base): void {
              res = 1
          }
      derived: |-
          foo(i: (j: Base) => Derived): void { // override assumed
              res = 2
          }
      params: override-incompatible parameter

    - base: |-
          foo(i: (j: Base) => Base): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Derived) => Base): void {
              res = 2
          }
      call: |-
          new Base().foo((i:Base): Base => { return new Base() })
          arktest.assertEQ(res, 1)
          new Base().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 1)

          new Derived().foo((i:Derived): Base => { return new Base() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Derived): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Base): Base => { return new Base() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
      params: override-compatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Base) => Base): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Derived) => Derived): void {
              res = 2
          }
      params: override-incompatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Base) => Base): void {
              res = 1
          }
      derived: |-
          foo(i: (j: Derived) => Derived): void {  // override assumed
              res = 2
          }
      params: override-incompatible parameter

    - base: |-
          foo(i: (j: Base) => Derived): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Base) => Base): void {
              res = 2
          }
      call: |-
          new Base().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 1)

          new Derived().foo((i:Base): Base => { return new Base() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
      params: override-compatible parameter

    - base: |-
          foo(i: (j: Base) => Derived): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Base) => Derived): void {
              res = 2
          }
      call: |-
          new Base().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 1)

          new Derived().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
      params: override-compatible parameter

    - base: |-
          foo(i: (j: Base) => Derived): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Derived) => Base): void {
              res = 2
          }
      call: |-
          new Base().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 1)

          new Derived().foo((i:Derived): Base => { return new Base() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Base): Base => { return new Base() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Derived): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
      params: override-compatible parameter

    - base: |-
          foo(i: (j: Base) => Derived): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Derived) => Derived): void {
              res = 2
          }
      call: |-
          new Base().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 1)

          new Derived().foo((i:Derived): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
      params: override-compatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Derived) => Base): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Base) => Base): void {
              res = 2
          }
      params: override-incompatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Derived) => Base): void {
              res = 1
          }
      derived: |-
          foo(i: (j: Base) => Base): void {  // override assumed
              res = 2
          }
      params: override-incompatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Derived) => Base): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Base) => Derived): void {
              res = 2
          }
      params: override-incompatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Derived) => Base): void {
              res = 1
          }
      derived: |-
          foo(i: (j: Base) => Derived): void { // override assumed
              res = 2
          }
      params: override-incompatible parameter

    - base: |-
          foo(i: (j: Derived) => Base): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Derived) => Base): void {
              res = 2
          }
      call: |-
          new Base().foo((i:Derived): Base => { return new Base() })
          arktest.assertEQ(res, 1)
          new Base().foo((i:Base): Base => { return new Base() })
          arktest.assertEQ(res, 1)
          new Base().foo((i:Derived): Derived => { return new Derived() })
          arktest.assertEQ(res, 1)
          new Base().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 1)

          new Derived().foo((i:Derived): Base => { return new Base() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Base): Base => { return new Base() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Derived): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
      params: override-compatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Derived) => Base): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Derived) => Derived): void {
              res = 2
          }
      params: override-incompatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Derived) => Base): void {
              res = 1
          }
      derived: |-
          foo(i: (j: Derived) => Derived): void { // override assumed
              res = 2
          }
      params: override-incompatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Derived) => Derived): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Base) => Base): void {
              res = 2
          }
      params: override-incompatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Derived) => Derived): void {
              res = 1
          }
      derived: |-
          foo(i: (j: Base) => Base): void { // override assumed
              res = 2
          }
      params: override-incompatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Derived) => Derived): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Base) => Derived): void {
              res = 2
          }
      params: override-incompatible parameter

    - tags: 'negative, compile-only'
      base: |-
          foo(i: (j: Derived) => Derived): void {
              res = 1
          }
      derived: |-
          foo(i: (j: Base) => Derived): void { // override assumed
              res = 2
          }
      params: override-incompatible parameter

    - base: |-
          foo(i: (j: Derived) => Derived): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Derived) => Base): void {
              res = 2
          }
      call: |-
          new Base().foo((i:Derived): Derived => { return new Derived() })
          arktest.assertEQ(res, 1)
          new Base().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 1)

          new Derived().foo((i:Derived): Base => { return new Base() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Derived): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Base): Base => { return new Base() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
      params: override-compatible parameter

    - base: |-
          foo(i: (j: Derived) => Derived): void {
              res = 1
          }
      derived: |-
          override foo(i: (j: Derived) => Derived): void {
              res = 2
          }
      call: |-
          new Base().foo((i:Derived): Derived => { return new Derived() })
          arktest.assertEQ(res, 1)
          new Base().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 1)

          new Derived().foo((i:Derived): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
          new Derived().foo((i:Base): Derived => { return new Derived() })
          arktest.assertEQ(res, 2)
      params: override-compatible parameter

    # FUNCTION, RETURN TYPE
    - base: |-
          foo(): (i: Base) => Base {
              res = 1
              return (i: Base): Base => new Base
          }
      derived: |-
          foo(): (i: Base) => Base {
              res = 2
              return (i: Base): Base => new Base
          }
      call: |-
          new Base().foo()
          arktest.assertEQ(res, 1)
          new Derived().foo()
          arktest.assertEQ(res, 2)
      params: override-compatible with same return type

    - base: |-
          foo(): (i: Base) => Base {
              res = 1
              return (i: Base): Base => new Base
          }
      derived: |-
          foo(): (i: Base) => Derived {
              res = 2
              return (i: Base): Derived => new Derived
          }
      call: |-
          new Base().foo()
          arktest.assertEQ(res, 1)
          new Derived().foo()
          arktest.assertEQ(res, 2)
      params: override-compatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Base) => Base {
              res = 1
              return (i: Base): Base => new Base
          }
      derived: |-
          override foo(): (i: Derived) => Base {
              res = 2
              return (i: Derived): Base => new Base
          }
      params: override-incompatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Base) => Base {
              res = 1
              return (i: Base): Base => new Base
          }
      derived: |-
          foo(): (i: Derived) => Base { // override assumed
              res = 2
              return (i: Derived): Base => new Base
          }
      params: override-incompatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Base) => Base {
              res = 1
              return (i: Base): Base => new Base
          }
      derived: |-
          override foo(): (i: Derived) => Derived {
              res = 2
              return (i: Derived): Derived => new Derived
          }
      params: override-incompatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Base) => Base {
              res = 1
              return (i: Base): Base => new Base
          }
      derived: |-
          foo(): (i: Derived) => Derived { // override assumed
              res = 2
              return (i: Derived): Derived => new Derived
          }
      params: override-incompatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Base) => Derived {
              res = 1
              return (i: Base): Derived => new Derived
          }
      derived: |-
          override foo(): (i: Base) => Base {
              res = 2
              return (i: Base): Base => new Base
          }
      params: override-incompatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Base) => Derived {
              res = 1
              return (i: Base): Derived => new Derived
          }
      derived: |-
          foo(): (i: Base) => Base { // override assumed
              res = 2
              return (i: Base): Base => new Base
          }
      params: override-incompatible return type

    - base: |-
          foo(): (i: Base) => Derived {
              res = 1
              return (i: Base): Derived => new Derived
          }
      derived: |-
          foo(): (i: Base) => Derived {
              res = 2
              return (i: Base): Derived => new Derived
          }
      call: |-
          new Base().foo()
          arktest.assertEQ(res, 1)
          new Derived().foo()
          arktest.assertEQ(res, 2)
      params: override-compatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Base) => Derived {
              res = 1
              return (i: Base): Derived => new Derived
          }
      derived: |-
          override foo(): (i: Derived) => Base {
              res = 2
              return (i: Derived): Base => new Base
          }
      params: override-incompatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Base) => Derived {
              res = 1
              return (i: Base): Derived => new Derived
          }
      derived: |-
          foo(): (i: Derived) => Base { // override assumed
              res = 2
              return (i: Derived): Base => new Base
          }
      params: override-incompatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Base) => Derived {
              res = 1
              return (i: Base): Derived => new Derived
          }
      derived: |-
          override foo(): (i: Derived) => Derived {
              res = 2
              return (i: Derived): Derived => new Derived
          }
      params: override-incompatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Base) => Derived {
              res = 1
              return (i: Base): Derived => new Derived
          }
      derived: |-
          foo(): (i: Derived) => Derived { // override assumed
              res = 2
              return (i: Derived): Derived => new Derived
          }
      params: override-incompatible return type

    - base: |-
          foo(): (i: Derived) => Base {
              res = 1
              return (i: Derived): Base => new Base
          }
      derived: |-
          foo(): (i: Base) => Base {
              res = 2
              return (i: Base): Base => new Base
          }
      call: |-
          new Base().foo()
          arktest.assertEQ(res, 1)
          new Derived().foo()
          arktest.assertEQ(res, 2)
      params: override-compatible return type

    - base: |-
          foo(): (i: Derived) => Base {
              res = 1
              return (i: Derived): Base => new Base
          }
      derived: |-
          foo(): (i: Base) => Derived {
              res = 2
              return (i: Base): Derived => new Derived
          }
      call: |-
          new Base().foo()
          arktest.assertEQ(res, 1)
          new Derived().foo()
          arktest.assertEQ(res, 2)
      params: override-compatible return type

    - base: |-
          foo(): (i: Derived) => Base {
              res = 1
              return (i: Derived): Base => new Base
          }
      derived: |-
          foo(): (i: Derived) => Base {
              res = 2
              return (i: Derived): Base => new Base
          }
      call: |-
          new Base().foo()
          arktest.assertEQ(res, 1)
          new Derived().foo()
          arktest.assertEQ(res, 2)
      params: override-compatible return type

    - base: |-
          foo(): (i: Derived) => Base {
              res = 1
              return (i: Derived): Base => new Base
          }
      derived: |-
          foo(): (i: Derived) => Derived {
              res = 2
              return (i: Derived): Derived => new Derived
          }
      call: |-
          new Base().foo()
          arktest.assertEQ(res, 1)
          new Derived().foo()
          arktest.assertEQ(res, 2)
      params: override-compatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Derived) => Derived {
              res = 1
              return (i: Derived): Derived => new Derived
          }
      derived: |-
          override foo(): (i: Base) => Base {
              res = 2
              return (i: Base): Base => new Base
          }
      params: override-incompatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Derived) => Derived {
              res = 1
              return (i: Derived): Derived => new Derived
          }
      derived: |-
          foo(): (i: Base) => Base { // override assumed
              res = 2
              return (i: Base): Base => new Base
          }
      params: override-incompatible return type

    - base: |-
          foo(): (i: Derived) => Derived {
              res = 1
              return (i: Derived): Derived => new Derived
          }
      derived: |-
          foo(): (i: Base) => Derived {
              res = 2
              return (i: Base): Derived => new Derived
          }
      call: |-
          new Base().foo()
          arktest.assertEQ(res, 1)
          new Derived().foo()
          arktest.assertEQ(res, 2)
      params: override-compatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Derived) => Derived {
              res = 1
              return (i: Derived): Derived => new Derived
          }
      derived: |-
          override foo(): (i: Derived) => Base {
              res = 2
              return (i: Derived): Base => new Base
          }
      params: override-incompatible return type

    - tags: 'negative, compile-only'
      base: |-
          foo(): (i: Derived) => Derived {
              res = 1
              return (i: Derived): Derived => new Derived
          }
      derived: |-
          foo(): (i: Derived) => Base { // override assumed
              res = 2
              return (i: Derived): Base => new Base
          }
      params: override-incompatible return type

    - base: |-
          foo(): (i: Derived) => Derived {
              res = 1
              return (i: Derived): Derived => new Derived
          }
      derived: |-
          foo(): (i: Derived) => Derived {
              res = 2
              return (i: Derived): Derived => new Derived
          }
      call: |-
          new Base().foo()
          arktest.assertEQ(res, 1)
          new Derived().foo()
          arktest.assertEQ(res, 2)
      params: override-compatible return type
