/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*---
desc: >-
    There could be cases when the type of an entity (mostly local variables)
    is a union type and in the particular context of the program the compiler
    can narrow (smart cast) the static type to a more precise type (smart type)
    and allow operations which are specific to such narrowed type.
---*/

class Base {}
class Derived extends Base {
    d = 2
}

function fooBase(p: Base): string { return "Base" }
function fooDerived(p: Derived): string { return "Derived" }

overload foo { fooDerived, fooBase }

function main() {
    let a: Base = new Base()
    arktest.assertEQ(foo(a), "Base")
    let b: Base = new Derived()
    arktest.assertEQ(foo(b), "Derived")
}
