# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # 0. Import class declaration
  - imp: |-
      import * as m from "./declaration_module.sts"
    use: |-
      let aa = new m.A() // A instance is created

  # 1. Import class with field declaration
  - imp: |-
      import * as dm from "./declaration_module.sts"
    use: |-
      let b = new dm.B() // B instance is created
      dm.process_field(b.a) // exported field is passed to function as an argument

  #2. Type parameter number[][]
  - imp: |-
      import * as dm from "./declaration_module.sts"
    use: |-
      let myMatrix: dm.Matrix ;
      assertTrue(typeof myMatrix == 'object' ) ;

  #3. Type parameter with arrow function
  - imp: |-
      import * as dm from "./declaration_module.sts"
    use: |-
      let myHandler: dm.Handler = (s: string, no: number) => "ret_string";
      assertTrue(typeof myHandler == 'function' )

  #4. Type parameter with generic and arrow function
  - imp: |-
      import * as dm from "./declaration_module.sts"
    use: |-
      let myPredicate: dm.Predicate<string> = (s: string) => true;
      assertTrue(typeof myPredicate == 'function' )      

  #5. Type parameter Nullable
  - imp: |-
      import * as dm from "./declaration_module.sts"
    use: |-
      let myNumber: dm.NullableNumber;
      assertTrue( (typeof myNumber as string) == 'undefined' );
      myNumber = 1;
      assertTrue(typeof myNumber == 'number' );
      myNumber = null;
      assertTrue(typeof myNumber == 'object' );

  #6. Type parameter with generic
  - imp: |-
      import * as dm from "./declaration_module.sts"
    use: |-
      let myMapOfString: dm.MapOfString<string>;
      assertTrue(typeof myMapOfString == 'object' );   

  #7. Type parameter with generic
  - imp: |-
      import * as dm from "./declaration_module.sts"
    use: |-
      let myAAA: dm.AAA<string>;
      assertTrue(typeof myAAA == 'object' );

  #8. Class with fields and method
  - imp: |-
      import * as dm from "./declaration_module.sts"
    use: |-
      let myPerson = new dm.Person("Name", 41);
      myPerson.getName();
      myPerson.getAge();
      let default_myPerson = dm.Person.createDefault();
      assertEQ(default_myPerson, 'function');

  #9. export {DD, EE as ZZ}
  - imp: |-
      import * as dm from "./declaration_module.sts"
    use: |-
      let myZZ = new dm.ZZ();
      assertEQ(typeof myZZ.fee(), 'function');
