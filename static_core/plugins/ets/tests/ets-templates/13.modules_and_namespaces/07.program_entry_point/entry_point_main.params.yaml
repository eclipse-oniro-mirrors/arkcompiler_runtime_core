# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # void return type
    - use: |-
          // entry point function main, inferred void, positive
          function main() {
              arktest.assertTrue(true)
          }

    - tags: negative
      use: |-
          // entry point function main, inferred void, negative
          function main() {
              arktest.assertTrue(false)
          }

    - use: |-
          // entry point function main, explicit void, positive
          function main(): void {
              arktest.assertTrue(true)
          }

    - tags: negative
      use: |-
          // entry point function main, explicit void, negative
          function main(): void {
              arktest.assertTrue(false)
          }

    - tags: negative, compile-only
      use: |-
          // entry point function main, explicit void, compile-time negative
          function main(): void {
              if (false) {
                  return 1  // CTE, wrong return type
              }
              return
          }

    - use: |-
          // entry point function main, explicit void, compile-time
          function main(): void {
              if (true) {
                  return
              }
              return undefined
          }

    # explicit int return type
    - use: |-
          // entry point function main, explicit int, positive
          function main(): int {
              return 0
          }

    - use: |-
          let v: int|boolean = 0
          // entry point function main, explicit int, positive
          function main(): int {
              let x = v
              if (x instanceof boolean) {
                  return 1
              } else {
                  return x
              }
          }

    - use: |-
          let v: Array<int|boolean> = [0]
          // entry point function main, explicit int, positive
          function main(): int {
              let x = v[0]
              if (x instanceof int) {
                  return x
              }
              return 1
          }

    - use: |-
          enum Color { Red, Green, Blue }
          // entry point function main, explicit int, positive
          function main(): int {
              return Color.Red
          }

    - tags: negative
      use: |-
          // entry point function main, explicit int, negative
          function main(): int {
              return 1
          }

    - tags: negative
      use: |-
          enum Color { Red, Green, Blue }
          // entry point function main, explicit int, negative
          function main(): int {
              return Color.Green
          }

    - tags: negative, compile-only
      use: |-
          // entry point function main, explicit int, compile-time negative
          let res = ''
          function main(): int {
              if (res == '') {
                  throw new Error()
              }
          }

    - tags: negative, compile-only
      use: |-
          // entry point function main, explicit int, compile-time negative
          function main(): int {
              if (false) {
                  return // CTE, wrong return type
              }
              return 0
          }

    # inferred int return type
    - use: |-
          // entry point function main, inferred int, positive
          function main() {
              return 0
          }

    - use: |-
          let v: int|boolean = 0
          // entry point function main, inferred int, positive
          function main() {
              let x = v
              if (x instanceof int) {
                  return x
              }
              return 1
          }

    - use: |-
          let v: Array<int|boolean> = [0]
          // entry point function main, inferred int, positive
          function main() {
              let x = v[0]
              if (x instanceof int) {
                  return x
              }
              return 1
          }

    - use: |-
          let foo: (p: boolean) => int|undefined = (p: boolean): int|undefined => p ? 0 : undefined
          // entry point function main, inferred int, positive
          function main() {
              return foo(true)!
          }

    - tags: negative
      use: |-
          // entry point function main, inferred int, negative
          function main() {
              return 1
          }

    # exported function main, void return type
    - use: |-
          // entry point exported function main, inferred void, positive
          let res = ''
          export function main() {
              if (true) {
                  return
              }
              arktest.assertNE(res, '')
          }

    - tags: negative
      use: |-
          // entry point exported function main, inferred void, negative
          let res = ''
          export function main() {
              if (true) {
                  arktest.assertNE(res, '')
              }
              return
          }

    - use: |-
          // entry point exported function main, explicit void, positive
          let res = ''
          export function main(): void {
              if (true) {
                  return
              }
              arktest.assertNE(res, '')
          }

    - tags: negative
      use: |-
          // entry point exported function main, explicit void, negative
          let res = ''
          export function main(): void {
              if (true) {
                  arktest.assertNE(res, '')
              }
              return
          }

    # exported function main, int return type
    - use: |-
          // entry point exported function main, inferred int, positive
          export function main() {
              return 0
          }

    - tags: negative
      use: |-
          // entry point exported function main, inferred int, negative
          export function main() {
              return 1
          }

    - use: |-
          // entry point exported function main, explicit int, positive
          export function main(): int {
              return 0
          }

    - tags: negative
      use: |-
          // entry point exported function main, explicit int, negative
          export function main(): int {
              return 1
          }

    # top-level statements only, positive
    - use: |-
          // top-level statements, positive
          arktest.assertTrue(true)

    # top-level statements only, negative
    - tags: negative
      use: |-
          // top-level statements, negative
          arktest.assertTrue(false)

    # top-level statements and function main
    - use: |-
          // top-level statements and function main, positive
          let res = ''
          function main() {
              res += 'Y'
              arktest.assertEQ(res, 'XY')
          }
          res += 'X'
          arktest.assertEQ(res, 'X')

    - use: |-
          // top-level statements and function main, positive
          let res = 'X'

          function main() {
              if (res == 'X') {
                  res += 'Y'
              } else {
                  arktest.assertEQ(res, 'XY')
              }
          }

          main()

    - use: |-
          // top-level statements and function main, negative
          let res = 'X'

          function main() {
              if (res == 'X') {
                  res += 'Y'
              } else {
                  arktest.assertEQ(res, 'XY')
              }
          }

          main()
          main()

    - tags: negative
      use: |-
          // top-level statements and function main, negative
          let res = 'X'

          function main(): int {
              return res == '' ? 0 : 1
          }

    - use: |-
          let topLevel: string = 'Execute the top-level statements first'
          topLevel += '!'

          function main(): void {
              arktest.assertEQ(topLevel, 'Execute the top-level statements first!')
              let lowLevel: string = 'Execute the low-level statements after'
              lowLevel += '!'
              arktest.assertEQ(lowLevel, 'Execute the low-level statements after!')
          }

    # invalid return type
    - tags: negative, compile-only
      use: |-
          let res = ''
          function main(): void {
              return res == '' ? 0 : 1 // CTE, wrong return type
          }

    - tags: negative, compile-only
      use: |-
          enum Color { Red, Green, Blue }
          let res = ''
          function main(): void {
              return res == '' ? Color.Red : Color.Green // CTE, wrong return type
          }

    - tags: negative
      use: |-
          enum Color { Red, Green, Blue }
          let res = ''
          function main() {
              return res == '' ? Color.Red : Color.Green
          }

    - tags: negative
      use: |-
          function main() {
              return 0.0
          }

    - tags: negative, compile-only
      use: |-
          function main(): int {
              return 0.0  // wrong return type
          }

    - tags: negative, compile-only
      use: |-
          function main(): number { // wrong return type
              return 0.0
          }

    - tags: negative, compile-only
      use: |-
          function main(): byte { // wrong return type
              return (0).toByte()
          }

    - tags: negative, compile-only
      use: |-
          let res = ''
          function main(): string { // wrong return type
              return res
          }

    - tags: negative
      use: |-
          let v: int|string = 0
          function main() {
              return v
          }

    - tags: negative, compile-only
      use: |-
          let v: int|string = 0
          function main(): int {
              let x = v
              if (x != undefined) {
                  return x  // wrong return type
              }
              return 0
          }

    # overloading
    - tags: compile-only, negative
      use: |-
          function main(): void
          function main(p: string[]): void
          function main(...p: Any[]): Any { // CTE, overload signatures not permitted
              if (true) {
                  return
              }
              throw new Error()
          }

    - tags: compile-only, negative
      use: |-
          function main(): int
          function main(p: string[]): int
          function main(...p: Any[]): Any { // CTE, overload signatures not permitted
              if (true) {
                  return 0
              }
              throw new Error()
          }

    - use: |-
          // exported main function is called
          export function main() {
              arktest.assertTrue(true)
          }
          export function main2(args: string[]) {
              arktest.assertTrue(false)
          }
          export overload main { main, main2 }

    - use: |-
          // implicit main function is called
          export function main2(args: string[]) {
              arktest.assertTrue(false)
          }
          export overload main { main, main2 }
