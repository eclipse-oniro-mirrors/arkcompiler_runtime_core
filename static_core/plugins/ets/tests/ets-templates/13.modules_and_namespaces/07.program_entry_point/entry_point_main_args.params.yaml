# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # void return type
    - cmd_line_args: X, Y
      tags: negative
      use: |-
          function main(args: string[]) {
              arktest.assertEQ(args[0], 'X')
              arktest.assertEQ(args[1], 'Y')
              arktest.assertTrue(false)
          }

    # int return type
    - cmd_line_args: X, Y
      tags: negative
      use: |-
          export function main(args: string[]): int {
              arktest.assertEQ(args[0], 'X')
              arktest.assertEQ(args[1], 'Y')
              return 1
          }

    # with overload declarations, void
    - cmd_line_args: X, Y
      tags: 'compile-only, negative'
      use: |-
          export overload main { main1, main }

          export function main(args: string[]) {
              arktest.assertEQ(args[0], 'X')
              arktest.assertEQ(args[1], 'Y')
          }

          function main1() { // should not be called
              arktest.assertTrue(false)
          }

    # with overload declarations, int
    - cmd_line_args: X, Y
      tags: 'compile-only, negative'
      use: |-
          export overload main { main1, main }

          export function main(args: string[]): int {
              arktest.assertEQ(args[0], 'X')
              arktest.assertEQ(args[1], 'Y')
              return 0
          }

          function main1(args: string[]): int {
              return 1
          }

    # entry point function cannot have overloading, void return type
    - cmd_line_args: X, Y
      use: |-
          export overload main { main1, main2, main }

          export function main1(args: string[]) {
              arktest.assertTrue(false)
          }

          export function main2(args: string[]) {
              arktest.assertTrue(false)
          }

    # entry point function cannot have overloading, int return type
    - cmd_line_args: X, Y
      use: |-
          export overload main { main1, main, main2 }

          export function main1(args: string[]): int {
              return 1
          }

          export function main2(args: string[]): int {
              return 1
          }

    # entry point function cannot have overload signatures
    - cmd_line_args: X, Y
      tags: negative
      use: |-
          export function main(p: string[]): void
          export function main(...p: Any[]): Any {
              arktest.assertTrue(true)
          }

    - cmd_line_args: X, Y
      tags: negative
      use: |-
          function main(p: string[]): int
          function main(...p: Any[]): Any {
              return 0
          }

          export { main }

    # quoted command-line arguments
    - cmd_line_args: >-
          "a, b c", "D E, F"
      use: |-
          function main(args: string[]) {
              arktest.assertEQ(args[0], 'a, b c')
              arktest.assertEQ(args[1], 'D E, F')
          }

    - cmd_line_args: >-
          "a, `b c", "D E, `F"
      use: |-
          function main(args: string[]) {
              arktest.assertEQ(args[0], 'a, `b c')
              arktest.assertEQ(args[1], 'D E, `F')
          }

    - cmd_line_args: >-
          "a, \"b\" c", "D 'E', F"
      use: |-
          function main(args: string[]) {
              arktest.assertEQ(args[0], 'a, "b" c')
              arktest.assertEQ(args[1], 'D \'E\', F')
          }

    - cmd_line_args: >-
          'a, "b-''c''-d", e', 'D, ''E-"F"-G'', H'
      use: |-
          function main(args: string[]) {
              arktest.assertEQ(args[0], 'a, "b-\'c\'-d", e')
              arktest.assertEQ(args[1], 'D, \'E-"F"-G\', H')
          }
