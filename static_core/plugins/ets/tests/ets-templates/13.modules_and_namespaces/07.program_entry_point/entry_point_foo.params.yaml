# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # void return type
    - entry_point: foo
      use: |-
          export function foo() {
              arktest.assertTrue(true)
          }

          export function main() { // should not be called
              arktest.assertTrue(false)
          }

    - entry_point: foo
      use: |-
          function foo() {
              arktest.assertTrue(true)
          }

          function main() { // should not be called
              arktest.assertTrue(false)
          }

          export { main, foo }

    # int return type
    - entry_point: foo
      use: |-
          export function foo(): int {
              return 0
          }

          export function main(): int { // should not be called
              return 1
          }

    - entry_point: foo
      use: |-
          function foo(): int {
              return 0
          }

          function main(): int { // should not be called
              return 1
          }

          export { foo, main }

    # with overload declarations, void
    - entry_point: foo1
      use: |-
          export overload foo { foo1 }

          export function foo1() {
              arktest.assertTrue(true)
          }

          function main() { // should not be called
              arktest.assertTrue(false)
          }

    - entry_point: foo1
      use: |-
          overload foo { foo1 }
          export { foo, foo1, main }

          function foo1() {
              arktest.assertTrue(true)
          }

          function main() { // should not be called
              arktest.assertTrue(false)
          }

    # with overload declarations, int
    - entry_point: foo1
      use: |-
          export overload foo { foo1 }

          export function foo1(): int {
              return 0
          }

          function main(): int {
              return 1
          }

    - entry_point: foo1
      use: |-
          overload foo { foo1 }

          function foo1(): int {
              return 0
          }

          function main(): int {
              return 1
          }

          export { main, foo, foo1 }

    # entry point function cannot have overloading, void return type
    - entry_point: foo
      tags: negative
      use: |-
          export overload foo { foo1 }

          export function foo1() {
              arktest.assertTrue(true)
          }

          export function main() {
              arktest.assertTrue(true)
          }

    - entry_point: main
      use: |-
          export overload main { foo1, main }

          export function foo1() { // should not be called
              arktest.assertTrue(false)
          }

    - entry_point: foo
      tags: negative
      use: |-
          overload foo { foo1 }
          export { foo, foo1, main }

          function foo1() {
              arktest.assertTrue(true)
          }

          function main() {
              arktest.assertTrue(true)
          }

    - entry_point: main
      tags: 'compile-only, negative'
      use: |-
          overload main { foo1, main }
          export { foo1, main }

          function foo1() { // should not be called
              arktest.assertTrue(false)
          }

          function main() {
              arktest.assertTrue(true)
          }

    # entry point function cannot have overloading, int return type
    - entry_point: foo
      tags: negative
      use: |-
          export overload foo { foo1 }

          export function foo1(): int {
              return 0
          }

          export function main(): int {
              return 0
          }

    - entry_point: main
      tags: 'compile-only, negative'
      use: |-
          export overload main { foo1, main }

          export function foo1(): int {
              return 1
          }

          export function main(): int {
              return 0
          }

    - entry_point: foo
      tags: negative
      use: |-
          overload foo { foo1 }

          function foo1(): int {
              return 0
          }

          function main(): int {
              return 0
          }

          export { main, foo, foo1 }

    - entry_point: main
      tags: 'compile-only, negative'
      use: |-
          overload main { foo1, main }

          function foo1(): int {
              return 1
          }

          function main(): int {
              return 0
          }

          export { main, foo1 }

    # entry point function cannot have overload signatures
    - entry_point: foo
      tags: negative
      use: |-
          export function foo(): void
          export function foo(p: string[]): void
          export function foo(...p: Any[]): Any {
              arktest.assertTrue(true)
          }

    - entry_point: foo
      tags: negative
      use: |-
          function foo(): void
          function foo(p: string[]): void
          function foo(...p: Any[]): Any {
              arktest.assertTrue(true)
          }

          export { foo }

    - entry_point: foo
      tags: negative
      use: |-
          export function foo(): int
          export function foo(p: string[]): int
          export function foo(...p: Any[]): Any {
              return 0
          }

    - entry_point: foo
      tags: negative
      use: |-
          function foo(): int
          function foo(p: string[]): int
          function foo(...p: Any[]): Any {
              return 0
          }

          export { foo }

    # call main from another entry point
    - entry_point: foo
      use: |-
          export function foo() {
              arktest.assertEQ(main(), 42)
          }

          function main(): int {
              return 42
          }

    - entry_point: foo
      use: |-
          export function foo() {
              arktest.expectThrow(() => main())
          }

          function main() {
              throw new Error
          }

    - entry_point: foo
      tags: negative
      use: |-
          export function foo() {
              main()
              arktest.assertTrue(false)
          }

    - entry_point: foo
      use: |-
          export function foo(): int {
              return main() - 1
          }

          export function main(): int {
              return 1
          }

    - entry_point: foo
      use: |-
          export function foo(): int {
              arktest.expectThrow(() => main())
              return 0
          }

          export function main() {
              throw new Error
          }

    # return value from namespace
    - entry_point: foo
      use: |-
          namespace NS {
              let retCode: int
              export function foo() {
                  return retCode - 42
              }
              static {
                  retCode = 42
              }
          }

          export function foo(): int {
              return NS.foo()
          }

          export function main(): int {
              return 1
          }

    - entry_point: foo
      tags: negative
      use: |-
          namespace NS {
              export let retCode: int
              export function foo() {
                  arktest.assertEQ(retCode, 0)
              }
          }

          export function foo() {
              NS.retCode = 42
              NS.foo()
          }

          export function main(): int {
              return 0
          }
