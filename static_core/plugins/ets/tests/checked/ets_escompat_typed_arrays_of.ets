/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//! CHECKER       TypedArray of()
//! RUN           force_jit: true, options: "--compiler-regex=.*test.*ArrayOf.*", entry: "ets_escompat_typed_arrays_of.ETSGLOBAL::checkTypedArrayOf"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testInt8ArrayOfByte"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Int8ArrayOfByte"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testInt8ArrayOfInt"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Int8ArrayOfInt"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testInt8ArrayOfNumber"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Int8ArrayOfNumber"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testInt16ArrayOfShort"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Int16ArrayOfShort"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testInt16ArrayOfInt"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Int16ArrayOfInt"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testInt16ArrayOfNumber"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Int16ArrayOfNumber"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testInt32ArrayOfInt"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Int32ArrayOfInt"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testInt32ArrayOfNumber"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Int32ArrayOfNumber"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testBigInt64ArrayOfInt"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.BigInt64ArrayOfInt"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testBigInt64ArrayOfLong"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.BigInt64ArrayOfLong"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testBigInt64ArrayOfNumber"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.BigInt64ArrayOfNumber"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testFloat32ArrayOfInt"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Float32ArrayOfInt"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testFloat32ArrayOfFloat"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Float32ArrayOfFloat"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testFloat32ArrayOfNumber"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Float32ArrayOfNumber"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testFloat64ArrayOfInt"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Float64ArrayOfInt"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testFloat64ArrayOfNumber"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Float64ArrayOfNumber"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testUint8ClampedArrayOfNumber"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Uint8ClampedArrayOfNumber"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testUint8ClampedArrayOfInt"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Uint8ClampedArrayOfInt"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testUint8ClampedArrayOfShort"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Uint8ClampedArrayOfShort"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testUint8ArrayOfNumber"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Uint8ArrayOfNumber"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testUint8ArrayOfInt"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Uint8ArrayOfInt"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testUint8ArrayOfShort"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Uint8ArrayOfShort"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testUint16ArrayOfNumber"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Uint16ArrayOfNumber"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testUint16ArrayOfInt"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Uint16ArrayOfInt"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testUint32ArrayOfNumber"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Uint32ArrayOfNumber"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testUint32ArrayOfInt"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Uint32ArrayOfInt"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testUint32ArrayOfLong"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.Uint32ArrayOfLong"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testBigUint64ArrayOfInt"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.BigUint64ArrayOfInt"
//! METHOD        "ets_escompat_typed_arrays_of.ETSGLOBAL::testBigUint64ArrayOfLong"
//! PASS_AFTER    "Inline"
//! INST          "Intrinsic.BigUint64ArrayOfLong"

function checkTypedArrayOf() {
    testInt8ArrayOfByte()
    testInt8ArrayOfInt()
    testInt8ArrayOfNumber()

    testInt16ArrayOfShort()
    testInt16ArrayOfInt()
    testInt16ArrayOfNumber()

    testInt32ArrayOfInt()
    testInt32ArrayOfNumber()

    testBigInt64ArrayOfInt()
    testBigInt64ArrayOfLong()
    testBigInt64ArrayOfNumber()

    testFloat32ArrayOfInt()
    testFloat32ArrayOfFloat()
    testFloat32ArrayOfNumber()

    testFloat64ArrayOfInt()
    testFloat64ArrayOfNumber()

    testUint8ClampedArrayOfNumber()
    testUint8ClampedArrayOfInt()
    testUint8ClampedArrayOfShort()

    testUint8ArrayOfNumber()
    testUint8ArrayOfInt()
    testUint8ArrayOfShort()

    testUint16ArrayOfNumber()
    testUint16ArrayOfInt()

    testUint32ArrayOfNumber()
    testUint32ArrayOfInt()
    testUint32ArrayOfLong()

    testBigUint64ArrayOfNumber()
    testBigUint64ArrayOfInt()
    testBigUint64ArrayOfLong()
}

function testInt8ArrayOfByte() {
    let expected: FixedArray<number> = [(1).toByte(), (2).toByte(), (3).toByte(), (700).toByte()]
    let arr = Int8Array.of((1).toByte(), (2).toByte(), (3).toByte(), (700).toByte())
    checkArray(arr, expected)
}

function testInt8ArrayOfInt() {
    let expected: FixedArray<number> = [(1).toByte(), (2).toByte(), (3).toByte(), (700).toByte()]
    let arr = Int8Array.of(1, 2, 3, 700)
    checkArray(arr, expected)
}

function testInt8ArrayOfNumber() {
    let expected: FixedArray<number> = [12., 22., 32., 42., 33., 0, 0, 0]
    let arr = Int8Array.of(12., 22., 32., 42., 33., NaN, Infinity, -Infinity)
    checkArray(arr, expected)
}

function testInt16ArrayOfShort() {
    let expected: FixedArray<number> = [(1).toShort(), (2).toShort(), (3).toShort(), (700000).toShort()]
    let arr = Int16Array.of((1).toShort(), (2).toShort(), (3).toShort(), (700000).toShort())
    checkArray(arr, expected)
}

function testInt16ArrayOfInt() {
    let expected: FixedArray<number> = [(1).toShort(), (2).toShort(), (3).toShort(), (700000).toShort()]
    let arr = Int16Array.of(1, 2, 3, 700000)
    checkArray(arr, expected)
}

function testInt16ArrayOfNumber() {
    let expected: FixedArray<number> = [12., 22., 32., 42., 33., 0, 0, 0]
    let arr = Int16Array.of(12., 22., 32., 42., 33., NaN, Infinity, -Infinity)
    checkArray(arr, expected)
}

function testInt32ArrayOfInt() {
    let expected: FixedArray<number> = [1, 2, 3, 700000]
    let arr = Int32Array.of(1, 2, 3, 700000)
    checkArray(arr, expected)
}

function testInt32ArrayOfNumber() {
    let expected: FixedArray<number> = [12., 22., 32., 42., 33., -2147483648, 0, 0, 0, 0]
    let arr = Int32Array.of(12., 22., 32., 42., 33., 1.93428e+25, 3.86856e+25, NaN, Infinity, -Infinity)
    checkArray(arr, expected)
}

function testBigInt64ArrayOfInt() {
    let expected: FixedArray<number> = [1, 2, 3, 700000]
    let arr = BigInt64Array.of(1, 2, 3, 700000)
    checkArray(arr, expected)
}

function testBigInt64ArrayOfLong() {
    let expected: FixedArray<number> = [1, 2, 3, 700000]
    let arr = BigInt64Array.of((1).toLong(), (2).toLong(), (3).toLong(), (700000).toLong())
    checkArray(arr, expected)
}

function testBigInt64ArrayOfNumber() {
    let expected: FixedArray<number> = [12, 22, 32, 42, 33]
    let arr = BigInt64Array.of(12., 22., 32., 42., 33.)
    checkArray(arr, expected)
}

function testFloat32ArrayOfInt() {
    let expected: FixedArray<number> = [12, 22, 32, 42, 33]
    let arr = Float32Array.of(12, 22, 32, 42, 33)
    checkArray(arr, expected)
}

function testFloat32ArrayOfFloat() {
    let expected: FixedArray<number> = [12., 22., 32., 42., 33.]
    let arr = Float32Array.of((12).toFloat(), (22).toFloat(), (32).toFloat(), (42).toFloat(), (33).toFloat())
    checkArray(arr, expected)
}

function testFloat32ArrayOfNumber() {
    let expected: FixedArray<number> = [12., 22., 32., 42., 33.]
    let arr = Float32Array.of(12., 22., 32., 42., 33.)
    checkArray(arr, expected)
}

function testFloat64ArrayOfInt() {
    let expected: FixedArray<number> = [12, 22, 32, 42, 33]
    let arr = Float64Array.of(12, 22, 32, 42, 33)
    checkArray(arr, expected)
}

function testFloat64ArrayOfNumber() {
    let expected: FixedArray<number> = [12., 22., 32., 42., 33.]
    let arr = Float64Array.of(12., 22., 32., 42., 33.)
    checkArray(arr, expected)
}

function testUint8ClampedArrayOfNumber() {
    let expected: FixedArray<number> = [12, 0, 255, 42, 33, 0, 255, 0]
    let arr = Uint8ClampedArray.of(12., -6., 332., 42., 33., NaN, Infinity, -Infinity)
    checkArray(arr, expected)
}

function testUint8ClampedArrayOfInt() {
    let expected: FixedArray<number> = [12, 0, 255, 42, 33]
    let arr = Uint8ClampedArray.of(12, -6, 332, 42, 33)
    checkArray(arr, expected)
}

function testUint8ClampedArrayOfShort() {
    let expected: FixedArray<number> = [12, 0, 255, 42, 33]
    let arr = Uint8ClampedArray.of((12).toShort(), (-6).toShort(), (332).toShort(), (42).toShort(), (33).toShort())
    checkArray(arr, expected)
}

function testUint8ArrayOfNumber() {
    let expected: FixedArray<number> = [12, 6, 76, 42, 33, 0, 0, 0]
    let arr = Uint8Array.of(12., 6., 76., 42., 33., NaN, Infinity, -Infinity)
    checkArray(arr, expected)
}

function testUint8ArrayOfInt() {
    let expected: FixedArray<number> = [12, 6, 76, 42, 33]
    let arr = Uint8Array.of(12, 6, 76, 42, 33)
    checkArray(arr, expected)
}

function testUint8ArrayOfShort() {
    let expected: FixedArray<number> = [12, 6, 76, 42, 33]
    let arr = Uint8Array.of((12).toShort(), (6).toShort(), (76).toShort(), (42).toShort(), (33).toShort())
    checkArray(arr, expected)
}

function testUint16ArrayOfNumber() {
    let expected: FixedArray<number> = [12, 6, 76, 42, 33, 0, 0, 0]
    let arr = Uint16Array.of(12., 6., 76., 42., 33., NaN, Infinity, -Infinity)
    checkArray(arr, expected)
}

function testUint16ArrayOfInt() {
    let expected: FixedArray<number> = [12, 6, 332, 42, 33]
    let arr = Uint16Array.of(12, 6, 332, 42, 33)
    checkArray(arr, expected)
}

function testUint32ArrayOfNumber() {
    let expected: FixedArray<number> = [12, 6, 332, 42, 33, 0, 0, 0]
    let arr = Uint32Array.of(12., 6., 332., 42., 33., NaN, Infinity, -Infinity)
    checkArray(arr, expected)
}

function testUint32ArrayOfInt() {
    let expected: FixedArray<number> = [12, 6, 332, 42, 33]
    let arr = Uint32Array.of(12, 6, 332, 42, 33)
    checkArray(arr, expected)
}

function testUint32ArrayOfLong() {
    let expected: FixedArray<number> = [12, 6, 332, 42, 33]
    let arr = Uint32Array.of((12).toLong(), (6).toLong(), (332).toLong(), (42).toLong(), (33).toLong())
    checkArray(arr, expected)
}

function testBigUint64ArrayOfNumber() {
    let expected: FixedArray<number> = [12, 6, 332, 42, 33]
    let arr = BigUint64Array.of(12., 6., 332., 42., 33.)
    checkArray(arr, expected)
}

function testBigUint64ArrayOfInt() {
    let expected: FixedArray<number> = [12, 6, 332, 42, 33]
    let arr = BigUint64Array.of(12, 6, 332, 42, 33)
    checkArray(arr, expected)
}

function testBigUint64ArrayOfLong() {
    let expected: FixedArray<number> = [12, 6, 332, 42, 33]
    let arr = BigUint64Array.of((12).toLong(), (6).toLong(), (332).toLong(), (42).toLong(), (33).toLong())
    checkArray(arr, expected)
}

function checkArray(arr: ArrayLike<number>, expected: FixedArray<number>) {
    arktest.assertEQ(arr.length, expected.length, "Unexpected array length")
    for (let i = 0; i < expected.length; i++) {
        arktest.assertEQ(arr[i], expected[i], "Error in index: " + i + ", value: " + arr[i] + " expected value: " + expected[i])
    }
}

function checkArray(arr: BigInt64Array, expected: FixedArray<number>) {
    arktest.assertEQ(arr.length, expected.length, "Unexpected array length")
    for (let i = 0; i < expected.length; i++) {
        arktest.assertEQ(arr[i].getLong(), expected[i], "Error in index: " + i + ", value: " + arr[i] + " expected value: " + expected[i])
    }
}

function checkArray(arr: BigUint64Array, expected: FixedArray<number>) {
    arktest.assertEQ(arr.length, expected.length, "Unexpected array length")
    for (let i = 0; i < expected.length; i++) {
        arktest.assertEQ(arr[i].getLong(), expected[i], "Error in index: " + i + ", value: " + arr[i] + " expected value: " + expected[i])
    }
}
