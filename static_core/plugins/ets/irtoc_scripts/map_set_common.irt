# plugin ets_map
# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include_relative '../../../irtoc/scripts/common.irt'
include_relative '../../../irtoc/scripts/string_helpers.irt'
include_relative 'common.irt'

module MapConstants
  MARK_WORD_STATUS_MASK_IN_PLACE = "(ark::MarkWord::MarkWordSize)ark::MarkWord::STATUS_MASK_IN_PLACE"
  MARK_WORD_STATUS_HASHED_IN_PLACE = "(ark::MarkWord::STATUS_HASHED << ark::MarkWord::STATUS_SHIFT)"
  MARK_WORD_HASH_CODE_MASK = "(ark::MarkWord::MarkWordSize)ark::MarkWord::HASH_MASK"

  CLASS_STRING_CLASS_FLAG = "ark::Class::STRING_CLASS"

  ENTRY_KEY_OFFSET = "cross_values::GetEscompatMapEntryKeyOffset(graph->GetArch())"
  ENTRY_VAL_OFFSET = "cross_values::GetEscompatMapEntryValOffset(graph->GetArch())"
  ENTRY_PREV_OFFSET = "cross_values::GetEscompatMapEntryPrevOffset(graph->GetArch())"
  ENTRY_NEXT_OFFSET = "cross_values::GetEscompatMapEntryNextOffset(graph->GetArch())"

  SIZE_OFFSET = "cross_values::GetEscompatMapSizeOffset(graph->GetArch())"
  BUCKETS_OFFSET = "cross_values::GetEscompatMapBucketsOffset(graph->GetArch())"

  ETS_CLASS_BOXED_TYPE_FIELD_START = "cross_values::GetEtsClassBoxedTypeFieldStart(graph->GetArch())"
  ETS_CLASS_BOXED_TYPE_FIELD_SIZE = "cross_values::GetEtsClassBoxedTypeFieldSize(graph->GetArch())"
  ETS_CLASS_BOXED_TYPE_FIELD_MASK = "(((1LLU << " + ETS_CLASS_BOXED_TYPE_FIELD_SIZE + ") - 1) << " + ETS_CLASS_BOXED_TYPE_FIELD_START + ")"
  ETS_CLASS_BOXED_TYPE_CHAR_MASK_VALUE = "(cross_values::GetEtsClassBoxedTypeCharMaskValue(graph->GetArch()) << " + ETS_CLASS_BOXED_TYPE_FIELD_START + ")"
  ETS_CLASS_BOXED_TYPE_SHORT_MASK_VALUE = "(cross_values::GetEtsClassBoxedTypeShortMaskValue(graph->GetArch()) << " + ETS_CLASS_BOXED_TYPE_FIELD_START + ")"
  ETS_CLASS_BOXED_TYPE_INT_MASK_VALUE = "(cross_values::GetEtsClassBoxedTypeIntMaskValue(graph->GetArch()) << " + ETS_CLASS_BOXED_TYPE_FIELD_START + ")"
  ETS_CLASS_BOXED_TYPE_LONG_MASK_VALUE = "(cross_values::GetEtsClassBoxedTypeLongMaskValue(graph->GetArch()) << " + ETS_CLASS_BOXED_TYPE_FIELD_START + ")"
  ETS_CLASS_BOXED_TYPE_FLOAT_MASK_VALUE = "(cross_values::GetEtsClassBoxedTypeFloatMaskValue(graph->GetArch()) << " + ETS_CLASS_BOXED_TYPE_FIELD_START + ")"
  ETS_CLASS_BOXED_TYPE_DOUBLE_MASK_VALUE = "(cross_values::GetEtsClassBoxedTypeDoubleMaskValue(graph->GetArch()) << " + ETS_CLASS_BOXED_TYPE_FIELD_START + ")"

  ETS_CLASS_IS_NULLVALUE_FLAG = "cross_values::GetEtsClassIsNullvalueFlag(graph->GetArch())"
  ETS_CLASS_IS_BOXED_FLAG = "cross_values::GetEtsClassIsBoxedFlag(graph->GetArch())"
  ETS_CLASS_IS_VALUE_TYPED_FLAG = "cross_values::GetEtsClassIsValueTypedFlag(graph->GetArch())"
  ETS_CLASS_IS_BIGINT_FLAG = "cross_values::GetEtsClassIsBigintFlag(graph->GetArch())"

  INT_MAX = "std::numeric_limits<int>::max()"
  INT_MIN = "std::numeric_limits<int>::min()"

  FLOAT32_NAN_EXPONENT_BITS = "(~(~0u << 8)) << 23"
  FLOAT32_NAN_SIGNIFICAND_BITS = "~(~0u << 23)"
  FLOAT64_NAN_EXPONENT_BITS = "(~(~0Lu << 11)) << 52"
  FLOAT64_NAN_SIGNIFICAND_BITS = "~(~0Lu << 52)"

  SET_ELEMENTS_OFFSET = "cross_values::GetEscompatSetElementsOffset(graph->GetArch())"
end

################################################################

scoped_macro(:isNan32) do |val| 
  bits := Bitcast(val).u32
  exponent := AndI(bits).Imm(MapConstants::FLOAT32_NAN_EXPONENT_BITS).u32
  significand := AndI(bits).Imm(MapConstants::FLOAT32_NAN_SIGNIFICAND_BITS).u32  
  is_nan := And(Compare(exponent, MapConstants::FLOAT32_NAN_EXPONENT_BITS).b, Not(Compare(significand, 0).b).b).b
end

scoped_macro(:isNan64) do |val| 
  bits := Bitcast(val).u64
  exponent := AndI(bits).Imm(MapConstants::FLOAT64_NAN_EXPONENT_BITS).u64
  significand := AndI(bits).Imm(MapConstants::FLOAT64_NAN_SIGNIFICAND_BITS).u64
  is_nan := And(Compare(exponent, MapConstants::FLOAT64_NAN_EXPONENT_BITS).b, Not(Compare(significand, 0).b).b).b
end

scoped_macro(:isHashedString) do |obj|
  Compare(LoadI(obj).Imm(Constants::STRING_HASHCODE_OFFSET).u32, 0).NE.b
end

scoped_macro(:isHashedObject) do |obj|
  mark_word := LoadI(obj).Imm(Constants::MARK_WORD_OFFSET).u32
  obj_status := AndI(mark_word).Imm(MapConstants::MARK_WORD_STATUS_MASK_IN_PLACE).u32
  Compare(obj_status, MapConstants::MARK_WORD_STATUS_HASHED_IN_PLACE).EQ.b
end

scoped_macro(:isHashed) do |obj, is_string|
  If(is_string, 0).NE.b {
    is_hashed_str := isHashedString(obj)
  } Else {
    is_hashed_obj := isHashedObject(obj)
  }
  is_hashed := Phi(is_hashed_str, is_hashed_obj).b
end

scoped_macro(:getPlatType) do |ptypes, ofs|
  LoadI(ptypes).Imm(ofs).ref
end

scoped_macro(:isNullValue) do |flags|
  is_nullvalue := AndI(flags).Imm(MapConstants::ETS_CLASS_IS_NULLVALUE_FLAG).u32
end

scoped_macro(:isString) do |klass|
  flags := LoadI(klass).Imm(Constants::BASE_CLASS_FLAGS_OFFSET).u32
  is_string := AndI(flags).Imm(MapConstants::CLASS_STRING_CLASS_FLAG).u32
end

scoped_macro(:isBoxedType) do |flags|
  AndI(flags).Imm(MapConstants::ETS_CLASS_IS_BOXED_FLAG).u32
end

scoped_macro(:isValueTypedType) do |flags|
  AndI(flags).Imm(MapConstants::ETS_CLASS_IS_VALUE_TYPED_FLAG).u32
end

scoped_macro(:getBoxedType) do |flags|
  boxed_type = AndI(flags).Imm(MapConstants::ETS_CLASS_BOXED_TYPE_FIELD_MASK).u32
end

# isChar, isShort, isInt, isLong, isFloat, isDouble
['Char', 'Short', 'Int', 'Long', 'Float', 'Double'].each do |name|
  scoped_macro(:"is#{name}") do |type|
    If(type, Cast(eval("MapConstants::ETS_CLASS_BOXED_TYPE_#{name.upcase}_MASK_VALUE")).u32).EQ.Likely {
      _res1 := Cast(1).b
    } Else {
      _res2 := Cast(0).b
    }
    Phi(_res1, _res2).b
  end
end

scoped_macro(:isBigintType) do |flags|
  AndI(flags).Imm(MapConstants::ETS_CLASS_IS_BIGINT_FLAG).u32
end


scoped_macro(:fetchHashCodeString) do |obj|
  LoadI(obj).Imm(Constants::STRING_HASHCODE_OFFSET).u32
end

scoped_macro(:fetchHashCodeObject) do |obj|
  mark_word := LoadI(obj).Imm(Constants::MARK_WORD_OFFSET).u32
  AndI(mark_word).Imm(MapConstants::MARK_WORD_HASH_CODE_MASK).u32
end

scoped_macro(:fetchHashCode) do |obj, is_string|
  If(is_string, 0).NE.b {
    hash_code_str := fetchHashCodeString(obj)
  } Else {
    hash_code_obj := fetchHashCodeObject(obj)
  }
  hash_code := Phi(hash_code_str, hash_code_obj).u32
end


scoped_macro(:calcHashCode) do |obj, flags|
  ptypes := LoadI(%tr).Imm(EtsConstants::CORO_LOCAL_STORAGE_OFFSET).ptr
  btype := getBoxedType(flags)

  int_max := Cast(MapConstants::INT_MAX).f64
  int_min := Cast(MapConstants::INT_MIN).f64

  If(isDouble(btype), 1).EQ.b {
    value_double := LoadI(obj).Imm(EtsConstants::BOX_PRIMITIVE_VALUE_OFFSET).f64

    If(isNan64(value_double), 0).NE.b {
      hash_code_double_nan := 0
      Goto(:ValueDoubleDone)
    }
    IfImm(Compare(value_double, int_max).GT.b).Imm(0).NE.b {
      hash_code_double_large_pos := MapConstants::INT_MAX
      Goto(:ValueDoubleDone)
    }
    IfImm(Compare(value_double, int_min).LT.b).Imm(0).NE.b {
      hash_code_double_large_neg := MapConstants::INT_MIN
      Goto(:ValueDoubleDone)
    } Else {
      hash_code_double_norm := Cast(Cast(value_double).i32).u32
    }
Label(:ValueDoubleDone)
    hash_code_double := Phi(hash_code_double_nan, hash_code_double_large_pos, hash_code_double_large_neg, hash_code_double_norm).u32
    Goto(:Done)
  }

  If(isFloat(btype), 1).EQ.b {
    value_float := LoadI(obj).Imm(EtsConstants::BOX_PRIMITIVE_VALUE_OFFSET).f32

    If(isNan32(value_float), 0).NE.b {
      hash_code_float_nan := 0
      Goto(:ValueFloatDone)
    }
    IfImm(Compare(Cast(value_float).f64, int_max).GT.b).Imm(0).NE.b {
      hash_code_float_large_pos := MapConstants::INT_MAX
      Goto(:ValueFloatDone)
    }
    IfImm(Compare(Cast(value_float).f64, int_min).LT.b).Imm(0).NE.b {
      hash_code_float_large_neg := MapConstants::INT_MIN
      Goto(:ValueFloatDone)
    } Else {
      hash_code_float_norm := Cast(Cast(value_float).i32).u32
    }
Label(:ValueFloatDone)
    hash_code_float := Phi(hash_code_float_nan, hash_code_float_large_pos, hash_code_float_large_neg, hash_code_float_norm).u32
    Goto(:Done)
  } 

  isIntLong := Or(isInt(btype), isLong(btype)).b
  If(isIntLong, 1).EQ.b {
    hash_code_int := LoadI(obj).Imm(EtsConstants::BOX_PRIMITIVE_VALUE_OFFSET).u32
    Goto(:Done)
  } 

  isCharShort := Or(isChar(btype), isShort(btype)).b
  If(isCharShort, 1).EQ.b {
    hash_code_short := Cast(LoadI(obj).Imm(EtsConstants::BOX_PRIMITIVE_VALUE_OFFSET).u16).u32
  } Else {
    hash_code_byte := Cast(LoadI(obj).Imm(EtsConstants::BOX_PRIMITIVE_VALUE_OFFSET).u8).u32
  }

Label(:Done)
  hash_code := Phi(hash_code_double, hash_code_float, hash_code_int, hash_code_short, hash_code_byte).u32
end
