# plugin ets_map
# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include_relative '../../../irtoc/scripts/common.irt'
include_relative '../../../irtoc/scripts/string_helpers.irt'
include_relative 'common.irt'

module MapConstants
  OBJ_PTR_SIZE = "ark::OBJECT_POINTER_SIZE"

  MARK_WORD_STATUS_MASK_IN_PLACE = "(ark::MarkWord::MarkWordSize)ark::MarkWord::STATUS_MASK_IN_PLACE"
  MARK_WORD_STATUS_HASHED_IN_PLACE = "(ark::MarkWord::STATUS_HASHED << ark::MarkWord::STATUS_SHIFT)"
  MARK_WORD_HASH_CODE_MASK = "(ark::MarkWord::MarkWordSize)ark::MarkWord::HASH_MASK"

  CLASS_STRING_CLASS_FLAG = "ark::Class::STRING_CLASS"

  ETS_CLASS_RUNTIME_CLASS_OFFSET = "cross_values::GetEtsClassRuntimeClassOffset(graph->GetArch())"
  ETS_CLASS_FLAGS_OFFSET = "cross_values::GetEtsClassFlagsOffset(graph->GetArch())"
  ETS_CLASS_FLAGS_FROM_RUNTIME_CLASS_OFFSET = "(-" + ETS_CLASS_RUNTIME_CLASS_OFFSET + "+" + ETS_CLASS_FLAGS_OFFSET + ")"

  ENTRY_KEY_OFFSET = "cross_values::GetEscompatMapEntryKeyOffset(graph->GetArch())"
  ENTRY_VAL_OFFSET = "cross_values::GetEscompatMapEntryValOffset(graph->GetArch())"
  ENTRY_PREV_OFFSET = "cross_values::GetEscompatMapEntryPrevOffset(graph->GetArch())"
  ENTRY_NEXT_OFFSET = "cross_values::GetEscompatMapEntryNextOffset(graph->GetArch())"

  SIZE_OFFSET = "cross_values::GetEscompatMapSizeOffset(graph->GetArch())"
  BUCKETS_OFFSET = "cross_values::GetEscompatMapBucketsOffset(graph->GetArch())"

  PLATFORM_TYPES_CORE_LONG_TYPE_OFFSET = "cross_values::GetPlatformTypesCoreLongTypeOffset(graph->GetArch())"
  PLATFORM_TYPES_CORE_FLOAT_TYPE_OFFSET = "cross_values::GetPlatformTypesCoreFloatTypeOffset(graph->GetArch())"
  PLATFORM_TYPES_CORE_DOUBLE_TYPE_OFFSET = "cross_values::GetPlatformTypesCoreDoubleTypeOffset(graph->GetArch())"

  ETS_CLASS_IS_NULLVALUE_FLAG = "cross_values::GetEtsClassIsNullvalueFlag(graph->GetArch())"
  ETS_CLASS_IS_BOXED_FLAG = "cross_values::GetEtsClassIsBoxedFlag(graph->GetArch())"

  INT_MAX = "std::numeric_limits<int>::max()"
  INT_MIN = "std::numeric_limits<int>::min()"

  FLOAT32_NAN = "0x7fc00000"
  FLOAT64_NAN = "0x7ff8000000000000"

  SET_ELEMENTS_OFFSET = "cross_values::GetEscompatSetElementsOffset(graph->GetArch())"
end

################################################################

scoped_macro(:isHashed) do |obj, is_string|
  If(is_string, 0).NE.b {
    is_hashed_str := Compare(LoadI(obj).Imm(Constants::STRING_HASHCODE_OFFSET).u32, 0).NE.b
  } Else {
    mark_word := LoadI(obj).Imm(Constants::MARK_WORD_OFFSET).u32
    obj_status := AndI(mark_word).Imm(MapConstants::MARK_WORD_STATUS_MASK_IN_PLACE).u32
    is_hashed_obj := Compare(obj_status, MapConstants::MARK_WORD_STATUS_HASHED_IN_PLACE).EQ.b
  }

  is_hashed := Phi(is_hashed_str, is_hashed_obj).b
end

scoped_macro(:getPlatType) do |ptypes, ofs|
  type := LoadI(ptypes).Imm(ofs).ref
end

scoped_macro(:isNullValue) do |flags|
  is_nullvalue := AndI(flags).Imm(MapConstants::ETS_CLASS_IS_NULLVALUE_FLAG).u32
end

scoped_macro(:isString) do |klass|
  flags := LoadI(klass).Imm(Constants::BASE_CLASS_FLAGS_OFFSET).u32
  is_string := AndI(flags).Imm(MapConstants::CLASS_STRING_CLASS_FLAG).u32
end

scoped_macro(:isBoxedType) do |flags|
  is_boxed := AndI(flags).Imm(MapConstants::ETS_CLASS_IS_BOXED_FLAG).u32
end

scoped_macro(:fetchHashCode) do |obj, is_string|
  If(is_string, 0).NE.b {
    hash_code_str := LoadI(obj).Imm(Constants::STRING_HASHCODE_OFFSET).u32
  } Else {
    mark_word := LoadI(obj).Imm(Constants::MARK_WORD_OFFSET).u32
    hash_code_obj := AndI(mark_word).Imm(MapConstants::MARK_WORD_HASH_CODE_MASK).u32
  }

  hash_code := Phi(hash_code_str, hash_code_obj).u32
end

scoped_macro(:calcHashCode) do |obj, type|
  ptypes := LoadI(%tr).Imm(EtsConstants::CORO_LOCAL_STORAGE_OFFSET).ptr

  int_max := Cast(MapConstants::INT_MAX).f64
  int_min := Cast(MapConstants::INT_MIN).f64

  double_type := getPlatType(ptypes, MapConstants::PLATFORM_TYPES_CORE_DOUBLE_TYPE_OFFSET)
  If(type, double_type).EQ.b {
    value_double := LoadI(obj).Imm(EtsConstants::BOX_PRIMITIVE_VALUE_OFFSET).f64

    IfImm(Compare(Bitcast(value_double).u64, MapConstants::FLOAT64_NAN).EQ.b).Imm(0).NE.b {
      hash_code_double_nan := 0
      Goto(:ValueDoubleDone)
    }
    IfImm(Compare(value_double, int_max).GT.b).Imm(0).NE.b {
      hash_code_double_large_pos := MapConstants::INT_MAX
      Goto(:ValueDoubleDone)
    }
    IfImm(Compare(value_double, int_min).LT.b).Imm(0).NE.b {
      hash_code_double_large_neg := MapConstants::INT_MIN
      Goto(:ValueDoubleDone)
    } Else {
      hash_code_double_norm := Cast(Cast(value_double).i32).u32
    }
Label(:ValueDoubleDone)
    hash_code_double := Phi(hash_code_double_nan, hash_code_double_large_pos, hash_code_double_large_neg, hash_code_double_norm).u32
    Goto(:Done)
  }

  float_type := getPlatType(ptypes, MapConstants::PLATFORM_TYPES_CORE_FLOAT_TYPE_OFFSET)
  If(type, float_type).EQ.b {
    value_float := LoadI(obj).Imm(EtsConstants::BOX_PRIMITIVE_VALUE_OFFSET).f32

    IfImm(Compare(Bitcast(value_float).u32, MapConstants::FLOAT32_NAN).EQ.b).Imm(0).NE.b {
      hash_code_float_nan := 0
      Goto(:ValueFloatDone)
    }
    IfImm(Compare(Cast(value_float).f64, int_max).GT.b).Imm(0).NE.b {
      hash_code_float_large_pos := MapConstants::INT_MAX
      Goto(:ValueFloatDone)
    }
    IfImm(Compare(Cast(value_float).f64, int_min).LT.b).Imm(0).NE.b {
      hash_code_float_large_neg := MapConstants::INT_MIN
      Goto(:ValueFloatDone)
    } Else {
      hash_code_float_norm := Cast(Cast(value_float).i32).u32
    }
Label(:ValueFloatDone)
    hash_code_float := Phi(hash_code_float_nan, hash_code_float_large_pos, hash_code_float_large_neg, hash_code_float_norm).u32
    Goto(:Done)
  } Else {
    hash_code_int := LoadI(obj).Imm(EtsConstants::BOX_PRIMITIVE_VALUE_OFFSET).u32
  }

Label(:Done)
  hash_code := Phi(hash_code_double, hash_code_float, hash_code_int).u32
end

scoped_macro(:getBucketIdx) do |key, is_string, type, flags, buck_arr_len|
  If(isNullValue(flags), 0).NE.b {
    buck_idx_null := 0
    Goto(:Done)
  }

  If(isBoxedType(flags), 0).NE.b {
    key_hash_boxed := calcHashCode(key, type)
    Goto(:GotHashCode)
  }

  If(isHashed(key, is_string), 0).EQ.b {
    buck_idx_none := -1
    Goto(:Done)
  }

  key_hash_object := fetchHashCode(key, is_string)

Label(:GotHashCode)
  key_hash := Phi(key_hash_boxed, key_hash_object).u32

  buck_idx_tmp := AShrI(key_hash).Imm(31).u32
  buck_idx := And(Sub(Xor(key_hash, buck_idx_tmp).u32, buck_idx_tmp).u32, SubI(buck_arr_len).Imm(1).u32).u32

Label(:Done)
  buck_idx_res := Phi(buck_idx_null, buck_idx_none, buck_idx).i32
end

################################################################

scoped_macro(:compareByRef) do |obj, key|
  res := Compare(obj, key).b
end

scoped_macro(:getCompareVal) do |obj, type, long_type, float_type, double_type|
  is_64 := Or(Compare(type, long_type).b, Compare(type, double_type).b).b

  If(is_64, 0).NE.b {
    obj_val_64 := LoadI(obj).Imm(EtsConstants::BOX_PRIMITIVE_VALUE_OFFSET).u64
  } Else {
    obj_val_32 := Cast(LoadI(obj).Imm(EtsConstants::BOX_PRIMITIVE_VALUE_OFFSET).u32).u64
  }
  val := Phi(obj_val_64, obj_val_32).u64
end

scoped_macro(:compareByVal) do |obj, type, key_val, long_type, float_type, double_type|
  obj_val := getCompareVal(obj, type, long_type, float_type, double_type)

  is_double := Compare(type, double_type).b
  If(is_double, 0).NE.b {
    is_key_nan := Compare(key_val, MapConstants::FLOAT64_NAN).EQ.b
    is_obj_nan := Compare(obj_val, MapConstants::FLOAT64_NAN).EQ.b

    IfImm(Or(is_key_nan, is_obj_nan).b).Imm(0).EQ.b {
      key_f64 := Bitcast(key_val).f64
      obj_f64 := Bitcast(obj_val).f64
      res_f64_norm := Compare(obj_f64, key_f64).b
      Goto(:DoubleDone)
    } Else {
      res_f64_nan := And(is_key_nan, is_obj_nan).b
    }

  Label(:DoubleDone)
    res_f64 := Phi(res_f64_norm, res_f64_nan).b
    Goto(:Done)
  }

  is_float := Compare(type, float_type).b
  If(is_float, 0).NE.b {
    is_key_nan := Compare(Cast(key_val).u32, MapConstants::FLOAT32_NAN).EQ.b
    is_obj_nan := Compare(Cast(obj_val).u32, MapConstants::FLOAT32_NAN).EQ.b

    IfImm(Or(is_key_nan, is_obj_nan).b).Imm(0).EQ.b {
      key_f32 := Bitcast(Cast(key_val).u32).f32
      obj_f32 := Bitcast(Cast(obj_val).u32).f32
      res_f32_norm := Compare(obj_f32, key_f32).b
      Goto(:FloatDone)
    } Else {
      res_f32_nan := And(is_key_nan, is_obj_nan).b
    }

  Label(:FloatDone)
    res_f32 := Phi(res_f32_norm, res_f32_nan).b
    Goto(:Done)
  } Else {
    res_bits := Compare(obj_val, key_val).b
  }

Label(:Done)
  res := Phi(res_f64, res_f32, res_bits).b
end

################################################################

scoped_macro(:findKeyByStr) do |buck_data, buck_len, key|
  ofs_0 := Mul(SubI(buck_len).Imm(1).i32, MapConstants::OBJ_PTR_SIZE).i32
Label(:Loop)
  ofs := Phi(ofs_0, ofs_1).i32
  If(ofs, 0).LT.b {
    Goto(:Done)
  }

  entry := Load(buck_data, ofs).ref
  object := LoadI(entry).Imm(MapConstants::ENTRY_KEY_OFFSET).ref

  obj_klass := LoadI(object).Imm(Constants::OBJECT_CLASS_OFFSET).ref
  If(isString(obj_klass), 0).EQ.b {
    Goto(:Continue)
  }

  If(macroStringCompareTo(object, key), 0).EQ.Likely.b {
    Goto(:Done)
  }

Label(:Continue)
  ofs_1 := SubI(ofs).Imm(MapConstants::OBJ_PTR_SIZE).i32
  Goto(:Loop)

Label(:Done)
  found := ofs
end

scoped_macro(:findKeyByRef) do |buck_data, buck_len, key|
  ofs_0 := Mul(SubI(buck_len).Imm(1).i32, MapConstants::OBJ_PTR_SIZE).i32
Label(:Loop)
  ofs := Phi(ofs_0, ofs_1).i32
  If(ofs, 0).LT.b {
    Goto(:Done)
  }

  entry := Load(buck_data, ofs).ref
  object := LoadI(entry).Imm(MapConstants::ENTRY_KEY_OFFSET).ref

  If(compareByRef(object, key), 0).NE.Likely.b {
    Goto(:Done)
  }

  ofs_1 := SubI(ofs).Imm(MapConstants::OBJ_PTR_SIZE).i32
  Goto(:Loop)

Label(:Done)
  found := ofs
end

macro(:findKeyByVal) do |buck_data, buck_len, key, type|
  ptypes := LoadI(%tr).Imm(EtsConstants::CORO_LOCAL_STORAGE_OFFSET).ptr
  long_type := getPlatType(ptypes, MapConstants::PLATFORM_TYPES_CORE_LONG_TYPE_OFFSET)
  float_type := getPlatType(ptypes, MapConstants::PLATFORM_TYPES_CORE_FLOAT_TYPE_OFFSET)
  double_type := getPlatType(ptypes, MapConstants::PLATFORM_TYPES_CORE_DOUBLE_TYPE_OFFSET)

  key_val := getCompareVal(key, type, long_type, float_type, double_type)

  ofs_0 := Mul(SubI(buck_len).Imm(1).i32, MapConstants::OBJ_PTR_SIZE).i32
Label(:findKeyByValLoop)
  ofs := Phi(ofs_0, ofs_1).i32
  If(ofs, 0).LT.b {
    Goto(:findKeyByValDone)
  }

  entry := Load(buck_data, ofs).ref
  object := LoadI(entry).Imm(MapConstants::ENTRY_KEY_OFFSET).ref

  obj_klass := LoadI(object).Imm(Constants::OBJECT_CLASS_OFFSET).ref
  obj_type := LoadI(obj_klass).Imm(Constants::BASE_CLASS_MANAGED_OBJECT_OFFSET).ref

  If(obj_type, type).NE.Unlikely.b {
    Goto(:SlowPathEntrypoint)
  }

  If(compareByVal(object, type, key_val, long_type, float_type, double_type), 0).NE.Likely.b {
    Goto(:findKeyByValDone)
  }

  ofs_1 := SubI(ofs).Imm(MapConstants::OBJ_PTR_SIZE).i32
  Goto(:findKeyByValLoop)

Label(:findKeyByValDone)
  found := ofs
end

################################################################

scoped_macro(:isRefKey) do |key, flags|
  If(key, 0).EQ.Unlikely.b {
    by_ref_undef := 1
    Goto(:Done)
  }

  If(isBoxedType(flags), 0).NE.b {
    by_ref_boxed := 0
    Goto(:Done)
  } Else {
    by_ref_obj := 1
  }

Label(:Done)
  by_ref := Phi(by_ref_undef, by_ref_boxed, by_ref_obj).b
end

macro(:findKey) do |buck_data, buck_len, key, type, flags, is_string|
  If(is_string, 0).NE.b {
    find_by_str := findKeyByStr(buck_data, buck_len, key)
    Goto(:findKeyDone)
  }

  If(isRefKey(key, flags), 0).NE.b {
    find_by_ref := findKeyByRef(buck_data, buck_len, key)
  } Else {
    find_by_val := findKeyByVal(buck_data, buck_len, key, type)
  }

Label(:findKeyDone)
  Phi(find_by_str, find_by_ref, find_by_val).i32
end

################################################################

macro(:findOffset) do |map, key, ret_none_expr|
  buck_arr_hdr := LoadI(map).Imm(MapConstants::BUCKETS_OFFSET).ref
  buck_arr_len := LoadI(buck_arr_hdr).Imm(EtsConstants::ESCOMPAT_ARRAY_ACTUAL_LENGTH_OFFSET).u32

  If(key, 0).EQ.Unlikely.b {
    buck_array := LoadI(buck_arr_hdr).Imm(EtsConstants::ESCOMPAT_ARRAY_DATA_OFFSET).ref
    buck_array_data := AddI(buck_array).Imm(Constants::ARRAY_DATA_OFFSET).ptr
    buck_hdr_undef := LoadI(buck_array_data).Imm(MapConstants::OBJ_PTR_SIZE).ref # buckect number 1, like ETS
    If(buck_hdr_undef, 0).EQ.b {
      eval(ret_none_expr) # return
    }

    buck_len_undef := LoadI(buck_hdr_undef).Imm(EtsConstants::ESCOMPAT_ARRAY_ACTUAL_LENGTH_OFFSET).u32
    bucket_undef := get_object_pointer_imm(buck_hdr_undef, EtsConstants::ESCOMPAT_ARRAY_DATA_OFFSET)
    buck_data_undef := AddI(bucket_undef).Imm(Constants::ARRAY_DATA_OFFSET).ptr

    offset_undef := findKeyByRef(buck_data_undef, buck_len_undef, key)
  } Else {
    klass := LoadI(key).Imm(Constants::OBJECT_CLASS_OFFSET).ref
    type := LoadI(klass).Imm(Constants::BASE_CLASS_MANAGED_OBJECT_OFFSET).ref
    flags := LoadI(klass).Imm(MapConstants::ETS_CLASS_FLAGS_FROM_RUNTIME_CLASS_OFFSET).u32
    is_string := isString(klass)
    buck_idx := getBucketIdx(key, is_string, type, flags, buck_arr_len)
    If(buck_idx, -1).EQ.b {
      Goto(:SlowPathEntrypoint)
    }

    buck_array := LoadI(buck_arr_hdr).Imm(EtsConstants::ESCOMPAT_ARRAY_DATA_OFFSET).ref
    buck_array_data := AddI(buck_array).Imm(Constants::ARRAY_DATA_OFFSET).ptr
    buck_hdr_norm := Load(buck_array_data, Mul(buck_idx, MapConstants::OBJ_PTR_SIZE).u32).ref
    If(buck_hdr_norm, 0).EQ.b {
      eval(ret_none_expr) # return
    }

    buck_len_norm := LoadI(buck_hdr_norm).Imm(EtsConstants::ESCOMPAT_ARRAY_ACTUAL_LENGTH_OFFSET).u32
    bucket_norm := get_object_pointer_imm(buck_hdr_norm, EtsConstants::ESCOMPAT_ARRAY_DATA_OFFSET)
    buck_data_norm := AddI(bucket_norm).Imm(Constants::ARRAY_DATA_OFFSET).ptr

    offset_norm := findKey(buck_data_norm, buck_len_norm, key, type, flags, is_string)
  }
  buck_hdr := Phi(buck_hdr_undef, buck_hdr_norm).ref
  buck_data := Phi(buck_data_undef, buck_data_norm).ptr
  buck_len := Phi(buck_len_undef, buck_len_norm).u32

  offset_found := Phi(offset_undef, offset_norm).i32
  If(offset_found, 0).LT.b {
    eval(ret_none_expr) # return
  }

  offset := offset_found
end

################################################################

scoped_macro(:processMapHas) do |map, key|
  findOffset(map, key, "Return(0).b")
  Return(1).b

Label(:SlowPathEntrypoint)
  entrypoint = get_entrypoint_offset("MAP_HAS_USUAL")
  Intrinsic(:SLOW_PATH_ENTRY, map, key).AddImm(entrypoint).MethodAsImm("MapHasUsualBridge").Terminator.b
  Intrinsic(:UNREACHABLE).Terminator.void if defines.DEBUG
end

scoped_macro(:processMapGet) do |map, key|
  offset := findOffset(map, key, "Return(nullptr).ptr")

  entry := Load(buck_data, offset).ref
  object := get_object_pointer_imm(entry, MapConstants::ENTRY_VAL_OFFSET)
  Return(object).ptr

Label(:SlowPathEntrypoint)
  entrypoint = get_entrypoint_offset("MAP_GET_USUAL")
  Intrinsic(:SLOW_PATH_ENTRY, map, key).AddImm(entrypoint).MethodAsImm("MapGetUsualBridge").Terminator.ptr
  Intrinsic(:UNREACHABLE).Terminator.void if defines.DEBUG
end


scoped_macro(:processMapDelete) do |map, key|
  offset := findOffset(map, key, "Return(0).b")

  entry := Load(buck_data, offset).ref
  entry_next := LoadI(entry).Imm(MapConstants::ENTRY_NEXT_OFFSET).ref
  entry_prev := LoadI(entry).Imm(MapConstants::ENTRY_PREV_OFFSET).ref
  Store(entry_prev, MapConstants::ENTRY_NEXT_OFFSET, entry_next).ref
  Store(entry_next, MapConstants::ENTRY_PREV_OFFSET, entry_prev).ref

  new_len := SubI(buck_len).Imm(1).u32
  StoreI(buck_hdr, new_len).Imm(EtsConstants::ESCOMPAT_ARRAY_ACTUAL_LENGTH_OFFSET).u32

  last_item_ofs := Mul(new_len, MapConstants::OBJ_PTR_SIZE).i32
  If(offset, last_item_ofs).NE.b {
    popped_entry := Load(buck_data, last_item_ofs).ref
    Store(buck_data, offset, popped_entry).ref
  }

  size := LoadI(map).Imm(MapConstants::SIZE_OFFSET).u32
  StoreI(map, SubI(size).Imm(1).u32).Imm(MapConstants::SIZE_OFFSET).u32

  Return(1).b

Label(:SlowPathEntrypoint)
  entrypoint = get_entrypoint_offset("MAP_DELETE_USUAL")
  Intrinsic(:SLOW_PATH_ENTRY, map, key).AddImm(entrypoint).MethodAsImm("MapDeleteUsualBridge").Terminator.b
  Intrinsic(:UNREACHABLE).Terminator.void if defines.DEBUG
end
