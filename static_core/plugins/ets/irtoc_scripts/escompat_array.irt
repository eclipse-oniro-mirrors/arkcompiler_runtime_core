# plugin escompat_array
# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include_relative '../../../irtoc/scripts/common.irt'
include_relative 'common.irt'

module ArrayConstants
  PLATFORM_TYPES_ESCOMPAT_ARRAY_CLASS_OFFSET = "cross_values::GetPlatformTypesEscompatArrayClassOffset(graph->GetArch())"
end

function(:EscompatArrayIsPlatformArrayFast,
          params: {obj: 'ref'},
          regmap: $full_regmap,
          regalloc_set: $panda_mask,
          mode: [:FastPathPlus]) {

  if Options.arch == :arm32
    Intrinsic(:UNREACHABLE).Terminator.void
    next
  end

  arrayClass := get_platform_type_ref_uint(ArrayConstants::PLATFORM_TYPES_ESCOMPAT_ARRAY_CLASS_OFFSET)
  klass := LoadI(obj).Imm(Constants::OBJECT_CLASS_OFFSET).ref_uint
  etsKlass := SubI(klass).Imm(EtsConstants::ETS_CLASS_RUNTIME_CLASS_OFFSET).ref_uint
  If(arrayClass, etsKlass).EQ.Likely {
    result1 := 1
  } Else {
    result2 := 0
  }
  Return(Phi(result1, result2).i32).b
}

def GenerateArrayFastReverse(sync_type)
  function("EscompatArrayReverse#{sync_type}".to_sym,
          params: {obj: 'ref'},
          regmap: $full_regmap,
          regalloc_set: $panda_mask,
          mode: [:FastPath]) {

    if sync_type == :Hybrid && !defines.ARK_HYBRID
      ReturnVoid().void
      next
    end

    if Options.arch == :arm32
      Intrinsic(:UNREACHABLE).Terminator.void
      next
    end

    len := LoadI(obj).Imm(EtsConstants::ESCOMPAT_ARRAY_ACTUAL_LENGTH_OFFSET).u32
    # if len <= 1 then do nothing
    If(len, 1).BE.Unlikely.b {
      Goto(:Done)
    }

    buf := LoadI(obj).Imm(EtsConstants::ESCOMPAT_ARRAY_DATA_OFFSET).ref
    data := AddI(buf).Imm(Constants::ARRAY_DATA_OFFSET).ptr    

    # start reverting
    len_bytes := ShlI(len).Imm(EtsConstants::OBJ_PTR_LOG2_SIZE).u32
    half_len_bytes := ShlI(ShrI(len).Imm(1).u32).Imm(EtsConstants::OBJ_PTR_LOG2_SIZE).u32

    offset1_a := Cast(0).u32
    offset1_b := SubI(len_bytes).Imm(EtsConstants::OBJ_PTR_SIZE).u32
  Label(:Loop)
    offset_a := Phi(offset1_a, offset2_a).u32
    offset_b := Phi(offset1_b, offset2_b).u32
    If(offset_a, half_len_bytes).AE.Unlikely {
      Goto(:LoopDone)
    }

    elem_a := Load(data, offset_a).ref
    elem_b := Load(data, offset_b).ref
    Store(data, offset_a, elem_b).SetNeedBarrier(sync_type == :Hybrid).ref
    Store(data, offset_b, elem_a).SetNeedBarrier(sync_type == :Hybrid).ref

    offset2_a := AddI(offset_a).Imm(EtsConstants::OBJ_PTR_SIZE).u32
    offset2_b := SubI(offset_b).Imm(EtsConstants::OBJ_PTR_SIZE).u32
    Goto(:Loop)
  Label(:LoopDone)
    if sync_type == :Async
      post_inter_region_barrier(data, len_bytes)
    elsif sync_type == :AsyncManual
      obj_ptr := Cast(obj).ptr
      post_inter_generational_barrier(obj_ptr)
    end
  Label(:Done)
    ReturnVoid().void
  }
end

GenerateArrayFastReverse(:Sync)
GenerateArrayFastReverse(:Async)
GenerateArrayFastReverse(:AsyncManual)
GenerateArrayFastReverse(:Hybrid)
