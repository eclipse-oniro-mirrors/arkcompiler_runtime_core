{
  "extends": ["eslint:recommended", "plugin:@typescript-eslint/recommended"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": true
  },
  "plugins": ["@typescript-eslint"],
  "rules": {
    // suggestions
    "arrow-body-style": ["error", "always"],
    "camelcase": "off", // we use naming-convention rule to enforce naming scheme
    "class-methods-use-this": ["error", { "exceptMethods": [], "enforceForClassFields": true }],
    "complexity": ["error", { "max": 15 }],
    "consistent-return": ["error", { "treatUndefinedAsUnspecified": false }],
    "curly": ["error", "all"],
    "dot-notation": "error",
    "eqeqeq": ["error", "always"],
    "max-depth": ["error", { "max": 4 }],
    "multiline-comment-style": ["error", "starred-block"],
    "no-else-return": ["error", { "allowElseIf": true }],
    "no-extra-bind": "error",
    "no-lonely-if": "error",
    "no-unneeded-ternary": "error",
    "no-useless-return": "error",
    "no-var": "error",
    "prefer-const": "error",
    "spaced-comment": ["error", "always"],
    "one-var": ["error", "never"],
    "max-lines-per-function": ["error", { "max": 50 }],

    // typescript
    "@typescript-eslint/explicit-function-return-type": "error",
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/explicit-member-accessibility": [
      "error",
      {
        "accessibility": "no-public"
      }
    ],
    "@typescript-eslint/method-signature-style": ["error", "method"],
    "@typescript-eslint/no-confusing-non-null-assertion": "error",
    "@typescript-eslint/no-confusing-void-expression": "error",
    // FIXME(knazarov)
    // need to do something about this
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-extra-non-null-assertion": "error",
    "@typescript-eslint/no-meaningless-void-operator": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    // NOTE(knazarov)
    // disabled due to many cases, where typescript deduces non-undefined value, but we can recieve one from the api
    "@typescript-eslint/no-unnecessary-condition": "off",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/prefer-as-const": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/prefer-readonly": "error",
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase"]
      },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE"]
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"]
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": "memberLike",
        "format": ["camelCase"]
      }
    ]
  }
}
