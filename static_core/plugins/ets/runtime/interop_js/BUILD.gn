# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//arkcompiler/runtime_core/static_core/ark_config.gni")
import("//build/ohos.gni")

declare_args() {
  if (is_ohos && is_standard_system) {
    ark_napi_headers_path = "//third_party/node/src"
  } else {
    ark_napi_headers_path = ""
  }
}
assert(ark_napi_headers_path != "", "ark_napi_headers_path is not set")

if (is_ohos && is_standard_system) {
  ohos_prebuilt_etc("etsstdlib_install") {
    deps = [ "$ark_root/plugins/ets:etsstdlib" ]
    stdlib_dir =
        get_label_info("$ark_root/plugins/ets:etsstdlib", "target_gen_dir")
    source = "$stdlib_dir/etsstdlib.abc"
    part_name = ark_part_name
    subsystem_name = ark_subsystem_name
  }
}

ark_gen_file("interop_intrinsic_kinds_h") {
  template_file =
      "$ark_root/plugins/ets/compiler/optimizer/interop_intrinsic_kinds.h.erb"
  data = [ "$target_gen_dir/../../../../runtime/intrinsics.yaml" ]
  api = [
    "$ark_root/compiler/optimizer/templates/intrinsics/compiler_intrinsics.rb",
  ]
  output_file =
      "$target_gen_dir/../../compiler/generated/interop_intrinsic_kinds.h"
  extra_dependencies = [ "$ark_root/runtime:arkruntime_gen_intrinsics_yaml" ]
}

ohos_source_set("ets_interop_js_napi_static") {
  configs = [
    "$ark_root:ark_config",
    "$ark_root/runtime:arkruntime_public_config",
  ]

  include_dirs = [ "$ark_napi_headers_path" ]

  sources = [
    "call/call_ets.cpp",
    "call/call_js.cpp",
    "ets_proxy/ets_class_wrapper.cpp",
    "ets_proxy/ets_field_wrapper.cpp",
    "ets_proxy/ets_method_set.cpp",
    "ets_proxy/ets_method_wrapper.cpp",
    "ets_proxy/ets_proxy.cpp",
    "ets_proxy/shared_reference.cpp",
    "ets_proxy/shared_reference_storage.cpp",
    "ets_vm_plugin.cpp",
    "interop_common.cpp",
    "interop_context.cpp",
    "intrinsics_api_impl.cpp",
    "js_job_queue.cpp",
    "js_proxy/js_proxy.cpp",
    "js_refconvert.cpp",
    "js_refconvert_builtin.cpp",
    "js_refconvert_function.cpp",
    "js_value.cpp",
    "pending_promise_listener.cpp",
    "ts2ets_copy.cpp",
  ]
  if (current_cpu == "amd64" || current_cpu == "x64" ||
      current_cpu == "x86_64") {
    sources += [ "arch/amd64/call_bridge_amd64.S" ]
  } else if (current_cpu == "arm64") {
    sources += [ "arch/arm64/call_bridge_aarch64.S" ]
  } else if (current_cpu == "arm") {
    sources += [ "arch/arm32/call_bridge_arm32.S" ]
  }

  deps = [
    ":interop_intrinsic_kinds_h",
    "$ark_root/compiler:libarktscompiler",
    "$ark_root/libpandabase:libarktsbase",
    "$ark_root/runtime:libarkruntime",
  ]
  if (is_ohos && is_standard_system) {
    include_dirs += [ "$hilog_root/include" ]
    defines = [ "PANDA_USE_OHOS_LOG" ]
    deps += [ ":etsstdlib_install" ]
    external_deps = [
      "hilog:libhilog",
      "napi:ace_napi",
    ]
  }
  part_name = ark_part_name
  subsystem_name = "$ark_subsystem_name"
}

ohos_shared_library("ets_interop_js_napi") {
  deps = [ ":ets_interop_js_napi_static" ]
  relative_install_dir = "module"
  part_name = ark_part_name
  subsystem_name = "$ark_subsystem_name"
}
