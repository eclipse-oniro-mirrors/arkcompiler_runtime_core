/**
 * Copyright (c) 2021-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package std.core;

// NOTE: autogenerated file
//

{% for T, TT in [
    ('byte', 'Byte'),
    ('short', 'Short'),
    ('int', 'Int'),
    ('long', 'Long'),
    ('float', 'Float'),
    ('double', 'Double')]
 %}
function insertion_sort(arr: FixedArray<{{TT}}>, startIndex: int, endIndex: int, comp: (lhs: {{T}}, rhs: {{T}}) => number): void {
    for (let i = startIndex + 1; i < endIndex; i++) {
        const tmp = arr[i];
        if (comp(tmp, arr[startIndex]).toInt() < 0) {
            for (let j = i; j > startIndex; j--) {
                arr[j] = arr[j - 1]
            }
            arr[startIndex] = tmp
        } else {
            let j = i - 1;
            while (comp(tmp, arr[j]).toInt() < 0) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = tmp;
        }
    }
}

function arr_perform_merge(arr: FixedArray<{{TT}}>, startIndex: int, midIndex: int, endIndex: int, comp: (lhs: {{T}}, rhs: {{T}}) => number): void {
    const len1 = midIndex - startIndex + 1;
    const len2 = endIndex - midIndex;
    let left : FixedArray<{{TT}}> = new {{TT}}[len1];
    let right : FixedArray<{{TT}}> = new {{TT}}[len2];
    for (let i = 0; i < len1; i++) {
        left[i] = arr[startIndex + i];
    }
    for (let i = 0; i < len2; i++) {
        right[i] = arr[midIndex + 1 + i];
    }
    let i = 0;
    let j = 0;
    let k = startIndex;
    while (i < len1 && j < len2) {
        if (comp(left[i], right[j]!).toInt() <= 0) {
            arr[k] = left[i];
            i++;
        } else {
            arr[k] = right[j];
            j++;
        }
        k++;
    }
    while (i < len1) {
        arr[k] = left[i];
        k++;
        i++;
    }
    while (j < len2) {
        arr[k] = right[j];
        k++;
        j++;
    }
}

export function arr_sort_stable(arr: FixedArray<{{TT}}>, startIndex: int, endIndex: int, comp: (lhs: {{T}}, rhs: {{T}}) => number): void {
    if (endIndex <= startIndex) {
        return;
    }

    const INS_SORT_DELTA = 16
    for (let i = startIndex; i < endIndex; i += INS_SORT_DELTA ) {
        insertion_sort(arr, i, min(i + INS_SORT_DELTA , endIndex), comp)
    }
    if ((endIndex - startIndex) < INS_SORT_DELTA) {
        return;
    }
    for (let size = INS_SORT_DELTA; size < endIndex; size = 2 * size) {
        for (let left = startIndex; left < endIndex; left += 2 * size) {

            // Find ending point of left subarray and right subarray
            const mid = min(left + size - 1, endIndex - 1);
            const right = min((left + 2 * size - 1), (endIndex - 1));

            // Merge sub array arr[left.....mid] and arr[mid + 1....right]
            if (mid < right) {
                arr_perform_merge(arr, left, mid, right, comp);
            }
        }
    }
}
{%- endfor%}

{% for T in ['boolean', 'byte', 'short', 'int', 'long', 'float', 'double', 'char', 'T'] %}

 {%- set Tdef = '<T>' if T == 'T' else '' %}

{%- for arg, fwdArg, prec, sortNameSuff, initIndex in [('', '', '(%s < %s)', '', ', initIndex: int = startIndex'), (', mustPrecede: (lhs: ' + T + ', rhs: ' + T + ') => boolean', ', mustPrecede', 'mustPrecede(%s, %s)', '_subarray', '')] %}
{%- if T == 'T' and arg == '' %}
{%- continue %}
{%- elif T == 'boolean' and arg == '' %}
{%- set prec = '((%s) ? 1 : 0) < ((%s) ? 1 : 0)' %}
{%- endif %}

{%- if T not in ['boolean', 'char'] and arg == '' %}

function copyPart(dst: FixedArray<{{T}}>, counter: int, src: FixedArray<{{T}}>, start: int, end?: int) {
    if (end == undefined) {
        end = src.length
    }
    for (let i = start; i < end!; ++i) {
        dst[counter++] = src[i]
    }
}

function merge(left: FixedArray<{{T}}>, right: FixedArray<{{T}}>, cmp: (lhs: {{T}}, rhs: {{T}}) => number): FixedArray<{{T}}> {
    const result:FixedArray<{{T}}> = new {{T}}[right.length + left.length]
    let leftIndex = 0;
    let rightIndex = 0;
    let counter: int = 0

    while (leftIndex < left.length &&
        rightIndex < right.length) {
        if (cmp(left[leftIndex], right[rightIndex]) <= 0) {
            result[counter++] = left[leftIndex];
            leftIndex++;
        } else {
            result[counter++] = right[rightIndex]
            rightIndex++;
        }
    }
    copyPart(result, counter, left, leftIndex)
    copyPart(result, counter, right, rightIndex)

    return result
}

export function mergeSort(array: FixedArray<{{T}}>, cmp: (lhs: {{T}}, rhs: {{T}}) => number, begin: int = 0, end: int = 0): FixedArray<{{T}}> {
    if (end == 0) {
        end = array.length
    }
    const arrLength = end - begin
    if (arrLength <= 1) {
        return array;
    }
    const middle = Math.floor(begin + arrLength / 2).toInt()
    const leftHalf:FixedArray<{{T}}> = new {{T}}[middle]
    let counter: int = 0
    copyPart(leftHalf, counter, array, 0, middle)

    counter = 0
    const rightHalf:FixedArray<{{T}}> = new {{T}}[arrLength - middle]
    copyPart(rightHalf, counter, array, middle)

    return merge(mergeSort(leftHalf, cmp), mergeSort(rightHalf, cmp), cmp);
}
{%- endif %}

{%- if arg != '' %}
export function swap{{Tdef}}(arr: FixedArray<{{T}}>, i: int, j: int): void {
    let temp = arr[i]
    arr[i] = arr[j]
    arr[j] = temp
}
{%-endif%}

function bubbleSort{{Tdef}}(arr: FixedArray<{{T}}>, startIndex: int, endIndex: int{{arg}}): void {
    let was = true
    while (was) {
        was = false
        for (let i = startIndex; i < endIndex - 1; i++) {
            if ({{prec % ('arr[i + 1]', 'arr[i]')}}) {
                swap(arr, i, i + 1)
                was = true
            }
        }
    }
}

function insertionSort{{Tdef}}(arr: FixedArray<{{T}}>, startIndex: int, endIndex: int{{arg}}, initIndex: int = startIndex): void {
    if (startIndex != initIndex) {
        // arr[startIndex - 1] exists and is less than or equal to all elements in range
        for (let i = startIndex + 1; i < endIndex; i++) {
            const tmp = arr[i]
            let pos = i
            while ({{prec % ('tmp', 'arr[pos - 1]')}}) {
                arr[pos] = arr[pos - 1]
                pos--
            }
            arr[pos] = tmp
        }
        return
    }
    for (let i = startIndex + 1; i < endIndex; i++) {
        const tmp = arr[i]
        if ({{prec % ('tmp', 'arr[startIndex]')}}) {
            for (let j = i; j > startIndex; j--) {
                arr[j] = arr[j - 1]
            }
            arr[startIndex] = tmp
        } else {
            let pos = i
            while ({{prec % ('tmp', 'arr[pos - 1]')}}) {
                arr[pos] = arr[pos - 1]
                pos--
            }
            arr[pos] = tmp
        }
    }
}

{%- if T != "boolean" %}
function heapSortUp{{Tdef}}(arr: FixedArray<{{T}}>, idxFromStart: int, startIndex: int, heapRoot: int{{arg}}): void {
    const tmp = arr[startIndex + idxFromStart]
    while (startIndex + idxFromStart > heapRoot) {
        const p = (idxFromStart - 1) / 2
        if (!{{prec % ('arr[startIndex + p]', 'tmp')}}) {
            break
        }
        arr[startIndex + idxFromStart] = arr[startIndex + p]
        idxFromStart = p
    }
    arr[startIndex + idxFromStart] = tmp
}

// Build max heap with root in startIndex given its children are roots of valid heaps
function heapSortDown{{Tdef}}(arr: FixedArray<{{T}}>, idxFromStart: int, startIndex: int, endIndex: int{{arg}}): void {
    let heapRoot = startIndex + idxFromStart
    let arrIndex = heapRoot
    let childIndex = startIndex + idxFromStart * 2 + 1
    const tmp = arr[arrIndex]
    // Walk heap to bottom and pull max child up on each level
    while (childIndex + 1 < endIndex) {
        if ({{prec % ('arr[childIndex]', 'arr[childIndex + 1]')}}) {
            childIndex++
        }
        arr[arrIndex] = arr[childIndex]
        arrIndex = childIndex
        childIndex = childIndex * 2 - startIndex + 1
    }
    if (childIndex < endIndex) {
        arr[arrIndex] = arr[childIndex]
        arrIndex = childIndex
    }
    arr[arrIndex] = tmp
    // Now heap is valid in all positions but arrIndex
    heapSortUp(arr, arrIndex - startIndex, startIndex, heapRoot{{fwdArg}})
}

export function heapSort{{Tdef}}(arr: FixedArray<{{T}}>, startIndex: int, endIndex: int{{arg}}): void {
    let len = endIndex - startIndex
    for (let i = len / 2 - 1; i >= 0; i--) {
        heapSortDown(arr, i, startIndex, endIndex{{fwdArg}})
    }

    for (let i = endIndex - 1; i > startIndex; i--) {
        // move max element to the end of range
        swap(arr, i, startIndex)
        heapSortDown(arr, 0, startIndex, i{{fwdArg}})
    }
}

// Put median of three array elements to arr[index1]
function median3{{Tdef}}(arr: FixedArray<{{T}}>, index1: int, index2: int, index3: int{{arg}}): void {
    let swap_idx = index2
    if ({{prec % ('arr[index1]', 'arr[index2]')}}) {
        if ({{prec % ('arr[index3]', 'arr[index1]')}}) {
            return
        }
        if ({{prec % ('arr[index3]', 'arr[index2]')}}) {
            swap_idx = index3
        }
    } else {
        if (!{{prec % ('arr[index3]', 'arr[index1]')}}) {
            return
        }
        if ({{prec % ('arr[index2]', 'arr[index3]')}}) {
            swap_idx = index3
        }
    }
    swap(arr, index1, swap_idx)
}

// Split range [startIndex, endIndex) by pivot arr[startIndex] and return pivot position
// Elements equal to pivot go to the right
function quickSortSplit{{Tdef}}(arr: FixedArray<{{T}}>, startIndex: int, endIndex: int{{arg}}): int {
    const pivot = arr[startIndex]
    let i = startIndex + 1
    let j = endIndex - 1
    // No bounds check because pivot is median of three elements
    while ({{prec % ('arr[i]', 'pivot')}}) {
        i++
    }
    if (i == startIndex + 1) {
        while (i < j && !{{prec % ('arr[j]', 'pivot')}}) {
            j--
        }
    } else {
        while (!{{prec % ('arr[j]', 'pivot')}}) {
            j--
        }
    }
    while (i < j) {
        // Here !{{prec % ('arr[i]', 'pivot')}} and {{prec % ('arr[j]', 'pivot')}} holds
        let tmp = arr[i]
        arr[i] = arr[j]
        arr[j] = tmp
        while ({{prec % ('arr[++i]', 'pivot')}}) {}
        while (!{{prec % ('arr[--j]', 'pivot')}}) {}
    }
    let pivotIndex = i - 1
    arr[startIndex] = arr[pivotIndex]
    arr[pivotIndex] = pivot

    return pivotIndex
}

// Split range [startIndex, endIndex) by pivot arr[startIndex] and return pivot position
// Elements equal to pivot go to the left
function quickSortSplitLeft{{Tdef}}(arr: FixedArray<{{T}}>, startIndex: int, endIndex: int{{arg}}): int {
    const pivot = arr[startIndex]
    let i = startIndex + 1
    let j = endIndex - 1
    // No bounds check because pivot is median of three elements
    while ({{prec % ('pivot', 'arr[j]')}}) {
        j--
    }
    if (j + 1 == endIndex) {
        while (i < j && !{{prec % ('pivot', 'arr[i]')}}) {
            i++
        }
    } else {
        while (!{{prec % ('pivot', 'arr[i]')}}) {
            i++
        }
    }
    while (i < j) {
        // Here {{prec % ('pivot', 'arr[i]')}} and !{{prec % ('pivot', 'arr[j]')}} holds
        let tmp = arr[i]
        arr[i] = arr[j]
        arr[j] = tmp
        while (!{{prec % ('pivot', 'arr[++i]')}}) {}
        while ({{prec % ('pivot', 'arr[--j]')}}) {}
    }
    arr[startIndex] = arr[j]
    arr[j] = pivot

    return j
}

{% for quickUpTo in [3, 40] %}
function quickSortImpl{{quickUpTo}}{{Tdef}}(arr: FixedArray<{{T}}>, startIndex: int, endIndex: int, maxDepth: int{{arg}}{{initIndex}}): void {
    {%- set fwdInitIndex = initIndex.split(':')[0] %}
    while (endIndex - startIndex > {{quickUpTo}}) {
        if (--maxDepth == 0) {
            heapSort(arr, startIndex, endIndex{{fwdArg}})
            return
        }

        {%- if initIndex != '' %}
        // Here we assume that current interval is not the most left in the sorted range
        if (startIndex != initIndex && arr[startIndex - 1] >= arr[startIndex]) {
            // We call quickSortSplitLeft here to move all elements equal to pivot (and arr[startIndex - 1]) to the left part;
            // after that only the right part needs to be sorted
            // If we always used quickSortSplitLeft instead of quickSortSplit, this would not work well for array
            // with many occurencies of the smallest element
            startIndex = quickSortSplitLeft(arr, startIndex, endIndex) + 1
            continue
        }
        {%- endif %}

        median3(arr, startIndex, endIndex - 1, (startIndex + endIndex) / 2{{fwdArg}})
        let p = quickSortSplit(arr, startIndex, endIndex{{fwdArg}})
        // make a call for the smaller part of array and continue processing the larger part in the loop
        if (p - startIndex < endIndex - p) {
            quickSortImpl{{quickUpTo}}(arr, startIndex, p, maxDepth{{fwdArg}}{{fwdInitIndex}})
            startIndex = p + 1
        } else {
            quickSortImpl{{quickUpTo}}(arr, p + 1, endIndex, maxDepth{{fwdArg}}{{fwdInitIndex}})
            endIndex = p
        }
    }
    insertionSort(arr, startIndex, endIndex{{fwdArg}}{{fwdInitIndex}})
}
{%- endfor %}

function quickSort{{Tdef}}(arr: FixedArray<{{T}}>, startIndex: int, endIndex: int{{arg}}): void {
    let size = endIndex - startIndex
    if (size <= 1) {
        return
    }
    // find log of length to fall back into determenistic O(n logn) sort
    let bits = 32
    for (let i = 2; i < 31; i++) {
        if ((size >> i) == 0) {
            bits = i
            break
        }
    }
    quickSortImpl40(arr, startIndex, endIndex, bits * 3{{fwdArg}})
}
{%- endif %}

/**
 * sorts arr in-place
 *
 * @param arr an array to sort
 *
 * @param startIndex an index to start sorting with, inclusive
 *
 * @param endIndex an index to end sorting, exclusive
 *
 * @example: sort array arr
 * ```
 * sort(arr, 0, arr.length)
 * ```
 */
export function sort{{sortNameSuff}}{{Tdef}}(arr: FixedArray<{{T}}>, startIndex: int, endIndex: int{{arg}}): void {
    if (!checkRange(arr.length, startIndex, endIndex)) {
        throw new ArrayIndexOutOfBoundsError("sort: bounds verification failed")
    }

    {% if T == "boolean" -%}
        {%- if arg == '' %}
    countSortBools(arr, startIndex, endIndex)
        {%- else %}
    if ({{prec % ('false', 'true')}}) {
        countSortBools(arr, startIndex, endIndex)
    } else {
        countSortBoolsInv(arr, startIndex, endIndex)
    }
        {%- endif %}
    {%- else %}
    {% if T == "byte" and arg == '' %}
    if (endIndex - startIndex > 1024) {
        countSort(arr, startIndex, endIndex)
    }
    {%- endif %}
    quickSort(arr, startIndex, endIndex{{fwdArg}});
    {%- endif %}
}

{% endfor %}

/**
 * sorts arr in-place
 *
 * @param arr an array to sort
 */
export function sort_subarray{{Tdef}}(arr: FixedArray<{{T}}>, mustPrecede: (lhs: {{T}}, rhs: {{T}}) => boolean): void {
    sort_subarray(arr, 0, arr.length, mustPrecede);
}

export function sort_subarray{{Tdef}}(arr: FixedArray<{{T}}>, startIndex: int, mustPrecede: (lhs: {{T}}, rhs: {{T}}) => boolean): void {
    sort_subarray(arr, startIndex, arr.length, mustPrecede)
}

{% if T != "T" -%}

{%- if T == 'byte' %}
function countSort(arr: FixedArray<byte>, startIndex: int, endIndex: int): void {
    const cnts : FixedArray<int> = new int[256]
    for (let i = startIndex; i < endIndex; i++) {
        cnts[arr[i] + 128]++
    }
    let idx = 0
    for (let i = 0; i < 256; i++) {
        for (let j = 0; j < cnts[i]; j++) {
            arr[startIndex + idx++] = (i - 128).toByte()
        }
    }
}
{%- elif T == 'boolean' %}
function countSortTruthCnt(arr: FixedArray<boolean>, startIndex: int, endIndex: int): int {
    let truthCnt = 0
    for (let i = startIndex; i < endIndex; i++) {
        if (arr[i]) {
            truthCnt++
        }
    }
    return truthCnt
}

function countSortBools(arr: FixedArray<boolean>, startIndex: int, endIndex: int): void {
    const truthCnt = countSortTruthCnt(arr, startIndex, endIndex)
    for (let i = startIndex; i < endIndex - truthCnt; i++) {
            arr[i] = false
        }
    for (let i = 0; i < truthCnt; i++) {
        arr[endIndex - truthCnt + i] = true
    }
}
function countSortBoolsInv(arr: FixedArray<boolean>, startIndex: int, endIndex: int): void {
    const truthCnt = countSortTruthCnt(arr, startIndex, endIndex)
    for (let i = 0; i < truthCnt; i++) {
        arr[startIndex + i] = true
    }
    for (let i = startIndex + truthCnt; i < endIndex; i++) {
        arr[i] = false
    }
}
{%- endif %}

// ======== tests section ========

/** note: used for tests, {@link test_sortAllOn} */
class test_SortData{{T}} {
    name: string = ''
    arr: FixedArray<{{T}}> = []

    constructor(name: string, arr: FixedArray<{{T}}>) {
        this.name = name
        this.arr = arr
    }
}

/** note: used for tests, {@link test_sortAllOn} */
function test_sortCopy(arr: FixedArray<{{T}}>): FixedArray<{{T}}> {
    let c : FixedArray<{{T}}> = new {{T}}[arr.length]
    for (let i = 0; i < arr.length; i++) {
        c[i] = arr[i]
    }
    return c
}

/** note: used for tests, {@link test_sortAllOn} */
function test_sortAllOnCmpFwd_{{T}}(l: {{T}}, r: {{T}}): boolean {
{%- set mapMPArg = '%s' if T != 'boolean' else '((%s) ? 1 : 0)' %}
    return {{mapMPArg % 'l'}} < {{mapMPArg % 'r'}}
}

/** note: used for tests, {@link test_sortAllOn} */
function test_sortAllOnCmpInv_{{T}}(l: {{T}}, r: {{T}}): boolean {
    return {{mapMPArg % 'r'}} < {{mapMPArg % 'l'}}
}

/** note: used for tests, {@link test_sortAllOn} */
function test_printArr(arr: FixedArray<{{T}}>, startIndex: int, endIndex: int) {
    for (let i = startIndex; i < endIndex; i++) {
        console.print(arr[i] + ' ')
    }
    console.println('')
}

/**
 * Function used to test sorting in standard library tests.
 * There is only one exported function: `sort`, but for testing
 * we need access to all sub sorts that are used. Hence this part of "tests"
 * is located here. All related entities are prefixed whith `test_` to stand out
 */
export function test_sortAllOn(arr: FixedArray<{{T}}>) {
    {%- for name, arg in [('', ''), ('_subarray', ', test_sortAllOnCmpFwd_' + T), ('_subarray', ', test_sortAllOnCmpInv_' + T)] %}
    // block for comparator `{{arg[3:]}}`
    if (true) {
        const sorts = new Array<test_SortData{{T}}>()
        const bubbled = test_sortCopy(arr)
        bubbleSort(bubbled, 0, bubbled.length{{arg}})
        sorts.push(new test_SortData{{T}}("bubble", bubbled))

        const insertion = test_sortCopy(arr)
        insertionSort(insertion, 0, insertion.length{{arg}})
        sorts.push(new test_SortData{{T}}("insertion", insertion))

        {%- if T == 'byte' and arg == '' %}
        const cnt = test_sortCopy(arr)
        countSort(cnt, 0, cnt.length)
        sorts.push(new test_SortData{{T}}("cnt()", cnt))
        {%- endif %}

        {% if T == 'boolean' %}
        const bcnt = test_sortCopy(arr)
            {%- if arg != ', test_sortAllOnCmpInv_' + T %}
        countSortBools(bcnt, 0, bcnt.length)
            {%- else %}
        countSortBoolsInv(bcnt, 0, bcnt.length)
            {%- endif %}
        sorts.push(new test_SortData{{T}}("bools cnt()", bcnt))
        {%- else %}
        const heaped = test_sortCopy(arr)
        heapSort(heaped, 0, heaped.length{{arg}})
        sorts.push(new test_SortData{{T}}("heap", heaped))

        const quicked = test_sortCopy(arr)
        quickSortImpl3(quicked, 0, quicked.length, quicked.length{{arg}})
        sorts.push(new test_SortData{{T}}("quick", quicked))

        const quickedInsertion = test_sortCopy(arr)
        quickSortImpl40(quickedInsertion, 0, quickedInsertion.length, quickedInsertion.length{{arg}})
        sorts.push(new test_SortData{{T}}("quick with insertion", quickedInsertion))
        {%- endif %}

        const just = test_sortCopy(arr)
        sort{{name}}(just{{arg}})
        sorts.push(new test_SortData{{T}}("sort()", just))

        let sort0 = sorts.at(0)!
        for (let s = 1; s < sorts.length; s++) {
            let sortS = sorts.at(s)!
            for (let i = 0; i < arr.length; i++) {
                if (sort0.arr[i] != sortS.arr[i]) {
                    console.println(sort0.name + ': ')
                    test_printArr(sort0.arr, 0, arr.length)
                    console.println(sortS.name + ': ')
                    test_printArr(sortS.arr, 0, arr.length)
                    throw new Error("sorts {{arg[3:]}} are not equal: " + sort0.name + ' ' + sortS.name + ' for {{T}}')
                }
            }
        }
    }
    {%- endfor %}
}
// ======== end of tests section ========
{% endif %}

{%- endfor %}
