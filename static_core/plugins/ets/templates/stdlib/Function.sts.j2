/**
 * Copyright (c) 2021-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Autogenerated file. DO NOT EDIT
package std.core;

{% set maxarity=16 %}
{% macro typeParamsList(narg, avar, rvar) %}<{% for i in range(narg) %}{{avar}}P{{i + 1}}, {% endfor %}{{rvar}}R>{% endmacro %}
{% macro typeParamsDeclList(narg) %}{{ narg }}{{ typeParamsList(narg, "in ", "out ") }}{% endmacro %}
{% macro erasedTypeArgsList(narg) %}<{% for i in range(narg) %}__T, {% endfor %}__T>{% endmacro %}

{% macro signature(narg) %}({% for i in range(narg) %}p{{i + 1}}: P{{i + 1}}{% if not loop.last %}, {% endif %}{% endfor %}): R{% endmacro %}
{% macro erasedSignature(narg) %}({% for i in range(narg) %}p{{i + 1}}: __T{% if not loop.last %}, {% endif %}{% endfor %}): __T{% endmacro %}
{% macro applyArgs(narg) %}({% for i in range(narg) %}p{{i + 1}}{% if not loop.last %}, {% endif %}{% endfor %}){% endmacro %}

type __T = object | null | undefined;

export interface Function<R> {}

export interface ThrowingFunctionN<R> extends Function<R> {
    invoke0(...p: __T[]): R throws;
}

export interface RethrowingFunctionN<R> extends ThrowingFunctionN<R> {
    invoke0(...p: __T[]): R rethrows;
}

export interface FunctionN<R> extends RethrowingFunctionN<R> {
    invoke0(...p: __T[]): R;
}

export interface __Function extends Function<__T> {}
export interface __ThrowingFunctionN extends ThrowingFunctionN<__T> {}
export interface __RethrowingFunctionN extends RethrowingFunctionN<__T> {}
export interface __FunctionN extends RethrowingFunctionN<__T> {}

export abstract class ThrowingLambdaN implements __ThrowingFunctionN {}
export abstract class RethrowingLambdaN implements __RethrowingFunctionN {}
export abstract class LambdaN implements __RethrowingFunctionN {}

{% macro defineChainingHelper(name, base, narg, maxarity) -%}
export interface __{{name}}{{narg}}
{%- if narg < maxarity %} extends {{name}}{{narg + 1}}{{erasedTypeArgsList(narg + 1)}}{% endif %}
{%- endmacro %}

{% macro defineLambda(lambda, name, base, narg, maxarity) -%}
export abstract class {{lambda}}{{narg}} implements
{%- for n in range(narg, narg + 1) %} __{{name}}{{n}}{% if not loop.last %},{% endif %}{% endfor %}
{%- endmacro %}

{% macro defineAritySignatures(from, to, tm) -%}
    abstract invoke0{{ erasedSignature(from) }} {{tm}};
{%- for narg in range(from + 1, to + 1) %}
    final invoke0{{ erasedSignature(narg) }} {{tm}} { return this.invoke0{{applyArgs(from)}} }
{%- endfor -%}
{% endmacro %}

{% for narg in range(maxarity + 1) %}
export interface ThrowingFunction{{ typeParamsDeclList(narg) }}
    extends Function<R>,
    __ThrowingFunction{{narg}}
    {
    invoke0{{ signature(narg) }} throws;
}
export interface RethrowingFunction{{ typeParamsDeclList(narg) }}
    extends ThrowingFunction{{narg}}{{ typeParamsList(narg) }},
    __RethrowingFunction{{narg}}
    {
    invoke0{{ signature(narg) }}{% if narg > 0 %} rethrows{% endif %};
}
export interface Function{{ typeParamsDeclList(narg) }}
    extends RethrowingFunction{{narg}}{{ typeParamsList(narg) }},
    __Function{{narg}}
    {
    invoke0{{ signature(narg) }};
}
{{ defineChainingHelper("ThrowingFunction", "", narg, maxarity) }} {}
{{ defineChainingHelper("RethrowingFunction", "ThrowingFunction", narg, maxarity) }} {}
{{ defineChainingHelper("Function", "RethrowingFunction", narg, maxarity) }} {}
{{ defineLambda("ThrowingLambda", "ThrowingFunction", "", narg, maxarity) }} {
    {{ defineAritySignatures(narg, maxarity, "throws") }}
}
{{ defineLambda("RethrowingLambda", "RethrowingFunction", "ThrowingFunction", narg, maxarity) }} {
    {{ defineAritySignatures(narg, maxarity, "rethrows") }}
}
{{ defineLambda("Lambda", "Function", "RethrowingFunction", narg, maxarity) }} {
    {{ defineAritySignatures(narg, maxarity, "") }}
}
{% endfor %}
