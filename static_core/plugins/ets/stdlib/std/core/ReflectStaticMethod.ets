/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package std.core;

export namespace reflect {

/**
 * Represents static method of class
 */
export final class StaticMethod extends Method {
    private constructor() { throw new Error("StaticMethod constructor called") }

    public isAsync(): boolean {
        return (this.attributes & Attributes.ASYNC) != 0
    }

    public isGetter(): boolean {
        return (this.attributes & Attributes.GETTER) != 0
    }

    public isSetter(): boolean {
        return (this.attributes & Attributes.SETTER) != 0
    }

    public equals(other: StaticMethod): boolean {
        return this.methodPtr == other.methodPtr
    }

    /**
     * Invokes a method
     *
     * @param args method parameters
     *
     * @returns method return value. `undefined` for `void`.
     *
     * @throws OutofMemoryError if there is no memory to allocate return value.
     *
     * @throws TypeError if there is mismatch in arguments number or types
     */
    public invoke(args?: FixedArray<Any>): Any {
        return super.invoke(undefined, args)
    }
}

} // namespace reflect
