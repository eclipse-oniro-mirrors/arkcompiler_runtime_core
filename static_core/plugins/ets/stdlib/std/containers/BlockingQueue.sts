/**
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package std.containers;

/**
 * BlockingQueue implementation
 */
export final class BlockingQueue<T> {

    constructor() {
        // Array, where all BlockingQueue elements will be located
        this.array = new Array<T>(BlockingQueue.initSize);
        this.mutex = BlockingQueue.initMutex();
        this.event = BlockingQueue.initEvent();
    }

    // Inserts element at the end.
    push(el: T) {
        BlockingQueue.lock(this.mutex);
        if (this.curTailIdx == this.array.length) {
            let curQueueSize: int = this.curTailIdx - this.curHeadIdx;
            let newArr = new Array<T>((this.array.length * 2) as int);
            for (let i: int = 0; i < curQueueSize; ++i) {
                newArr[i] = this.array[this.curHeadIdx++];
            }
            this.array = newArr;
            this.curHeadIdx = 0;
            this.curTailIdx = curQueueSize;
        }
        this.array[this.curTailIdx++] = el;
        BlockingQueue.unblockWaiters(this.mutex, this.event);
    }

    // Removes and returns the first element in a BlockingQueue.
    // If the BlockingQueue is empty then await_ method is called.
    pop(): T {
        BlockingQueue.lock(this.mutex);
        while (this.curHeadIdx == this.curTailIdx) {
            // Currently, the queue is empty. Need to await.
            // This method is used for waiting until the BlockingQueue
            // has at least one element.
            // For more information please check this method's implementation.
            BlockingQueue.await_(this.mutex, this.event);
        }
        try {
            let curQueueSize: int = this.curTailIdx - this.curHeadIdx;

            // If number of elements in a BlockingQueue is too small
            // compared to the BlockingQueue capacity, it is better to reduce capacity.
            if (curQueueSize * BlockingQueue.sizeReductionCheckCoef < this.array.length &&
                this.array.length >= BlockingQueue.minSizeToReduce) {

                let newArr = new Array<T>((this.array.length / 2) as int);
                for (let i: int = 0; i < curQueueSize; ++i) {
                    newArr[i] = this.array[this.curHeadIdx++];
                }
                this.array = newArr;
                this.curHeadIdx = 0;
                this.curTailIdx = curQueueSize;
            }

            // If there is a lot of free space at the beginning of an array in a BlockingQueue,
            // it is better to copy elements to the beginning - it saves space for new objects.
            if (this.curHeadIdx * 2 > this.array.length) {
                assert curQueueSize < this.array.length;
                for (let i: int = 0; i < curQueueSize; ++i) {
                    this.array[i] = this.array[this.curHeadIdx++];
                }
                this.curHeadIdx = 0;
                this.curTailIdx = curQueueSize;
            }
            return this.array[this.curHeadIdx++];
        } finally {
            BlockingQueue.unlock(this.mutex);
        }
    }

    // Returns the first element in a BlockingQueue.
    // If the BlockingQueue is empty then await_ method is called.
    front(): T {
        BlockingQueue.lock(this.mutex);
        while (this.curHeadIdx == this.curTailIdx) {
            // Currently, the queue is empty. Need to await.
            // This method is used for waiting until the BlockingQueue
            // has at least one element.
            // For more information please check this method's implementation.
            BlockingQueue.await_(this.mutex, this.event);
        }
        try {
            return this.array[this.curHeadIdx];
        } finally {
            BlockingQueue.unlock(this.mutex);
        }
    }

    // Returns the last element in a BlockingQueue.
    // If the BlockingQueue is empty then await_ method is called.
    back(): T {
        BlockingQueue.lock(this.mutex);
        while (this.curHeadIdx == this.curTailIdx) {
            // Currently, the queue is empty. Need to await.
            // This method is used for waiting until the BlockingQueue
            // has at least one element.
            // For more information please check this method's implementation.
            BlockingQueue.await_(this.mutex, this.event);
        }
        try {
            return this.array[this.curTailIdx - 1];
        } finally {
            BlockingQueue.unlock(this.mutex);
        }
    }

    // Returns size of a BlockingQueue.
    size(): int {
        BlockingQueue.lock(this.mutex);
        try {
            return this.curTailIdx - this.curHeadIdx;
        } finally {
            BlockingQueue.unlock(this.mutex);
        }
    }

    // Returns true if a BlockingQueue has no elements.
    empty(): boolean {
        return this.size() == 0;
    }

    // Frees internal memory, used by BlockingQueue instance.
    // After calling this method, current BlockingQueue instance cannot be used anymore.
    // This method MUST be called after finishing working with the BlockingQueue.
    cleanup() {
        BlockingQueue.deleteMutex(this.mutex);
        BlockingQueue.deleteEvent(this.event);
    }

    private array: Array<T>;
    private curHeadIdx: int = 0;                    // Index of the first element in a BlockingQueue
    private curTailIdx: int = 0;                    // Index of the last element in a BlockingQueue
    private mutex: long;                            // Mutex runtime pointer
    private event: long;                            // Event runtime pointer
    private static initSize: int = 8;               // Initial size of a BlockingQueue
    private static minSizeToReduce: int = 16;       // Minimal size for capacity decrease (see pop())
    private static sizeReductionCheckCoef: int = 3; // Coeff used for BlockingQueue fullness estimation

    private static native initMutex(): long;                              // Mutex creation
    private static native initEvent(): long;                              // Event creation
    private static native deleteMutex(mutex: long): void;                 // Mutex deletion
    private static native deleteEvent(event: long): void;                 // Event deletion
    private static native lock(mutex: long): void;                        // Mutex lock
    private static native unlock(mutex: long): void;                      // Mutex unlock
    private static native await_(mutex: long, event: long): void;         // Called in case BlockingQueue is empty
    private static native unblockWaiters(mutex: long, event: long): void; // Called to wake up all waiters
}
