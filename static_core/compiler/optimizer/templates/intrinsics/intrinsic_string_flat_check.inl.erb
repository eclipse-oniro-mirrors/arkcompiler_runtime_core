/**
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace ark::compiler {
// NOLINTNEXTLINE(misc-definitions-in-headers, readability-function-size)
inline uint32_t GetStringFlatCheckArgMask([[maybe_unused]] RuntimeInterface::IntrinsicId id) {
    switch (id) {
% Compiler::intrinsics.select { |intrinsic| ((intrinsic.has_impl? and not intrinsic.impl_signature.strings.empty?) or (intrinsic.respond_to?(:this_string) and intrinsic.this_string)) and intrinsic.respond_to?(:require_flat_check) and intrinsic.require_flat_check }.each do |intrinsic|
    case ark::compiler::RuntimeInterface::IntrinsicId::<%= intrinsic.entrypoint_name %>: {
        const uint32_t MASK = <%= intrinsic.impl_signature.strings.map { |i| 1 << i }.reduce(0) {|acc, n| acc | n} %>;
% if intrinsic.respond_to?(:static) and not intrinsic.static
        static_assert(sizeof(uint32_t) * 8 > <%= intrinsic.impl_signature.strings.max || 0 %> + 1);
% if intrinsic.respond_to?(:this_string) and intrinsic.this_string
        return (MASK << 1) | 1;
% else
        return MASK << 1;
% end
% else
        static_assert(sizeof(uint32_t) * 8 > <%= intrinsic.impl_signature.strings.max %>);
        return MASK;
% end
    }
% end
    default:
        return 0;
    }
}
}