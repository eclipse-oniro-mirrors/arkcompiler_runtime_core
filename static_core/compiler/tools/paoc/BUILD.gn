# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//arkcompiler/runtime_core/static_core/ark_config.gni")
if (ark_standalone_build) {
  import("$build_root/ark.gni")
} else {
  import("//build/ohos.gni")
}

config("arkaot_public_config") {
  include_dirs = [
    "$target_gen_dir/generated",
    "$ark_root/compiler/aot",
    "$ark_root/compiler",
    get_label_info(
        "$ark_root/cross_values:cross_values_getters_generate(${default_toolchain})",
        "target_gen_dir"),
  ]
  if (is_llvm_aot) {
    include_dirs += [ "$ark_root/libllvmbackend" ]
  }
}

ark_gen_file("arkcompiler_options_h") {
  template_file = "$ark_root/templates/options/options.h.erb"
  data = [ "paoc.yaml" ]
  api = [ "$ark_root/templates/common.rb" ]
  output_file = "$target_gen_dir/generated/paoc_options.h"
}

_ark_aot_sources = [ "paoc.cpp" ]

_ark_aot_configs = [
  ":arkaot_public_config",
  "$ark_root:ark_config",
  "$ark_root/runtime:arkruntime_public_config",
  "$ark_root/libarkbase:arkbase_public_config",
  "$ark_root/libarkfile:arkfile_public_config",
  "$ark_root/compiler:arkcompiler_public_config",
  "$ark_root/compiler/aot/aot_builder:aotbuilder_public_config",
]

_ark_aot_deps = [
  ":arkcompiler_options_h",
  "$ark_root/compiler/aot:libarkaotmanager",
  "$ark_root/compiler/aot/aot_builder:aotbuilder",
  "$ark_root/cross_values:cross_values_getters_generate(${default_toolchain})",
  "$ark_root/libarkbase:libarktsbase",
  "$ark_root/libarkfile:libarktsfile",
  "$ark_root/platforms/target_defaults:arktarget_options",
]

if (enable_codegen) {
  _ark_aot_configs += [ "$ark_root/compiler/optimizer/code_generator:arkencoder_config" ]
  _ark_aot_deps += [ "$ark_root/compiler/optimizer/code_generator:libarkencoder" ]
}

if (is_llvm_aot) {
  _ark_aot_configs += [ "$ark_root/libllvmbackend:libllvmbackend_public_config" ]
  _ark_aot_sources += [ "paoc_llvm.cpp" ]
  _ark_aot_deps += [ "$ark_root/libllvmbackend:libllvmbackend" ]
}

_ark_aot_external_deps = [ sdk_libc_secshared_dep ]

ohos_executable("ark_aot") {
  sources = _ark_aot_sources

  configs = _ark_aot_configs

  deps = _ark_aot_deps
  deps += [
    "$ark_root/runtime:libarkruntime",
    "$ark_root/compiler:libarktscompiler",
  ]

  external_deps = _ark_aot_external_deps

  install_enable = true
  part_name = ark_part_name
  subsystem_name = "$ark_subsystem_name"
}

# OHOS build Host target
ohos_executable("ark_aot_host") {
  sources = _ark_aot_sources

  configs = _ark_aot_configs

  deps = _ark_aot_deps
  deps += [
    "$ark_root/runtime:libarkruntime_host",
    "$ark_root/compiler:libarktscompiler_host",
  ]

  external_deps = _ark_aot_external_deps

  install_enable = true
  part_name = ark_part_name
  subsystem_name = "$ark_subsystem_name"
}

# Copy host AOT configuration file to output directory
copy("host_aot_config") {
  sources = [ "host_aot_config.json" ]
  outputs = [ "$root_build_dir/gen/arkcompiler/runtime_core/compiler/{{source_file_part}}" ]
}

group("ark_aot_host_tool") {
  deps = [
    ":ark_aot_host(${host_toolchain})",
    ":host_aot_config",
  ]
}