/*
 * Copyright (c) 2021-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "assembly-ins.h"
#include "mangling.h"

namespace ark::pandasm {

static panda_file::BaseMethodItem *GetMethodForHybridOpcode(const std::string &id,
    const std::unordered_map<std::string, panda_file::BaseMethodItem *> &firstSearchTable,
    const std::unordered_map<std::string, panda_file::BaseMethodItem *> &secondSearchTable)
{
    auto it = firstSearchTable.find(id);
    if (it == firstSearchTable.end()) {
        auto it2 = secondSearchTable.find(id);
        if (it2 == secondSearchTable.end()) {
            return nullptr;
        }
        return it2->second;
    }
    return it->second;
}

// NOLINTBEGIN(readability-container-size-empty)

// NOLINTNEXTLINE(misc-definitions-in-headers,readability-function-size)
bool Ins::Emit(BytecodeEmitter& emitter, panda_file::MethodItem *method,
    const std::unordered_map<std::string, panda_file::BaseMethodItem *> &methods,
    const std::unordered_map<std::string, panda_file::BaseMethodItem *> &staticMethods,
    const std::unordered_map<std::string, panda_file::BaseFieldItem *> &fields,
    const std::unordered_map<std::string, panda_file::BaseFieldItem *> &staticFields,
    const std::unordered_map<std::string, panda_file::BaseClassItem *> &classes,
    const std::unordered_map<std::string_view, panda_file::StringItem *> &strings,
    const std::unordered_map<std::string, panda_file::LiteralArrayItem *> &literalarrays,
    const std::unordered_map<std::string_view, ark::Label>& labels) const {
    if (!IsValidToEmit()) {
        std::cerr << "Invalid instruction: " << ToString() << std::endl;
        LOG(FATAL, ASSEMBLER);
    }
    switch(opcode) {
% instruction_hash = Panda::instructions.map { |i| [i.mnemonic, i] }.to_h
%
% Panda::instructions.group_by(&:mnemonic).each_pair do |mn, group|
% insn = group[index_of_max(group.map(&:format).map(&:size))]
%
% def type(insn)
%   src_acc_ops = insn.acc_and_operands.select(&:src?)
%   src_acc_ops.size != 0 ? src_acc_ops.first.type : 'none'
% end
%
% def op_size(insn)
%   type(insn)[1..-1].to_i
% end
%
% def operands(insn, regs = "regs")
%   ops = []
%   nr = 0
%   ni = 0
%   insn.operands.each do |op|
%     if op.reg?
%       ops << "GetReg(#{nr})"
%       nr += 1
%     elsif op.imm?
%       if insn.jump?
%         ops << 'labels.find(GetID(0))->second'
%       else
%         from_type, to_type = op_size(insn) == 64 ? ['double', 'int64_t'] : ['float', 'int32_t']
%         if insn.float?
%           ops << bit_cast("GetImm(#{ni})", to_type, from_type)
%         elsif type(insn).start_with? 'u' # can hold both float and integer literals
%           ops << "std::holds_alternative<double>(GetImm(#{ni})) ? #{bit_cast("GetImm(#{ni})", to_type, from_type)} : GetImm<int64_t>(#{ni})"
%         else
%           ops << "GetImm<int64_t>(#{ni})"
%         end
%       end
%       ni += 1
%     elsif op.id?
%       if insn.properties.include?('method_id')
%         if insn.properties.include?('call_virt') && ((insn.mnemonic.include? '.virt') || (insn.mnemonic.include? '.polymorphic'))
%           ops << 'methods.find(GetID(0))->second->GetIndex(method)'
%         else
%           ops << 'foundMethod->GetIndex(method)'
%         end
%       elsif insn.properties.include?('static_method_id')
%         ops << 'foundMethod->GetIndex(method)'
%       elsif insn.properties.include?('field_id')
%         ops << 'fields.find(GetID(0))->second->GetIndex(method)'
%       elsif insn.properties.include?('static_field_id')
%         ops << 'staticFields.find(GetID(0))->second->GetIndex(method)'
%       elsif insn.properties.include?('type_id')
%         ops << 'classes.find(GetID(0))->second->GetIndex(method)'
%       elsif insn.properties.include?('string_id')
%         ops << 'strings.find(GetID(0))->second->GetOffset()'
%       elsif insn.properties.include?('literalarray_id')
%         ops << 'static_cast<uint32_t>(literalarrays.find(GetID(0))->second->GetIndex())'
%       else
%         raise "Unexpected ID type"
%       end
%     else
%       raise "Unexpected operand type"
%     end
%   end
%   ops << "profileId" if insn.profiled?
%   if insn.properties.include?('id_shift')
%     ops << ops.shift
%   end
%   ops
% end
    case Opcode::<%= insn.asm_token %>: {
% if insn.properties.include?('method_id')
%   if insn.properties.include?('call_virt') && ((insn.mnemonic.include? '.virt') || (insn.mnemonic.include? '.polymorphic'))
        if (IDEmpty() || (methods.find(GetID(0)) == methods.cend())) {
            return false;
        }
%   else
        if (IDEmpty()) {
            return false;
        }
        auto *foundMethod = GetMethodForHybridOpcode(GetID(0), methods, staticMethods);
        if (foundMethod == nullptr) {
            return false;
        }
%   end
% elsif insn.properties.include?('static_method_id')
        if (IDEmpty()) {
            return false;
        }
        auto *foundMethod = GetMethodForHybridOpcode(GetID(0), staticMethods, methods);
        if (foundMethod == nullptr) {
            return false;
        }
% elsif insn.properties.include?('field_id')
        if (IDEmpty() || (fields.find(GetID(0)) == fields.cend())) {
            return false;
        }
% elsif insn.properties.include?('static_field_id')
        if (IDEmpty() || (staticFields.find(GetID(0)) == staticFields.cend())) {
            return false;
        }
% elsif insn.properties.include?('type_id')
        if (IDEmpty() || (classes.find(GetID(0)) == classes.cend())) {
            return false;
        }
% elsif insn.properties.include?('string_id')
        if (IDEmpty() || (strings.find(GetID(0)) == strings.cend())) {
            return false;
        }
% elsif insn.jump?
        if (IDEmpty() || (labels.find(GetID(0)) == labels.cend())) {
            return false;
        }
% end
% regs_num = 0
% imms_num = 0
% insn.operands.each do |op|
%   if op.reg?
%     regs_num += 1
%   elsif op.imm?
%     imms_num += 1
%   end
% end
% if insn.properties.include?('short_long_range') && !insn.range?
%   if imms_num > 0
        if (ImmSize() < <%= imms_num %>) {
            return false;
        }
%   end
% elsif insn.jump?
%   if regs_num > 0
        if (RegSize() < <%= regs_num %>) {
            return false;
        }
%   end
% else
%   if regs_num > 0 and imms_num > 0
        if (RegSize() < <%= regs_num %> || ImmSize() < <%= imms_num %>) {
            return false;
        }
%   elsif regs_num > 0
        if (RegSize() < <%= regs_num %>) {
            return false;
        }
%   elsif imms_num > 0
        if (ImmSize() < <%= imms_num %>) {
            return false;
        }
%   end
% end
% if insn.properties.include?('short_long_range') && !insn.mnemonic.include?('range')
%   call_mnemonics = if insn.mnemonic.end_with?('.short')
%     [insn.mnemonic]
%   else
%     ["#{insn.mnemonic}.short", insn.mnemonic]
%   end
%   call_mnemonics.map { |m| instruction_hash[m] }.each do |i|
%     registers = i.operands.select(&:reg?)
        if (RegSize() < <%= registers.size + 1 %>) {
            while (RegSize() < <%= registers.size %>) {
                const_cast<Ins*>(this)->EmplaceReg(0U);
            }
            emitter.<%= i.emitter_name %>(<%= operands(i, "registers").join(", ") %>);
            break;
        }
%   end
% else
        emitter.<%= insn.emitter_name %>(<%= operands(insn).join(", ") %>);
% end
        break;
    }
% end
    default:
        ASSERT(0);
    }

    return true;
}

// NOLINTEND(readability-container-size-empty)

} // namespace ark::pandasm
