/*
* Copyright (c) 2021-2024 Huawei Device Co., Ltd.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// Autogenerated file -- DO NOT EDIT!

#ifndef PANDA_RUNTIME_INTRINSICS_H_
#define PANDA_RUNTIME_INTRINSICS_H_

#include "bridge/bridge.h"
#include "include/coretypes/class.h"
#include "include/coretypes/tagged_value.h"
#include "intrinsics.inl.h"

% Runtime::intrinsics.uniq {|i| i.has_impl? && i.impl }.select { |i| i.has_impl? && i.need_decl && !i.is_stub}.group_by { |i| i.impl.rpartition('::').first }.each_pair do |ns, group|
namespace <%= ns %> {

%   group.each do |i|
%     impl_name = i.impl.rpartition('::').last
%     if i.private
#ifndef PANDA_PRODUCT_BUILD
%     end
%   if i.respond_to?(:irtoc_impl) && i.codegen_arch.include?($selected_target)
// Generate NativePlus irtoc intrinsic prototype if exists and is relevant for the selected architecture
      extern "C" PANDA_PUBLIC_API <%= i.impl_signature.ret %> <%= i.irtoc_impl %>(<%= i.impl_signature.args.join(', ') %>); // NOLINT(readability-named-parameter)
%   end
    extern "C" PANDA_PUBLIC_API <%= i.impl_signature.ret %> <%= impl_name %>(<%= i.impl_signature.args.join(', ') %>); // NOLINT(readability-named-parameter)
%     if i.need_abi_wrapper?
%       impl_name = i.orig_impl.rpartition('::').last
    <%= i.orig_impl_signature.ret %> <%= impl_name %>(<%= i.orig_impl_signature.args.join(', ') %>); // NOLINT(readability-named-parameter)
%     end
%     if i.private
#endif  // PANDA_PRODUCT_BUILD
%     end
%   end

extern "C" PANDA_PUBLIC_API void Memset8(ObjectHeader*, uint8_t, uint32_t, uint32_t); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API void Memset16(ObjectHeader*, uint16_t, uint32_t, uint32_t); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API void Memset32(ObjectHeader*, uint32_t, uint32_t, uint32_t); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API void Memset64(ObjectHeader*, uint64_t, uint32_t, uint32_t); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API void Memsetf32(ObjectHeader*, float, uint32_t, uint32_t); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API void Memsetf64(ObjectHeader*, double, uint32_t, uint32_t); // NOLINT(readability-named-parameter, readability-redundant-declaration)

extern "C" PANDA_PUBLIC_API ObjectHeader* AnyLdbyname(ManagedThread*, Frame*, ObjectHeader*, uint32_t); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API void AnyStbyname(ManagedThread*, Frame*, ObjectHeader*, uint32_t, ObjectHeader*); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API ObjectHeader* AnyLdbyidx(ManagedThread*, ObjectHeader*, double); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API void AnyStbyidx(ManagedThread*, ObjectHeader*, double, ObjectHeader*); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API ObjectHeader* AnyLdbyval(ManagedThread*, ObjectHeader*, ObjectHeader*); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API void AnyStbyval(ManagedThread*, ObjectHeader*, ObjectHeader*, ObjectHeader*); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API bool AnyIsinstance(ManagedThread*, ObjectHeader*, ObjectHeader*); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API ObjectHeader* AnyCall0(ManagedThread*, ObjectHeader*); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API ObjectHeader* AnyCallRange(ManagedThread*, Frame*, ObjectHeader*, uint8_t, uint8_t); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API ObjectHeader* AnyCallShort(ManagedThread*, ObjectHeader*, ObjectHeader*); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API ObjectHeader* AnyCallThis0(ManagedThread*, Frame*, ObjectHeader*, uint32_t); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API ObjectHeader* AnyCallThisRange(ManagedThread*, Frame*, ObjectHeader*, uint32_t, uint8_t, uint8_t); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API ObjectHeader* AnyCallThisShort(ManagedThread*, Frame*, ObjectHeader*, uint32_t , ObjectHeader*); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API ObjectHeader* AnyCallNew0(ManagedThread*, ObjectHeader*); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API ObjectHeader* AnyCallNewRange(ManagedThread*, Frame*, ObjectHeader*, uint8_t, uint8_t); // NOLINT(readability-named-parameter, readability-redundant-declaration)
extern "C" PANDA_PUBLIC_API ObjectHeader* AnyCallNewShort(ManagedThread*, ObjectHeader*, ObjectHeader*); // NOLINT(readability-named-parameter, readability-redundant-declaration)
}  // namespace <%= ns %>

% end
#endif  // PANDA_RUNTIME_INTRINSICS_H_
