/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@!namespace("@ohos.multimedia.image", "image")

struct Size {
  width: i32;
  height: i32;
}

struct Region {
  size: Size;
  x: i32;
  y: i32;
}

enum PixelMapFormat: i32 {
  UNKNOWN = 0,
  ARGB_8888 = 1,
  RGB_565 = 2,
  RGBA_8888 = 3,
  BGRA_8888 = 4,
  RGB_888 = 5,
  ALPHA_8 = 6,
  RGBA_F16 = 7,
  NV21 = 8,
  NV12 = 9,
  RGBA_1010102 = 10,
  YCBCR_P010 = 11,
  YCRCB_P010 = 12,
  ASTC_4x4 = 102
}

struct DecodingOptions {
  index: Optional<i32>;
  sampleSize: Optional<i32>;
  rotate: Optional<i32>;
  editable: Optional<bool>;
  desiredSize: Optional<Size>;
  desiredRegion: Optional<Region>;
  desiredPixelFormat: Optional<PixelMapFormat>;
  fitDensity: Optional<i32>;
}

function CreateImageSource(): ImageSource;

interface PixelMap {}

interface ImageSource {
  CreatePixelMapSync(options: DecodingOptions): PixelMap;
}
