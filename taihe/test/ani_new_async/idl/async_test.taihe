/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@static_overload("add")
@async function addWithAsync(a: i32, b: i32): i32;

@static_overload("add")
@promise function addReturnsPromise(a: i32, b: i32): i32;

function addSync(a: i32, b: i32): i32;

@class
interface IBase {
    @rename("getAsync")
    @async GetWithCallback(): String;

    @rename("getPromise")
    @promise GetReturnsPromise(): String;

    Get(): String;
  
    @rename("setAsync")
    @async SetWithCallback(a: String): void;

    @rename("setPromise")
    @promise SetReturnsPromise(a: String): void;

    Set(a: String): void;

    @static_overload("make")
    MakeWithCallback();

    @static_overload("make")
    MakeReturnsPromise();

    MakeSync();
}

@rename("makeGlobal")
@async function makeGlobalWithCallback();

@rename("makeGlobal")
@promise function makeGlobalReturnsPromise();

function makeGlobalSync();

@rename("getIBaseAsync")
@async function getIBaseWithCallback(): IBase;

@rename("getIBasePromise")
@promise function getIBaseReturnsPromise(): IBase;

function getIBase(): IBase;

@static("IBase")
@rename("printAsync")
@async function printWithCallback(): void;

@static("IBase")
@rename("printPromise")
@promise function printReturnsPromise(): void;

@static("IBase")
function printSync(): void;

struct Data {
  a: String;
  b: String;
  c: i32;
}

@rename("fromStruct")
@async function fromStructWithCallback(data: Data): void;

@rename("fromStruct")
@promise function fromStructReturnsPromise(data: Data): void;

function fromStructSync(data: Data): void;

@rename("toStruct")
@async function toStructWithCallback(a: String, b: String, c: i32): Data;

@rename("toStruct")
@promise function toStructReturnsPromise(a: String, b: String, c: i32): Data;

function toStructSync(a: String, b: String, c: i32): Data;
