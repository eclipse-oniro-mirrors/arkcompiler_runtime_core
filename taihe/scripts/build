#!/usr/bin/env python3
# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import shutil
import subprocess
import tarfile
from datetime import datetime
from pathlib import Path
import struct
import argparse
import zlib


SYSTEM_TYPES = ["linux-x86_64", "windows-x86_64", "darwin-arm64", "darwin-x86_64"]
PYTHON_REPO_URL = "https://gitee.com/ASeaSalt/python-multi-platform.git"
PYTHON_REPO_BRANCH = "main"


class TaiheBuilder:
    def __init__(self, project_dir: Path, system: str, version: str):
        self.project_dir = project_dir
        self.cache_dir = self.project_dir / ".cache" / "python-packages"
        self.base_dist = self.project_dir / "dist"
        self.compiler_dir = self.project_dir / "compiler"
        self.include_dir = self.project_dir / "runtime" / "include"
        self.src_dir = self.project_dir / "runtime" / "src"
        self.doc_dir = self.project_dir / "cookbook"

        self.system = system
        self.dist = self.base_dist / f"taihe-{system}" / "taihe"
        self.dist_lib_dir = self.dist / "lib" / "taihe"
        self.dist_bin_dir = self.dist / "bin"
        self.dist_include_dir = self.dist / "include"
        self.dist_src_dir = self.dist / "src" / "taihe" / "runtime"
        self.dist_doc_dir = self.dist / "share" / "doc" / "taihe"
        self.python_tar = self.cache_dir / f"{system}-python.tar.gz"

        self.version = version

    def init_dirs(self):
        if self.dist.exists():
            shutil.rmtree(self.dist)
        self.dist.mkdir(parents=True, exist_ok=True)
        self.dist_lib_dir.mkdir(parents=True, exist_ok=True)
        self.dist_bin_dir.mkdir(parents=True, exist_ok=True)
        self.dist_include_dir.mkdir(parents=True, exist_ok=True)
        self.dist_src_dir.mkdir(parents=True, exist_ok=True)
        self.dist_doc_dir.mkdir(parents=True, exist_ok=True)

    def copy_runtime(self):
        print(f"Copying the runtime files for {self.system}")
        shutil.copytree(
            self.include_dir,
            self.dist_include_dir,
            dirs_exist_ok=True,
        )
        shutil.copytree(
            self.src_dir,
            self.dist_src_dir,
            dirs_exist_ok=True,
        )

    def copy_documentation(self):
        print(f"Copying the documentation files for {self.system}")
        shutil.copytree(
            self.doc_dir,
            self.dist_doc_dir,
            dirs_exist_ok=True,
            ignore=shutil.ignore_patterns("build", "generated"),
        )

    def copy_compiler(self):
        print(f"Copying the compiler for {self.system}")
        dist_compiler_dir = self.dist_lib_dir / "compiler"
        compiler_dist_dir = self.compiler_dir / "dist"

        taihe_dir = dist_compiler_dir / "taihe"
        taihe_dir.mkdir(parents=True, exist_ok=True)

        if compiler_dist_dir.exists():
            shutil.rmtree(compiler_dist_dir)
        subprocess.run(["uv", "build"], check=True, cwd=self.compiler_dir)

        for file in compiler_dist_dir.glob("taihe-*.gz"):
            with tarfile.open(file, "r:gz") as tar:
                tar.extractall(path=compiler_dist_dir)

        extracted_dir = next(compiler_dist_dir.glob("taihe-*/taihe"))
        shutil.copytree(extracted_dir, taihe_dir, dirs_exist_ok=True)

        compiler_lib_dir = dist_compiler_dir / "lib"
        compiler_lib_dir.mkdir(parents=True, exist_ok=True)

        result = subprocess.run(
            [sys.executable, "-c", "import site; print(site.getsitepackages()[0])"],
            capture_output=True,
            text=True,
            check=True,
        )
        site_packages_dir = Path(result.stdout.strip())

        for package in ["antlr4", "typing_extensions.py"]:
            source = site_packages_dir / package
            if source.exists():
                if source.is_dir():
                    shutil.copytree(
                        source,
                        compiler_lib_dir / package,
                        dirs_exist_ok=True,
                        ignore=shutil.ignore_patterns("__pycache__"),
                    )
                else:
                    shutil.copy2(source, compiler_lib_dir)
            else:
                raise ValueError("Can't find antlr4 and typing_extensions!")

    def extract_python(self):
        if not self.python_tar.exists():
            print(f"Downloading Python for {self.system}...")
            self.cache_dir.mkdir(parents=True, exist_ok=True)
            subprocess.run(
                [
                    "git",
                    "clone",
                    "-q",
                    "--branch",
                    PYTHON_REPO_BRANCH,
                    PYTHON_REPO_URL,
                    self.cache_dir,
                ],
                check=True,
            )
        print(f"Extracting Python for {self.system}")
        with tarfile.open(self.python_tar, "r:gz") as tar:
            tar.extractall(path=self.dist_lib_dir)

    def create_taihec_script(self):
        print(f"Creating taihec script for {self.system}")
        if self.system.startswith("linux"):
            prog = self.dist_bin_dir / "taihe-tryit"
            with open(prog, "w") as f:
                f.write(
                    "#!/bin/bash -eu\n"
                    'export TAIHE_ROOT="$(realpath $(dirname "$0")/..)"\n'
                    'export PYTHONPATH="${TAIHE_ROOT}/lib/taihe/compiler:${TAIHE_ROOT}/lib/taihe/compiler/lib:${PYTHONPATH:-}"\n'
                    'exec "${TAIHE_ROOT}/lib/taihe/python/bin/python3" -c \'from taihe.cli.tryit import *; main(BuildConfig(for_distribution=True));\' "$@"\n'
                )
            prog.chmod(0o755)

        if self.system.startswith("windows"):
            prog = self.dist_bin_dir / "taihec.bat"
            with open(prog, "w") as f:
                f.write(
                    "@echo off\n"
                    "set TAIHE_ROOT=%~dp0..\n"
                    "set PYTHONPATH=%TAIHE_ROOT%\\lib\\taihe\\compiler;%TAIHE_ROOT%\\lib\\taihe\\compiler\\lib;%PYTHONPATH%\n"
                    "%TAIHE_ROOT%\\lib\\taihe\\python\\bin\\python3.11.exe -m taihe.cli.compiler %*\n"
                )
            prog.chmod(0o755)
        else:
            prog = self.dist_bin_dir / "taihec"
            with open(prog, "w") as f:
                f.write(
                    "#!/bin/bash -eu\n"
                    'export TAIHE_ROOT="$(realpath $(dirname "$0")/..)"\n'
                    'export PYTHONPATH="${TAIHE_ROOT}/lib/taihe/compiler:${TAIHE_ROOT}/lib/taihe/compiler/lib:${PYTHONPATH:-}"\n'
                    'exec "${TAIHE_ROOT}/lib/taihe/python/bin/python3" -m taihe.cli.compiler "$@"\n'
                )
            prog.chmod(0o755)

    def write_version(self):
        print(f"Writing version information for {self.system}")
        version_path = self.dist / "version.txt"

        git_commit = subprocess.run(
            ["git", "rev-parse", "HEAD"],
            capture_output=True,
            text=True,
            check=True,
            cwd=self.project_dir,
        ).stdout.strip()

        git_message = (
            subprocess.run(
                ["git", "log", "-1", "--pretty=%B"],
                capture_output=True,
                text=True,
                check=True,
                cwd=self.project_dir,
            )
            .stdout.splitlines()[0]
            .strip()
        )

        with open(version_path, "w") as version_file:
            version_file.write(f"System        : {self.system}\n")
            version_file.write(f"Version       : {self.version}\n")
            version_file.write(f"Last Commit   : {git_commit}\n")
            version_file.write(f"Commit Message: {git_message}\n")

    def create_package(self):
        print(f"Creating package for {self.system}")
        package_name = (
            f"taihe-{self.system}-{self.version}-{datetime.now().strftime('%Y%m%d')}"
        )
        tar_path = self.project_dir / f"{package_name}.tar"
        zip_path = self.project_dir / f"{package_name}.tar.gz"

        def reset_tarinfo(tarinfo: tarfile.TarInfo):
            tarinfo.uid = 0
            tarinfo.gid = 0
            tarinfo.uname = ""
            tarinfo.gname = ""
            tarinfo.mtime = 1704067200
            return tarinfo

        try:
            with tarfile.open(tar_path, "w:", format=tarfile.GNU_FORMAT) as tar:
                for file_path in sorted(self.dist.rglob("*")):
                    if file_path.is_file():
                        arcname = f"{self.dist.name}/{file_path.relative_to(self.dist)}"
                        tar.add(file_path, arcname=arcname, filter=reset_tarinfo)
            with open(tar_path, "rb") as tar_file, open(zip_path, "wb") as zip_file:
                zip_file.write(b"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03")
                compressor = zlib.compressobj(
                    9,
                    zlib.DEFLATED,
                    -zlib.MAX_WBITS,
                    zlib.DEF_MEM_LEVEL,
                    0,
                )
                data = tar_file.read()
                compressed = compressor.compress(data) + compressor.flush()
                zip_file.write(compressed)
                crc = zlib.crc32(data)
                size = len(data)
                zip_file.write(struct.pack("<II", crc & 0xFFFFFFFF, size & 0xFFFFFFFF))
        finally:
            if tar_path.exists():
                tar_path.unlink()

        print(f"Created package for {self.system}: {zip_path}")

    def build(self):
        self.init_dirs()
        self.copy_runtime()
        self.copy_documentation()
        self.copy_compiler()
        self.extract_python()
        self.create_taihec_script()
        self.write_version()
        self.create_package()


def main():
    parser = argparse.ArgumentParser(description="Build the Taihe project.")
    parser.add_argument(
        "--system",
        choices=SYSTEM_TYPES,
        nargs="*",
        default=None,
        help="Specify the system type to build for. Can be used multiple times.",
    )
    args = parser.parse_args()

    project_dir = Path(__file__).parent.parent

    try:
        version = subprocess.run(
            ["git", "describe", "--tags", "--abbrev=0"],
            capture_output=True,
            text=True,
            check=True,
            cwd=project_dir,
        ).stdout.strip()
    except subprocess.CalledProcessError:
        short_hash = subprocess.run(
            ["git", "rev-parse", "--short=8", "HEAD"],
            capture_output=True,
            text=True,
            check=True,
            cwd=project_dir,
        ).stdout.strip()
        version = f"TRUNK-{short_hash}"

    if args.system is None:
        systems = SYSTEM_TYPES
    else:
        systems = args.system

    print(f"Version is {version}")
    for system in systems:
        print(f"Building for {system}")
        builder = TaiheBuilder(project_dir, system, version)
        builder.build()


if __name__ == "__main__":
    main()
