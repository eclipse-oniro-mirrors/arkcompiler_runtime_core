# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//arkcompiler/ets_frontend/ets2panda/ets2abc_config.gni")
import("//arkcompiler/runtime_core/ark_config.gni")
import("$ark_root/tests/test_helper.gni")

ark_root_static = "$ark_root/static_core"

template("ets2abc_mass_gen_abc") {
  assert(defined(invoker.src_file_list), "src_file_list is required!")
  assert(defined(invoker.src_root_dir), "src_root_dir is required!")

  extra_dependencies = []
  if (defined(invoker.extra_dependencies)) {
    extra_dependencies += invoker.extra_dependencies
  }

  foreach(file, invoker.src_file_list) {
    ets2abc_gen_abc("gen_${file}_abc") {
      test_ets = "${invoker.src_root_dir}/${file}.ets"
      test_abc = "${target_out_dir}/${file}.abc"

      # Only targets in this file can depend on this.
      extra_visibility = [ ":*" ]
      src_ets = rebase_path(test_ets)
      dst_file = rebase_path(test_abc)

      in_puts = [ test_ets ]
      out_puts = [ test_abc ]
    }
  }

  group("$target_name") {
    deps = extra_dependencies
    foreach(file, invoker.src_file_list) {
      deps += [ ":gen_${file}_abc" ]
    }
  }
}

template("ark_link_gen_project") {
  assert(defined(invoker.src_file_list), "src_file_list is required!")
  assert(defined(invoker.dst_abc), "dst_abc is required!")
  assert(defined(invoker.src_root_dir), "src_root_dir is required!")

  mass_gen = "${target_name}_gen_abc"
  ets2abc_mass_gen_abc(mass_gen) {
    src_file_list = invoker.src_file_list
    src_root_dir = invoker.src_root_dir
  }

  args = [
    "--output",
    rebase_path(invoker.dst_abc),
    "--",
  ]
  foreach(file, invoker.src_file_list) {
    args += [ rebase_path("$target_out_dir/${file}.abc") ]
  }

  action("$target_name") {
    testonly = true
    script = "$root_out_dir/arkcompiler/runtime_core/ark_link"
    outputs = [ invoker.dst_abc ]
    deps = [
      ":${mass_gen}",
      "$ark_root_static/static_linker:ark_link(${host_toolchain})",
    ]
    if (defined(invoker.extra_dependencies)) {
      deps += invoker.extra_dependencies
    }
  }
}

template("arkguard_host_unittest_action") {
  _target_name_ = "${target_name}"

  # unittest for phone running
  ohos_unittest(_target_name_) {
    forward_variables_from(invoker, "*")
  }

  _module_out_path_ = invoker.module_out_path

  # unittest for host running
  action("${_target_name_}Action") {
    testonly = true

    defines = [ "HOST_UT" ]

    _host_test_target_ = ":${_target_name_}(${host_toolchain})"
    _root_out_dir_ = get_label_info(_host_test_target_, "root_out_dir")

    deps = [ _host_test_target_ ]

    script = "//arkcompiler/ets_runtime/script/run_ark_executable.py"

    args = [
      "--script-file",
      rebase_path(_root_out_dir_) +
          "/tests/unittest/${_module_out_path_}/${_target_name_}",
      "--expect-output",
      "0",
      "--env-path",
      rebase_path(_root_out_dir_) + "/arkcompiler/runtime_core:" +
          rebase_path(_root_out_dir_) + "/arkcompiler/ets_runtime:" +
          rebase_path(_root_out_dir_) + "/thirdparty/icu:" +
          rebase_path(_root_out_dir_) + "/thirdparty/zlib:" +
          rebase_path(_root_out_dir_) + "/thirdparty/libuv:" +
          rebase_path(_root_out_dir_) + "/arkui/napi:" +
          rebase_path(_root_out_dir_) + "/thirdparty/bounds_checking_function:",

      "--timeout-limit",
      "1200",
    ]

    inputs = [
      "$_root_out_dir_/tests/unittest/${_module_out_path_}/${_target_name_}",
    ]
    outputs = [ "$target_out_dir/${_target_name_}/" ]
  }
}
